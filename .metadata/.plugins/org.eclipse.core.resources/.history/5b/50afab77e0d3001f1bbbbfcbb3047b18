/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "math.h"
#include "i2c-lcd.h"
#include <stdio.h>
#include "ccs811.h"
#include <stdlib.h>
#include <string.h>
#include "warning.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define QUEUE_SIZE 9
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define MAX_TASK 6
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

UART_HandleTypeDef huart1;

osThreadId TVOC_meaHandle;
osThreadId CO2_meaHandle;
osThreadId CO_meaHandle;
osThreadId LCD_1Handle;
osThreadId Uart_SendHandle;
osThreadId Task_IsrHandle;
osThreadId WarningHandle;
osMessageQId LCD_QueueHandle;
osSemaphoreId BinarySem_ISRHandle;
/* USER CODE BEGIN PV */
typedef struct {
	char unit[4];
    char sensorName[10];  // Tên cảm biến
    uint16_t value;          // Giá trị đo
} SensorData;

typedef struct {
    const char *name;
    uint32_t execution_time;
    uint32_t deadline;
    uint32_t period;
} TaskConfig;

TaskConfig tasks[] = {
    {"StartCO_mea", 10, 100, 3000},
    {"StartCO2_mea", 10, 1100, 3000},
    {"StartTVOC_mea", 10, 2100, 3000},
    {"StartWarning", 5, 150, 1000},
	{"StartLCD_1", 60, 300, 1000},
    {"StartUart_Send", 10, 2400, 1000},
};
osThreadId task_ids[MAX_TASK];
uint32_t deadlines[MAX_TASK]={100,1100,2100,150,300,2400};

uint16_t Tvoc ;
uint16_t Tvoc_ppb;
uint32_t CO_adc_val;
uint16_t eCO2 ;
uint16_t CO2_ppm;
float CO_vol;
uint16_t CO_ppm;
char Lcd_buf[16];
uint8_t Uart_TX_Buf[40];
uint8_t Uart_RX_Buf[2];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2C2_Init(void);
static void MX_USART1_UART_Init(void);
void StartTVOC_mea(void const * argument);
void StartCO2_mea(void const * argument);
void StartCO_mea(void const * argument);
void StartLCD_1(void const * argument);
void StartUart_Send(void const * argument);
void StartTaskIsr(void const * argument);
void StartWarning(void const * argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int CO_ppm_convert(float CO_vol) {
    float a = ((5.0 - CO_vol) / CO_vol) * (10/10);
    return (int)round(100 * pow(a, -1.559));
}
void CO_measure()
{
	CO_adc_val = HAL_ADC_GetValue(&hadc1);
	CO_vol = ((float)CO_adc_val / 4095.0) * 5;
	CO_ppm = (uint16_t)(CO_ppm_convert(CO_vol));
}
void TVOC_measure()
{
	CCS811_Read_TVOC(&Tvoc);
	Tvoc_ppb=Tvoc;
}
void CO2_measure()
{
	CCS811_Read_Co2(&eCO2);
	CO2_ppm=eCO2;
}
void LCD_Display(SensorData data)
{
	lcd_clear();
	lcd_put_cur(0,0);
	snprintf(Lcd_buf, sizeof(Lcd_buf), "%s:", data.sensorName);
	lcd_send_string (Lcd_buf);
	lcd_put_cur(1,0);
	snprintf(Lcd_buf, sizeof(Lcd_buf), "%d %s", (int)data.value, data.unit);
	lcd_send_string (Lcd_buf);
}

void Uart_Send()
{
	sprintf((char*)Uart_TX_Buf, "TVOC:%d ppb\r\n",(int)Tvoc_ppb);
	HAL_UART_Transmit(&huart1,(uint8_t*) Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
	sprintf((char*)Uart_TX_Buf, "CO:%d ppm\r\n",(int)CO_ppm);
	HAL_UART_Transmit(&huart1, (uint8_t*)Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
	sprintf((char*)Uart_TX_Buf, "CO2:%d ppm\r\n",(int)CO2_ppm);
	HAL_UART_Transmit(&huart1,(uint8_t*)Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
	sprintf((char*)Uart_TX_Buf, "--------\r\n");
	HAL_UART_Transmit(&huart1, (uint8_t*)Uart_TX_Buf, strlen((char*)Uart_TX_Buf), HAL_MAX_DELAY);
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart->Instance == USART1)
    {
    	osSemaphoreRelease(BinarySem_ISRHandle);
    }
    HAL_UART_Receive_IT(&huart1, Uart_RX_Buf, 1);
}
void EDFScheduler();
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_I2C1_Init();
  MX_I2C2_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  CCS811_Init();
  CCS811_Reset();
  CCS811_Set_Mode(CCS811_MODE_1SEC);
  CCS811_EnableInt();
  HAL_ADC_Start(&hadc1);
  lcd_init();
  HAL_UART_Receive_IT(&huart1, Uart_RX_Buf, 1);
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinarySem_ISR */
  osSemaphoreDef(BinarySem_ISR);
  BinarySem_ISRHandle = osSemaphoreCreate(osSemaphore(BinarySem_ISR), 1);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of LCD_Queue */
  osMessageQDef(LCD_Queue, 16, SensorData);
  LCD_QueueHandle = osMessageCreate(osMessageQ(LCD_Queue), NULL);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  {
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
