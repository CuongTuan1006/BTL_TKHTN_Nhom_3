
BTL_Danhiem_EDF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a540  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800a650  0800a650  0000b650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9b0  0800a9b0  0000c0e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9b0  0800a9b0  0000b9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9b8  0800a9b8  0000c0e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9b8  0800a9b8  0000b9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9bc  0800a9bc  0000b9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  0800a9c0  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c8  200000e8  0800aaa8  0000c0e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ab0  0800aaa8  0000cab0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c0e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001824d  00000000  00000000  0000c111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b59  00000000  00000000  0002435e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00027eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000122c  00000000  00000000  000295f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1ba  00000000  00000000  0002a824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b86d  00000000  00000000  000459de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b9c9  00000000  00000000  0006124b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcc14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b74  00000000  00000000  000fcc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001037cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000e8 	.word	0x200000e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a638 	.word	0x0800a638

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ec 	.word	0x200000ec
 800014c:	0800a638 	.word	0x0800a638

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <CCS811_ReadReg>:
extern I2C_HandleTypeDef hi2c2;

#define hi2cxc hi2c2
// Hàm đọc từ 1 thanh ghi (1byte)
uint8_t CCS811_ReadReg(uint8_t addr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af04      	add	r7, sp, #16
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, &result, 1, 100);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	2364      	movs	r3, #100	@ 0x64
 8000d58:	9302      	str	r3, [sp, #8]
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	f107 030f 	add.w	r3, r7, #15
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	2301      	movs	r3, #1
 8000d66:	21b4      	movs	r1, #180	@ 0xb4
 8000d68:	4803      	ldr	r0, [pc, #12]	@ (8000d78 <CCS811_ReadReg+0x34>)
 8000d6a:	f002 fdc9 	bl	8003900 <HAL_I2C_Mem_Read>
    return result;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200003dc 	.word	0x200003dc

08000d7c <CCS811_ReadRegMulti>:
// hàm đọc nhiều byte từ thanh ghi
void CCS811_ReadRegMulti(uint8_t addr, uint8_t * val,uint8_t size)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af04      	add	r7, sp, #16
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read( &hi2cxc, CCS811_ADDR, ( uint8_t )addr, I2C_MEMADD_SIZE_8BIT, val, size,100 );
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	79bb      	ldrb	r3, [r7, #6]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	2164      	movs	r1, #100	@ 0x64
 8000d96:	9102      	str	r1, [sp, #8]
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	21b4      	movs	r1, #180	@ 0xb4
 8000da2:	4803      	ldr	r0, [pc, #12]	@ (8000db0 <CCS811_ReadRegMulti+0x34>)
 8000da4:	f002 fdac 	bl	8003900 <HAL_I2C_Mem_Read>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200003dc 	.word	0x200003dc

08000db4 <CCS811_WriteReg>:

// Hàm viết vào 1 thanh ghi 1byte
void CCS811_WriteReg(uint8_t addr, uint8_t val)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af04      	add	r7, sp, #16
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	71fb      	strb	r3, [r7, #7]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	2364      	movs	r3, #100	@ 0x64
 8000dca:	9302      	str	r3, [sp, #8]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	1dbb      	adds	r3, r7, #6
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	21b4      	movs	r1, #180	@ 0xb4
 8000dd8:	4803      	ldr	r0, [pc, #12]	@ (8000de8 <CCS811_WriteReg+0x34>)
 8000dda:	f002 fc97 	bl	800370c <HAL_I2C_Mem_Write>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200003dc 	.word	0x200003dc

08000dec <CCS811_Init>:
void CCS811_WriteRegMulti(uint8_t addr, uint8_t *data, uint8_t length)
{
    HAL_I2C_Mem_Write(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, data, length, 100);
}
// Hàm khởi tạo CCS811
void CCS811_Init() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af02      	add	r7, sp, #8
    uint8_t status[1] = {0};
 8000df2:	2300      	movs	r3, #0
 8000df4:	723b      	strb	r3, [r7, #8]
    int Init_OK = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
    while(!Init_OK)
 8000dfa:	e026      	b.n	8000e4a <CCS811_Init+0x5e>
    {
		// Kiểm tra trạng thái cảm biến
    	status[0]=CCS811_ReadReg(CCS811_STATUS);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ffa1 	bl	8000d44 <CCS811_ReadReg>
 8000e02:	4603      	mov	r3, r0
 8000e04:	723b      	strb	r3, [r7, #8]
		if ((status[0] & 0x10) == 0)
 8000e06:	7a3b      	ldrb	r3, [r7, #8]
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <CCS811_Init+0x2a>
		{  // Kiểm tra nếu chưa sẵn sàng (bit 4 là 0)
			Init_OK = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	e019      	b.n	8000e4a <CCS811_Init+0x5e>
		}
		else
		{
			// Gửi lệnh bắt đầu ứng dụng
			uint8_t app_start = CCS811_APP_START;
 8000e16:	23f4      	movs	r3, #244	@ 0xf4
 8000e18:	71fb      	strb	r3, [r7, #7]
			HAL_I2C_Master_Transmit(&hi2cxc, CCS811_ADDR, &app_start, 1, HAL_MAX_DELAY);
 8000e1a:	1dfa      	adds	r2, r7, #7
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	21b4      	movs	r1, #180	@ 0xb4
 8000e26:	480d      	ldr	r0, [pc, #52]	@ (8000e5c <CCS811_Init+0x70>)
 8000e28:	f002 fb72 	bl	8003510 <HAL_I2C_Master_Transmit>
			// Kiểm tra lại trạng thái
			status[0]=CCS811_ReadReg(CCS811_STATUS);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff89 	bl	8000d44 <CCS811_ReadReg>
 8000e32:	4603      	mov	r3, r0
 8000e34:	723b      	strb	r3, [r7, #8]
			if ((status[0] & 0x90) != 0x90) //bit 7 và 4=1
 8000e36:	7a3b      	ldrb	r3, [r7, #8]
 8000e38:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 8000e3c:	2b90      	cmp	r3, #144	@ 0x90
 8000e3e:	d002      	beq.n	8000e46 <CCS811_Init+0x5a>
			{  // Kiểm tra nếu sẵn sàng và không có lỗi
				Init_OK = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	e001      	b.n	8000e4a <CCS811_Init+0x5e>
			}
			else
			{
				Init_OK = 1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
    while(!Init_OK)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0d5      	beq.n	8000dfc <CCS811_Init+0x10>
			}

		}
    }
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200003dc 	.word	0x200003dc

08000e60 <CCS811_Set_Mode>:
void CCS811_Set_Mode(uint8_t mode)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
   // Chế độ đo
	mode = mode <<4;
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	71fb      	strb	r3, [r7, #7]
    CCS811_WriteReg(CCS811_MEAS_MODE, mode);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	4619      	mov	r1, r3
 8000e74:	2001      	movs	r0, #1
 8000e76:	f7ff ff9d 	bl	8000db4 <CCS811_WriteReg>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <CCS811_Reset>:
	    //Mode 2 = every 10s
	    //Mode 3 = every 60s
	    //Mode 4 = RAW mode.
 */
void CCS811_Reset(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e8e:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <CCS811_Reset+0x20>)
 8000e90:	f002 f9e2 	bl	8003258 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e9a:	4802      	ldr	r0, [pc, #8]	@ (8000ea4 <CCS811_Reset+0x20>)
 8000e9c:	f002 f9dc 	bl	8003258 <HAL_GPIO_WritePin>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40011000 	.word	0x40011000

08000ea8 <CCS811_Read_Co2>:
//Hàm đọc giá trị Co2
void CCS811_Read_Co2(uint16_t *eCO2)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    uint8_t buf[8]={0};
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
    CCS811_ReadRegMulti(CCS811_ALG_RESULT_DATA, buf, 8);
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f7ff ff5b 	bl	8000d7c <CCS811_ReadRegMulti>
    // Ghép hai byte đầu để lấy giá trị eCO2
    *eCO2 = (buf[0] << 8) | buf[1];
 8000ec6:	7a3b      	ldrb	r3, [r7, #8]
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	7a7b      	ldrb	r3, [r7, #9]
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b21b      	sxth	r3, r3
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	801a      	strh	r2, [r3, #0]
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <CCS811_Read_TVOC>:

void CCS811_Read_TVOC(uint16_t *Tvoc)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
    uint8_t buf[8]={0};
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
    CCS811_ReadRegMulti(CCS811_ALG_RESULT_DATA, buf, 8);
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	2208      	movs	r2, #8
 8000ef8:	4619      	mov	r1, r3
 8000efa:	2002      	movs	r0, #2
 8000efc:	f7ff ff3e 	bl	8000d7c <CCS811_ReadRegMulti>
    // Ghép hai byte đầu để lấy giá trị eCO2
    *Tvoc = (buf[2] << 8) | buf[3];
 8000f00:	7abb      	ldrb	r3, [r7, #10]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	7afb      	ldrb	r3, [r7, #11]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	801a      	strh	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <CCS811_EnableInt>:
    }
}

//Enable the nINT signal
void CCS811_EnableInt(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
	uint8_t setting = CCS811_ReadReg(CCS811_MEAS_MODE); //đọc giá trị lúc trước
 8000f22:	2001      	movs	r0, #1
 8000f24:	f7ff ff0e 	bl	8000d44 <CCS811_ReadReg>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	71fb      	strb	r3, [r7, #7]
	setting |= (1 << 3); //Set INTERRUPT bit ( chế độ khi có giá trị mới sẽ ngắt)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f043 0308 	orr.w	r3, r3, #8
 8000f32:	71fb      	strb	r3, [r7, #7]
	CCS811_WriteReg(CCS811_MEAS_MODE, setting);
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	4619      	mov	r1, r3
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ff3b 	bl	8000db4 <CCS811_WriteReg>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4a06      	ldr	r2, [pc, #24]	@ (8000f70 <vApplicationGetIdleTaskMemory+0x28>)
 8000f58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4a05      	ldr	r2, [pc, #20]	@ (8000f74 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2280      	movs	r2, #128	@ 0x80
 8000f64:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	20000104 	.word	0x20000104
 8000f74:	20000158 	.word	0x20000158

08000f78 <lcd_send_cmd>:
/* vì chỉ dùng 4 bit cao làm 4 bit truyền dữ liệu nên phải truyền mỗi byte thành 2 lần */
/* 3 bit thấp là các chân En, RW, RS nên cũng cần phải đặt luôn trong mỗi lần truyền */

// hàm truyền lệnh, rs=0 để truyền lệnh
void lcd_send_cmd (char cmd)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f023 030f 	bic.w	r3, r3, #15
 8000f88:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  // en=1, rs=0
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	f043 030c 	orr.w	r3, r3, #12
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  // en=0, rs=0
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  // en=1, rs=0
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	f043 030c 	orr.w	r3, r3, #12
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  // en=0, rs=0
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000fb8:	f107 0208 	add.w	r2, r7, #8
 8000fbc:	2364      	movs	r3, #100	@ 0x64
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	214e      	movs	r1, #78	@ 0x4e
 8000fc4:	4803      	ldr	r0, [pc, #12]	@ (8000fd4 <lcd_send_cmd+0x5c>)
 8000fc6:	f002 faa3 	bl	8003510 <HAL_I2C_Master_Transmit>
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000388 	.word	0x20000388

08000fd8 <lcd_send_data>:

// hàm truyền dữ liệu, 1 byte, rs=1 để truyền dữ liệu
void lcd_send_data (char data)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f023 030f 	bic.w	r3, r3, #15
 8000fe8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  // en=1, rs=1
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	f043 030d 	orr.w	r3, r3, #13
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  // en=0, rs=1
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f043 0309 	orr.w	r3, r3, #9
 8001000:	b2db      	uxtb	r3, r3
 8001002:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  // en=1, rs=1
 8001004:	7bbb      	ldrb	r3, [r7, #14]
 8001006:	f043 030d 	orr.w	r3, r3, #13
 800100a:	b2db      	uxtb	r3, r3
 800100c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  // en=0, rs=1
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	f043 0309 	orr.w	r3, r3, #9
 8001014:	b2db      	uxtb	r3, r3
 8001016:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8001018:	f107 0208 	add.w	r2, r7, #8
 800101c:	2364      	movs	r3, #100	@ 0x64
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2304      	movs	r3, #4
 8001022:	214e      	movs	r1, #78	@ 0x4e
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <lcd_send_data+0x5c>)
 8001026:	f002 fa73 	bl	8003510 <HAL_I2C_Master_Transmit>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000388 	.word	0x20000388

08001038 <lcd_clear>:

void lcd_clear (void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 800103e:	2080      	movs	r0, #128	@ 0x80
 8001040:	f7ff ff9a 	bl	8000f78 <lcd_send_cmd>
	for (int i = 0; i < 70; i++)
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	e005      	b.n	8001056 <lcd_clear+0x1e>
	{
		lcd_send_data(' ');
 800104a:	2020      	movs	r0, #32
 800104c:	f7ff ffc4 	bl	8000fd8 <lcd_send_data>
	for (int i = 0; i < 70; i++)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3301      	adds	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b45      	cmp	r3, #69	@ 0x45
 800105a:	ddf6      	ble.n	800104a <lcd_clear+0x12>
	}
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
    switch (row)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <lcd_put_cur+0x18>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d005      	beq.n	8001088 <lcd_put_cur+0x22>
 800107c:	e009      	b.n	8001092 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001084:	603b      	str	r3, [r7, #0]
            break;
 8001086:	e004      	b.n	8001092 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800108e:	603b      	str	r3, [r7, #0]
            break;
 8001090:	bf00      	nop
    }

    lcd_send_cmd(col);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff6e 	bl	8000f78 <lcd_send_cmd>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <lcd_init>:

void lcd_init (void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	// khởi tạo 4 bit
	HAL_Delay(50);  // đợi >40ms
 80010a8:	2032      	movs	r0, #50	@ 0x32
 80010aa:	f001 fa75 	bl	8002598 <HAL_Delay>
	lcd_send_cmd(0x30);
 80010ae:	2030      	movs	r0, #48	@ 0x30
 80010b0:	f7ff ff62 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(5);  // đợi >4.1ms
 80010b4:	2005      	movs	r0, #5
 80010b6:	f001 fa6f 	bl	8002598 <HAL_Delay>
	lcd_send_cmd(0x30);
 80010ba:	2030      	movs	r0, #48	@ 0x30
 80010bc:	f7ff ff5c 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(1);  // đợi >100us
 80010c0:	2001      	movs	r0, #1
 80010c2:	f001 fa69 	bl	8002598 <HAL_Delay>
	lcd_send_cmd(0x30);
 80010c6:	2030      	movs	r0, #48	@ 0x30
 80010c8:	f7ff ff56 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(10);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f001 fa63 	bl	8002598 <HAL_Delay>
	lcd_send_cmd(0x20);  // chế độ 4 bit
 80010d2:	2020      	movs	r0, #32
 80010d4:	f7ff ff50 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(10);
 80010d8:	200a      	movs	r0, #10
 80010da:	f001 fa5d 	bl	8002598 <HAL_Delay>

  // khởi tạo hiển thị
	lcd_send_cmd(0x28); // Cài đặt chức năng --> DL=0 (chế độ 4 bit), N=1 (hiển thị 2 dòng), F=0 (ký tự 5x8)
 80010de:	2028      	movs	r0, #40	@ 0x28
 80010e0:	f7ff ff4a 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f001 fa57 	bl	8002598 <HAL_Delay>
	lcd_send_cmd(0x08); // Điều khiển bật/tắt hiển thị --> D=0, C=0, B=0 ---> tắt hiển thị
 80010ea:	2008      	movs	r0, #8
 80010ec:	f7ff ff44 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f001 fa51 	bl	8002598 <HAL_Delay>
	lcd_send_cmd(0x01);  // xóa màn hình
 80010f6:	2001      	movs	r0, #1
 80010f8:	f7ff ff3e 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f001 fa4b 	bl	8002598 <HAL_Delay>
	HAL_Delay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f001 fa48 	bl	8002598 <HAL_Delay>
	lcd_send_cmd(0x06); // Cài đặt chế độ nhập --> I/D=1 (tăng con trỏ) & S=0 (không dịch chuyển)
 8001108:	2006      	movs	r0, #6
 800110a:	f7ff ff35 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f001 fa42 	bl	8002598 <HAL_Delay>
	lcd_send_cmd(0x0C); // Điều khiển bật/tắt hiển thị --> D=1, C và B=0. (Con trỏ và nhấp nháy, hai bit cuối)
 8001114:	200c      	movs	r0, #12
 8001116:	f7ff ff2f 	bl	8000f78 <lcd_send_cmd>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}

0800111e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 8001126:	e006      	b.n	8001136 <lcd_send_string+0x18>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff51 	bl	8000fd8 <lcd_send_data>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f4      	bne.n	8001128 <lcd_send_string+0xa>
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <CO_ppm_convert>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int CO_ppm_convert(float CO_vol) {
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    float a = ((5.0 - CO_vol) / CO_vol) * (10/10);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f969 	bl	8000428 <__aeabi_f2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	491e      	ldr	r1, [pc, #120]	@ (80011d8 <CO_ppm_convert+0x90>)
 8001160:	f7ff f802 	bl	8000168 <__aeabi_dsub>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4614      	mov	r4, r2
 800116a:	461d      	mov	r5, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff f95b 	bl	8000428 <__aeabi_f2d>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4620      	mov	r0, r4
 8001178:	4629      	mov	r1, r5
 800117a:	f7ff fad7 	bl	800072c <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fc7f 	bl	8000a88 <__aeabi_d2f>
 800118a:	4603      	mov	r3, r0
 800118c:	60fb      	str	r3, [r7, #12]
    return (int)round(100 * pow(a, -1.559));
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f7ff f94a 	bl	8000428 <__aeabi_f2d>
 8001194:	a30e      	add	r3, pc, #56	@ (adr r3, 80011d0 <CO_ppm_convert+0x88>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	f008 faf9 	bl	8009790 <pow>
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <CO_ppm_convert+0x94>)
 80011a4:	f7ff f998 	bl	80004d8 <__aeabi_dmul>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f008 fb5c 	bl	800986c <round>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fc3c 	bl	8000a38 <__aeabi_d2iz>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	f3af 8000 	nop.w
 80011d0:	fbe76c8b 	.word	0xfbe76c8b
 80011d4:	bff8f1a9 	.word	0xbff8f1a9
 80011d8:	40140000 	.word	0x40140000
 80011dc:	40590000 	.word	0x40590000

080011e0 <CO_measure>:
void CO_measure()
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	CO_adc_val = HAL_ADC_GetValue(&hadc1);
 80011e4:	481a      	ldr	r0, [pc, #104]	@ (8001250 <CO_measure+0x70>)
 80011e6:	f001 fb81 	bl	80028ec <HAL_ADC_GetValue>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a19      	ldr	r2, [pc, #100]	@ (8001254 <CO_measure+0x74>)
 80011ee:	6013      	str	r3, [r2, #0]
	CO_vol = ((float)CO_adc_val / 4095.0) * 5;
 80011f0:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <CO_measure+0x74>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fd4d 	bl	8000c94 <__aeabi_ui2f>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f913 	bl	8000428 <__aeabi_f2d>
 8001202:	a311      	add	r3, pc, #68	@ (adr r3, 8001248 <CO_measure+0x68>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff fa90 	bl	800072c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <CO_measure+0x78>)
 800121a:	f7ff f95d 	bl	80004d8 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fc2f 	bl	8000a88 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	4a0b      	ldr	r2, [pc, #44]	@ (800125c <CO_measure+0x7c>)
 800122e:	6013      	str	r3, [r2, #0]
	CO_ppm = (uint16_t)(CO_ppm_convert(CO_vol));
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <CO_measure+0x7c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff87 	bl	8001148 <CO_ppm_convert>
 800123a:	4603      	mov	r3, r0
 800123c:	b29a      	uxth	r2, r3
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <CO_measure+0x80>)
 8001240:	801a      	strh	r2, [r3, #0]
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	00000000 	.word	0x00000000
 800124c:	40affe00 	.word	0x40affe00
 8001250:	20000358 	.word	0x20000358
 8001254:	200004b8 	.word	0x200004b8
 8001258:	40140000 	.word	0x40140000
 800125c:	200004c0 	.word	0x200004c0
 8001260:	200004c4 	.word	0x200004c4

08001264 <TVOC_measure>:
void TVOC_measure()
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	CCS811_Read_TVOC(&Tvoc);
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <TVOC_measure+0x18>)
 800126a:	f7ff fe3a 	bl	8000ee2 <CCS811_Read_TVOC>
	Tvoc_ppb=Tvoc;
 800126e:	4b03      	ldr	r3, [pc, #12]	@ (800127c <TVOC_measure+0x18>)
 8001270:	881a      	ldrh	r2, [r3, #0]
 8001272:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <TVOC_measure+0x1c>)
 8001274:	801a      	strh	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200004b4 	.word	0x200004b4
 8001280:	200004b6 	.word	0x200004b6

08001284 <CO2_measure>:
void CO2_measure()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	CCS811_Read_Co2(&eCO2);
 8001288:	4804      	ldr	r0, [pc, #16]	@ (800129c <CO2_measure+0x18>)
 800128a:	f7ff fe0d 	bl	8000ea8 <CCS811_Read_Co2>
	CO2_ppm=eCO2;
 800128e:	4b03      	ldr	r3, [pc, #12]	@ (800129c <CO2_measure+0x18>)
 8001290:	881a      	ldrh	r2, [r3, #0]
 8001292:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <CO2_measure+0x1c>)
 8001294:	801a      	strh	r2, [r3, #0]
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200004bc 	.word	0x200004bc
 80012a0:	200004be 	.word	0x200004be

080012a4 <LCD_Display>:
void LCD_Display(SensorData data)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	463c      	mov	r4, r7
 80012ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	lcd_clear();
 80012b0:	f7ff fec2 	bl	8001038 <lcd_clear>
	lcd_put_cur(0,0);
 80012b4:	2100      	movs	r1, #0
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff fed5 	bl	8001066 <lcd_put_cur>
	snprintf(Lcd_buf, sizeof(Lcd_buf), "%s:", data.sensorName);
 80012bc:	463b      	mov	r3, r7
 80012be:	3304      	adds	r3, #4
 80012c0:	4a0e      	ldr	r2, [pc, #56]	@ (80012fc <LCD_Display+0x58>)
 80012c2:	2110      	movs	r1, #16
 80012c4:	480e      	ldr	r0, [pc, #56]	@ (8001300 <LCD_Display+0x5c>)
 80012c6:	f007 fd7f 	bl	8008dc8 <sniprintf>
	lcd_send_string (Lcd_buf);
 80012ca:	480d      	ldr	r0, [pc, #52]	@ (8001300 <LCD_Display+0x5c>)
 80012cc:	f7ff ff27 	bl	800111e <lcd_send_string>
	lcd_put_cur(1,0);
 80012d0:	2100      	movs	r1, #0
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff fec7 	bl	8001066 <lcd_put_cur>
	snprintf(Lcd_buf, sizeof(Lcd_buf), "%d %s", (int)data.value, data.unit);
 80012d8:	89fb      	ldrh	r3, [r7, #14]
 80012da:	461a      	mov	r2, r3
 80012dc:	463b      	mov	r3, r7
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4613      	mov	r3, r2
 80012e2:	4a08      	ldr	r2, [pc, #32]	@ (8001304 <LCD_Display+0x60>)
 80012e4:	2110      	movs	r1, #16
 80012e6:	4806      	ldr	r0, [pc, #24]	@ (8001300 <LCD_Display+0x5c>)
 80012e8:	f007 fd6e 	bl	8008dc8 <sniprintf>
	lcd_send_string (Lcd_buf);
 80012ec:	4804      	ldr	r0, [pc, #16]	@ (8001300 <LCD_Display+0x5c>)
 80012ee:	f7ff ff16 	bl	800111e <lcd_send_string>
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd90      	pop	{r4, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	0800a6a8 	.word	0x0800a6a8
 8001300:	200004c8 	.word	0x200004c8
 8001304:	0800a6ac 	.word	0x0800a6ac

08001308 <Uart_Send>:

void Uart_Send()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	sprintf((char*)Uart_TX_Buf, "TVOC:%d ppb\r\n",(int)Tvoc_ppb);
 800130c:	4b1b      	ldr	r3, [pc, #108]	@ (800137c <Uart_Send+0x74>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	491b      	ldr	r1, [pc, #108]	@ (8001380 <Uart_Send+0x78>)
 8001314:	481b      	ldr	r0, [pc, #108]	@ (8001384 <Uart_Send+0x7c>)
 8001316:	f007 fd8b 	bl	8008e30 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*) Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
 800131a:	481a      	ldr	r0, [pc, #104]	@ (8001384 <Uart_Send+0x7c>)
 800131c:	f7fe ff18 	bl	8000150 <strlen>
 8001320:	4603      	mov	r3, r0
 8001322:	b29a      	uxth	r2, r3
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	4916      	ldr	r1, [pc, #88]	@ (8001384 <Uart_Send+0x7c>)
 800132a:	4817      	ldr	r0, [pc, #92]	@ (8001388 <Uart_Send+0x80>)
 800132c:	f004 f916 	bl	800555c <HAL_UART_Transmit>
	sprintf((char*)Uart_TX_Buf, "CO:%d ppm\r\n",(int)CO_ppm);
 8001330:	4b16      	ldr	r3, [pc, #88]	@ (800138c <Uart_Send+0x84>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4916      	ldr	r1, [pc, #88]	@ (8001390 <Uart_Send+0x88>)
 8001338:	4812      	ldr	r0, [pc, #72]	@ (8001384 <Uart_Send+0x7c>)
 800133a:	f007 fd79 	bl	8008e30 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
 800133e:	4811      	ldr	r0, [pc, #68]	@ (8001384 <Uart_Send+0x7c>)
 8001340:	f7fe ff06 	bl	8000150 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	b29a      	uxth	r2, r3
 8001348:	f04f 33ff 	mov.w	r3, #4294967295
 800134c:	490d      	ldr	r1, [pc, #52]	@ (8001384 <Uart_Send+0x7c>)
 800134e:	480e      	ldr	r0, [pc, #56]	@ (8001388 <Uart_Send+0x80>)
 8001350:	f004 f904 	bl	800555c <HAL_UART_Transmit>
	sprintf((char*)Uart_TX_Buf, "CO2:%d ppm\r\n",(int)CO2_ppm);
 8001354:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <Uart_Send+0x8c>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	490f      	ldr	r1, [pc, #60]	@ (8001398 <Uart_Send+0x90>)
 800135c:	4809      	ldr	r0, [pc, #36]	@ (8001384 <Uart_Send+0x7c>)
 800135e:	f007 fd67 	bl	8008e30 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
 8001362:	4808      	ldr	r0, [pc, #32]	@ (8001384 <Uart_Send+0x7c>)
 8001364:	f7fe fef4 	bl	8000150 <strlen>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	4904      	ldr	r1, [pc, #16]	@ (8001384 <Uart_Send+0x7c>)
 8001372:	4805      	ldr	r0, [pc, #20]	@ (8001388 <Uart_Send+0x80>)
 8001374:	f004 f8f2 	bl	800555c <HAL_UART_Transmit>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200004b6 	.word	0x200004b6
 8001380:	0800a6b4 	.word	0x0800a6b4
 8001384:	200004d8 	.word	0x200004d8
 8001388:	20000430 	.word	0x20000430
 800138c:	200004c4 	.word	0x200004c4
 8001390:	0800a6c4 	.word	0x0800a6c4
 8001394:	200004be 	.word	0x200004be
 8001398:	0800a6d0 	.word	0x0800a6d0

0800139c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a08      	ldr	r2, [pc, #32]	@ (80013cc <HAL_UART_RxCpltCallback+0x30>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d104      	bne.n	80013b8 <HAL_UART_RxCpltCallback+0x1c>
    {
    	osSemaphoreRelease(BinarySem_ISRHandle);
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <HAL_UART_RxCpltCallback+0x34>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 f820 	bl	80063f8 <osSemaphoreRelease>
    }
    HAL_UART_Receive_IT(&huart1, Uart_RX_Buf, 1);
 80013b8:	2201      	movs	r2, #1
 80013ba:	4906      	ldr	r1, [pc, #24]	@ (80013d4 <HAL_UART_RxCpltCallback+0x38>)
 80013bc:	4806      	ldr	r0, [pc, #24]	@ (80013d8 <HAL_UART_RxCpltCallback+0x3c>)
 80013be:	f004 f958 	bl	8005672 <HAL_UART_Receive_IT>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40013800 	.word	0x40013800
 80013d0:	20000498 	.word	0x20000498
 80013d4:	20000500 	.word	0x20000500
 80013d8:	20000430 	.word	0x20000430

080013dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b0b8      	sub	sp, #224	@ 0xe0
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e2:	f001 f8a7 	bl	8002534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e6:	f000 f909 	bl	80015fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ea:	f000 fa1b 	bl	8001824 <MX_GPIO_Init>
  MX_ADC1_Init();
 80013ee:	f000 f955 	bl	800169c <MX_ADC1_Init>
  MX_I2C1_Init();
 80013f2:	f000 f991 	bl	8001718 <MX_I2C1_Init>
  MX_I2C2_Init();
 80013f6:	f000 f9bd 	bl	8001774 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80013fa:	f000 f9e9 	bl	80017d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CCS811_Init();
 80013fe:	f7ff fcf5 	bl	8000dec <CCS811_Init>
  CCS811_Reset();
 8001402:	f7ff fd3f 	bl	8000e84 <CCS811_Reset>
  CCS811_Set_Mode(CCS811_MODE_1SEC);
 8001406:	2001      	movs	r0, #1
 8001408:	f7ff fd2a 	bl	8000e60 <CCS811_Set_Mode>
  CCS811_EnableInt();
 800140c:	f7ff fd86 	bl	8000f1c <CCS811_EnableInt>
  HAL_ADC_Start(&hadc1);
 8001410:	4865      	ldr	r0, [pc, #404]	@ (80015a8 <main+0x1cc>)
 8001412:	f001 f9bd 	bl	8002790 <HAL_ADC_Start>
  lcd_init();
 8001416:	f7ff fe45 	bl	80010a4 <lcd_init>
  HAL_UART_Receive_IT(&huart1, Uart_RX_Buf, 1);
 800141a:	2201      	movs	r2, #1
 800141c:	4963      	ldr	r1, [pc, #396]	@ (80015ac <main+0x1d0>)
 800141e:	4864      	ldr	r0, [pc, #400]	@ (80015b0 <main+0x1d4>)
 8001420:	f004 f927 	bl	8005672 <HAL_UART_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinarySem_ISR */
  osSemaphoreDef(BinarySem_ISR);
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  BinarySem_ISRHandle = osSemaphoreCreate(osSemaphore(BinarySem_ISR), 1);
 8001430:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001434:	2101      	movs	r1, #1
 8001436:	4618      	mov	r0, r3
 8001438:	f004 ff5e 	bl	80062f8 <osSemaphoreCreate>
 800143c:	4603      	mov	r3, r0
 800143e:	4a5d      	ldr	r2, [pc, #372]	@ (80015b4 <main+0x1d8>)
 8001440:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of LCD_Queue */
  osMessageQDef(LCD_Queue, 16, SensorData);
 8001442:	4b5d      	ldr	r3, [pc, #372]	@ (80015b8 <main+0x1dc>)
 8001444:	f107 04c8 	add.w	r4, r7, #200	@ 0xc8
 8001448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LCD_QueueHandle = osMessageCreate(osMessageQ(LCD_Queue), NULL);
 800144e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f005 f805 	bl	8006464 <osMessageCreate>
 800145a:	4603      	mov	r3, r0
 800145c:	4a57      	ldr	r2, [pc, #348]	@ (80015bc <main+0x1e0>)
 800145e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TVOC_mea */
  osThreadDef(TVOC_mea, StartTVOC_mea, osPriorityNormal, 0, 128);
 8001460:	4b57      	ldr	r3, [pc, #348]	@ (80015c0 <main+0x1e4>)
 8001462:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8001466:	461d      	mov	r5, r3
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001470:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TVOC_meaHandle = osThreadCreate(osThread(TVOC_mea), NULL);
 8001474:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f004 fec7 	bl	800620e <osThreadCreate>
 8001480:	4603      	mov	r3, r0
 8001482:	4a50      	ldr	r2, [pc, #320]	@ (80015c4 <main+0x1e8>)
 8001484:	6013      	str	r3, [r2, #0]

  /* definition and creation of CO2_mea */
  osThreadDef(CO2_mea, StartCO2_mea, osPriorityNormal, 0, 128);
 8001486:	4b50      	ldr	r3, [pc, #320]	@ (80015c8 <main+0x1ec>)
 8001488:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 800148c:	461d      	mov	r5, r3
 800148e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001492:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001496:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CO2_meaHandle = osThreadCreate(osThread(CO2_mea), NULL);
 800149a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f004 feb4 	bl	800620e <osThreadCreate>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a48      	ldr	r2, [pc, #288]	@ (80015cc <main+0x1f0>)
 80014aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of CO_mea */
  osThreadDef(CO_mea, StartCO_mea, osPriorityNormal, 0, 128);
 80014ac:	4b48      	ldr	r3, [pc, #288]	@ (80015d0 <main+0x1f4>)
 80014ae:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80014b2:	461d      	mov	r5, r3
 80014b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CO_meaHandle = osThreadCreate(osThread(CO_mea), NULL);
 80014c0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f004 fea1 	bl	800620e <osThreadCreate>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a41      	ldr	r2, [pc, #260]	@ (80015d4 <main+0x1f8>)
 80014d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD_1 */
  osThreadDef(LCD_1, StartLCD_1, osPriorityNormal, 0, 128);
 80014d2:	4b41      	ldr	r3, [pc, #260]	@ (80015d8 <main+0x1fc>)
 80014d4:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80014d8:	461d      	mov	r5, r3
 80014da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCD_1Handle = osThreadCreate(osThread(LCD_1), NULL);
 80014e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 fe8e 	bl	800620e <osThreadCreate>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a39      	ldr	r2, [pc, #228]	@ (80015dc <main+0x200>)
 80014f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Uart_Send */
  osThreadDef(Uart_Send, StartUart_Send, osPriorityNormal, 0, 128);
 80014f8:	4b39      	ldr	r3, [pc, #228]	@ (80015e0 <main+0x204>)
 80014fa:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80014fe:	461d      	mov	r5, r3
 8001500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001504:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001508:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Uart_SendHandle = osThreadCreate(osThread(Uart_Send), NULL);
 800150c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f004 fe7b 	bl	800620e <osThreadCreate>
 8001518:	4603      	mov	r3, r0
 800151a:	4a32      	ldr	r2, [pc, #200]	@ (80015e4 <main+0x208>)
 800151c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_Isr */
  osThreadDef(Task_Isr, StartTaskIsr, osPriorityRealtime, 0, 128);
 800151e:	4b32      	ldr	r3, [pc, #200]	@ (80015e8 <main+0x20c>)
 8001520:	f107 0420 	add.w	r4, r7, #32
 8001524:	461d      	mov	r5, r3
 8001526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800152e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_IsrHandle = osThreadCreate(osThread(Task_Isr), NULL);
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f004 fe68 	bl	800620e <osThreadCreate>
 800153e:	4603      	mov	r3, r0
 8001540:	4a2a      	ldr	r2, [pc, #168]	@ (80015ec <main+0x210>)
 8001542:	6013      	str	r3, [r2, #0]

  /* definition and creation of Warning */
  osThreadDef(Warning, StartWarning, osPriorityNormal, 0, 128);
 8001544:	4b2a      	ldr	r3, [pc, #168]	@ (80015f0 <main+0x214>)
 8001546:	1d3c      	adds	r4, r7, #4
 8001548:	461d      	mov	r5, r3
 800154a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WarningHandle = osThreadCreate(osThread(Warning), NULL);
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fe57 	bl	800620e <osThreadCreate>
 8001560:	4603      	mov	r3, r0
 8001562:	4a24      	ldr	r2, [pc, #144]	@ (80015f4 <main+0x218>)
 8001564:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  task_ids[0] = CO_meaHandle;
 8001566:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <main+0x1f8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a23      	ldr	r2, [pc, #140]	@ (80015f8 <main+0x21c>)
 800156c:	6013      	str	r3, [r2, #0]
  task_ids[1] = CO2_meaHandle;
 800156e:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <main+0x1f0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a21      	ldr	r2, [pc, #132]	@ (80015f8 <main+0x21c>)
 8001574:	6053      	str	r3, [r2, #4]
  task_ids[2] = TVOC_meaHandle;
 8001576:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <main+0x1e8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1f      	ldr	r2, [pc, #124]	@ (80015f8 <main+0x21c>)
 800157c:	6093      	str	r3, [r2, #8]
  task_ids[3] = WarningHandle;
 800157e:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <main+0x218>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1d      	ldr	r2, [pc, #116]	@ (80015f8 <main+0x21c>)
 8001584:	60d3      	str	r3, [r2, #12]
  task_ids[4] = LCD_1Handle;
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <main+0x200>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1b      	ldr	r2, [pc, #108]	@ (80015f8 <main+0x21c>)
 800158c:	6113      	str	r3, [r2, #16]
  task_ids[5] = Uart_SendHandle;
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <main+0x208>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a19      	ldr	r2, [pc, #100]	@ (80015f8 <main+0x21c>)
 8001594:	6153      	str	r3, [r2, #20]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001596:	f004 fe23 	bl	80061e0 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	EDFScheduler();
 800159a:	f000 f9b1 	bl	8001900 <EDFScheduler>
	osDelay(100);
 800159e:	2064      	movs	r0, #100	@ 0x64
 80015a0:	f004 fe96 	bl	80062d0 <osDelay>
	EDFScheduler();
 80015a4:	bf00      	nop
 80015a6:	e7f8      	b.n	800159a <main+0x1be>
 80015a8:	20000358 	.word	0x20000358
 80015ac:	20000500 	.word	0x20000500
 80015b0:	20000430 	.word	0x20000430
 80015b4:	20000498 	.word	0x20000498
 80015b8:	0800a6e0 	.word	0x0800a6e0
 80015bc:	20000494 	.word	0x20000494
 80015c0:	0800a6fc 	.word	0x0800a6fc
 80015c4:	20000478 	.word	0x20000478
 80015c8:	0800a720 	.word	0x0800a720
 80015cc:	2000047c 	.word	0x2000047c
 80015d0:	0800a744 	.word	0x0800a744
 80015d4:	20000480 	.word	0x20000480
 80015d8:	0800a768 	.word	0x0800a768
 80015dc:	20000484 	.word	0x20000484
 80015e0:	0800a790 	.word	0x0800a790
 80015e4:	20000488 	.word	0x20000488
 80015e8:	0800a7b8 	.word	0x0800a7b8
 80015ec:	2000048c 	.word	0x2000048c
 80015f0:	0800a7dc 	.word	0x0800a7dc
 80015f4:	20000490 	.word	0x20000490
 80015f8:	2000049c 	.word	0x2000049c

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b094      	sub	sp, #80	@ 0x50
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001606:	2228      	movs	r2, #40	@ 0x28
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f007 fc30 	bl	8008e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800162c:	2302      	movs	r3, #2
 800162e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001630:	2301      	movs	r3, #1
 8001632:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001634:	2310      	movs	r3, #16
 8001636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001638:	2300      	movs	r3, #0
 800163a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001640:	4618      	mov	r0, r3
 8001642:	f003 f807 	bl	8004654 <HAL_RCC_OscConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800164c:	f000 fcb3 	bl	8001fb6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001650:	230f      	movs	r3, #15
 8001652:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fa74 	bl	8004b58 <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001676:	f000 fc9e 	bl	8001fb6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800167a:	2302      	movs	r3, #2
 800167c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	4618      	mov	r0, r3
 8001686:	f003 fc25 	bl	8004ed4 <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001690:	f000 fc91 	bl	8001fb6 <Error_Handler>
  }
}
 8001694:	bf00      	nop
 8001696:	3750      	adds	r7, #80	@ 0x50
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016ac:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <MX_ADC1_Init+0x74>)
 80016ae:	4a19      	ldr	r2, [pc, #100]	@ (8001714 <MX_ADC1_Init+0x78>)
 80016b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016b2:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <MX_ADC1_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016b8:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <MX_ADC1_Init+0x74>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016be:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <MX_ADC1_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <MX_ADC1_Init+0x74>)
 80016c6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80016ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016cc:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <MX_ADC1_Init+0x74>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80016d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <MX_ADC1_Init+0x74>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016d8:	480d      	ldr	r0, [pc, #52]	@ (8001710 <MX_ADC1_Init+0x74>)
 80016da:	f000 ff81 	bl	80025e0 <HAL_ADC_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80016e4:	f000 fc67 	bl	8001fb6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016ec:	2301      	movs	r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	@ (8001710 <MX_ADC1_Init+0x74>)
 80016fa:	f001 f903 	bl	8002904 <HAL_ADC_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001704:	f000 fc57 	bl	8001fb6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000358 	.word	0x20000358
 8001714:	40012400 	.word	0x40012400

08001718 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800171c:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <MX_I2C1_Init+0x50>)
 800171e:	4a13      	ldr	r2, [pc, #76]	@ (800176c <MX_I2C1_Init+0x54>)
 8001720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <MX_I2C1_Init+0x50>)
 8001724:	4a12      	ldr	r2, [pc, #72]	@ (8001770 <MX_I2C1_Init+0x58>)
 8001726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <MX_I2C1_Init+0x50>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800172e:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <MX_I2C1_Init+0x50>)
 8001730:	2200      	movs	r2, #0
 8001732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <MX_I2C1_Init+0x50>)
 8001736:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800173a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800173c:	4b0a      	ldr	r3, [pc, #40]	@ (8001768 <MX_I2C1_Init+0x50>)
 800173e:	2200      	movs	r2, #0
 8001740:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <MX_I2C1_Init+0x50>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001748:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <MX_I2C1_Init+0x50>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <MX_I2C1_Init+0x50>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001754:	4804      	ldr	r0, [pc, #16]	@ (8001768 <MX_I2C1_Init+0x50>)
 8001756:	f001 fd97 	bl	8003288 <HAL_I2C_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001760:	f000 fc29 	bl	8001fb6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000388 	.word	0x20000388
 800176c:	40005400 	.word	0x40005400
 8001770:	000186a0 	.word	0x000186a0

08001774 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <MX_I2C2_Init+0x50>)
 800177a:	4a13      	ldr	r2, [pc, #76]	@ (80017c8 <MX_I2C2_Init+0x54>)
 800177c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800177e:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <MX_I2C2_Init+0x50>)
 8001780:	4a12      	ldr	r2, [pc, #72]	@ (80017cc <MX_I2C2_Init+0x58>)
 8001782:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001784:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <MX_I2C2_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <MX_I2C2_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <MX_I2C2_Init+0x50>)
 8001792:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001796:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001798:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <MX_I2C2_Init+0x50>)
 800179a:	2200      	movs	r2, #0
 800179c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <MX_I2C2_Init+0x50>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <MX_I2C2_Init+0x50>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <MX_I2C2_Init+0x50>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017b0:	4804      	ldr	r0, [pc, #16]	@ (80017c4 <MX_I2C2_Init+0x50>)
 80017b2:	f001 fd69 	bl	8003288 <HAL_I2C_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017bc:	f000 fbfb 	bl	8001fb6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200003dc 	.word	0x200003dc
 80017c8:	40005800 	.word	0x40005800
 80017cc:	000186a0 	.word	0x000186a0

080017d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <MX_USART1_UART_Init+0x50>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b09      	ldr	r3, [pc, #36]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 8001808:	f003 fe58 	bl	80054bc <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001812:	f000 fbd0 	bl	8001fb6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000430 	.word	0x20000430
 8001820:	40013800 	.word	0x40013800

08001824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182a:	f107 0310 	add.w	r3, r7, #16
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001838:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <MX_GPIO_Init+0xd0>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a2d      	ldr	r2, [pc, #180]	@ (80018f4 <MX_GPIO_Init+0xd0>)
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b2b      	ldr	r3, [pc, #172]	@ (80018f4 <MX_GPIO_Init+0xd0>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001850:	4b28      	ldr	r3, [pc, #160]	@ (80018f4 <MX_GPIO_Init+0xd0>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a27      	ldr	r2, [pc, #156]	@ (80018f4 <MX_GPIO_Init+0xd0>)
 8001856:	f043 0320 	orr.w	r3, r3, #32
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <MX_GPIO_Init+0xd0>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0320 	and.w	r3, r3, #32
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <MX_GPIO_Init+0xd0>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a21      	ldr	r2, [pc, #132]	@ (80018f4 <MX_GPIO_Init+0xd0>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b1f      	ldr	r3, [pc, #124]	@ (80018f4 <MX_GPIO_Init+0xd0>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001880:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <MX_GPIO_Init+0xd0>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a1b      	ldr	r2, [pc, #108]	@ (80018f4 <MX_GPIO_Init+0xd0>)
 8001886:	f043 0308 	orr.w	r3, r3, #8
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <MX_GPIO_Init+0xd0>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CCS_RST_GPIO_Port, CCS_RST_Pin, GPIO_PIN_SET);
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800189e:	4816      	ldr	r0, [pc, #88]	@ (80018f8 <MX_GPIO_Init+0xd4>)
 80018a0:	f001 fcda 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L1_LED_Pin|L2_LED_Pin|L3_LED_Pin, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80018aa:	4814      	ldr	r0, [pc, #80]	@ (80018fc <MX_GPIO_Init+0xd8>)
 80018ac:	f001 fcd4 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CCS_RST_Pin */
  GPIO_InitStruct.Pin = CCS_RST_Pin;
 80018b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2302      	movs	r3, #2
 80018c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CCS_RST_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 0310 	add.w	r3, r7, #16
 80018c6:	4619      	mov	r1, r3
 80018c8:	480b      	ldr	r0, [pc, #44]	@ (80018f8 <MX_GPIO_Init+0xd4>)
 80018ca:	f001 fb41 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : L1_LED_Pin L2_LED_Pin L3_LED_Pin */
  GPIO_InitStruct.Pin = L1_LED_Pin|L2_LED_Pin|L3_LED_Pin;
 80018ce:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80018d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2302      	movs	r3, #2
 80018de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4619      	mov	r1, r3
 80018e6:	4805      	ldr	r0, [pc, #20]	@ (80018fc <MX_GPIO_Init+0xd8>)
 80018e8:	f001 fb32 	bl	8002f50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ec:	bf00      	nop
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40011000 	.word	0x40011000
 80018fc:	40010c00 	.word	0x40010c00

08001900 <EDFScheduler>:

/* USER CODE BEGIN 4 */
void EDFScheduler() {
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b08d      	sub	sp, #52	@ 0x34
 8001904:	af00      	add	r7, sp, #0
    uint32_t current_time = osKernelSysTick(); // Lấy th�?i gian hiện tại
 8001906:	f004 fc72 	bl	80061ee <osKernelSysTick>
 800190a:	61f8      	str	r0, [r7, #28]

    // Cập nhật deadline nếu đã quá hạn
    for (int i = 0; i < MAX_TASK; i++) {
 800190c:	2300      	movs	r3, #0
 800190e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001910:	e018      	b.n	8001944 <EDFScheduler+0x44>
        if (current_time >= deadlines[i]) {
 8001912:	4a42      	ldr	r2, [pc, #264]	@ (8001a1c <EDFScheduler+0x11c>)
 8001914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	429a      	cmp	r2, r3
 800191e:	d30e      	bcc.n	800193e <EDFScheduler+0x3e>
            deadlines[i] += tasks[i].period; // Reset deadline
 8001920:	4a3e      	ldr	r2, [pc, #248]	@ (8001a1c <EDFScheduler+0x11c>)
 8001922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001924:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001928:	493d      	ldr	r1, [pc, #244]	@ (8001a20 <EDFScheduler+0x120>)
 800192a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	440b      	add	r3, r1
 8001930:	330c      	adds	r3, #12
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	441a      	add	r2, r3
 8001936:	4939      	ldr	r1, [pc, #228]	@ (8001a1c <EDFScheduler+0x11c>)
 8001938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < MAX_TASK; i++) {
 800193e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001940:	3301      	adds	r3, #1
 8001942:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001946:	2b05      	cmp	r3, #5
 8001948:	dde3      	ble.n	8001912 <EDFScheduler+0x12>
        }
    }

    // Sắp xếp các task theo deadline gần nhất (Bubble Sort)
    for (int i = 0; i < MAX_TASK-1; i++) {
 800194a:	2300      	movs	r3, #0
 800194c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800194e:	e045      	b.n	80019dc <EDFScheduler+0xdc>
        for (int j = i + 1; j < MAX_TASK; j++) {
 8001950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001952:	3301      	adds	r3, #1
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
 8001956:	e03b      	b.n	80019d0 <EDFScheduler+0xd0>
            if (deadlines[i] > deadlines[j]) {
 8001958:	4a30      	ldr	r2, [pc, #192]	@ (8001a1c <EDFScheduler+0x11c>)
 800195a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800195c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001960:	492e      	ldr	r1, [pc, #184]	@ (8001a1c <EDFScheduler+0x11c>)
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001968:	429a      	cmp	r2, r3
 800196a:	d92e      	bls.n	80019ca <EDFScheduler+0xca>
                uint32_t temp = deadlines[i];
 800196c:	4a2b      	ldr	r2, [pc, #172]	@ (8001a1c <EDFScheduler+0x11c>)
 800196e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001974:	617b      	str	r3, [r7, #20]
                deadlines[i] = deadlines[j];
 8001976:	4a29      	ldr	r2, [pc, #164]	@ (8001a1c <EDFScheduler+0x11c>)
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800197e:	4927      	ldr	r1, [pc, #156]	@ (8001a1c <EDFScheduler+0x11c>)
 8001980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                deadlines[j] = temp;
 8001986:	4925      	ldr	r1, [pc, #148]	@ (8001a1c <EDFScheduler+0x11c>)
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                TaskConfig temp_task = tasks[i];
 8001990:	4a23      	ldr	r2, [pc, #140]	@ (8001a20 <EDFScheduler+0x120>)
 8001992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	4413      	add	r3, r2
 8001998:	1d3c      	adds	r4, r7, #4
 800199a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800199c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                tasks[i] = tasks[j];
 80019a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a20 <EDFScheduler+0x120>)
 80019a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	18d1      	adds	r1, r2, r3
 80019a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a20 <EDFScheduler+0x120>)
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	460c      	mov	r4, r1
 80019b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                tasks[j] = temp_task;
 80019b8:	4a19      	ldr	r2, [pc, #100]	@ (8001a20 <EDFScheduler+0x120>)
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4413      	add	r3, r2
 80019c0:	461c      	mov	r4, r3
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int j = i + 1; j < MAX_TASK; j++) {
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	3301      	adds	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	2b05      	cmp	r3, #5
 80019d4:	ddc0      	ble.n	8001958 <EDFScheduler+0x58>
    for (int i = 0; i < MAX_TASK-1; i++) {
 80019d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d8:	3301      	adds	r3, #1
 80019da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019de:	2b04      	cmp	r3, #4
 80019e0:	ddb6      	ble.n	8001950 <EDFScheduler+0x50>
            }
        }
    }
    // Cập nhật độ ưu tiên
    for (int i = 0; i < MAX_TASK; i++) {
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
 80019e6:	e010      	b.n	8001a0a <EDFScheduler+0x10a>
        osPriority priority = osPriorityIdle + (osPriorityRealtime - i-1);
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	837b      	strh	r3, [r7, #26]
        osThreadSetPriority(task_ids[i], priority);
 80019f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001a24 <EDFScheduler+0x124>)
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80019fc:	4611      	mov	r1, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f004 fc51 	bl	80062a6 <osThreadSetPriority>
    for (int i = 0; i < MAX_TASK; i++) {
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	3301      	adds	r3, #1
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	ddeb      	ble.n	80019e8 <EDFScheduler+0xe8>
    }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3734      	adds	r7, #52	@ 0x34
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000060 	.word	0x20000060
 8001a20:	20000000 	.word	0x20000000
 8001a24:	2000049c 	.word	0x2000049c

08001a28 <StartTVOC_mea>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTVOC_mea */
void StartTVOC_mea(void const * argument)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	SensorData data1;
	snprintf(data1.sensorName, sizeof(data1.sensorName), "TVOC");
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	3304      	adds	r3, #4
 8001a36:	4a28      	ldr	r2, [pc, #160]	@ (8001ad8 <StartTVOC_mea+0xb0>)
 8001a38:	210a      	movs	r1, #10
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f007 f9c4 	bl	8008dc8 <sniprintf>
	snprintf(data1.unit, sizeof(data1.unit), "ppb");
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4a25      	ldr	r2, [pc, #148]	@ (8001adc <StartTVOC_mea+0xb4>)
 8001a46:	2104      	movs	r1, #4
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f007 f9bd 	bl	8008dc8 <sniprintf>
	uint32_t task_index = 2;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t execution_time = tasks[task_index].execution_time;  // Th�?i gian thực thi của task
 8001a52:	4a23      	ldr	r2, [pc, #140]	@ (8001ae0 <StartTVOC_mea+0xb8>)
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	4413      	add	r3, r2
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	623b      	str	r3, [r7, #32]
	uint32_t period = tasks[task_index].period;  // Chu kỳ của task
 8001a60:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae0 <StartTVOC_mea+0xb8>)
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4413      	add	r3, r2
 8001a68:	330c      	adds	r3, #12
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	  sprintf((char*)Uart_TX_Buf, " %lu TVOCMEA IN \r\n", osKernelSysTick());
 8001a6e:	f004 fbbe 	bl	80061ee <osKernelSysTick>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	491b      	ldr	r1, [pc, #108]	@ (8001ae4 <StartTVOC_mea+0xbc>)
 8001a78:	481b      	ldr	r0, [pc, #108]	@ (8001ae8 <StartTVOC_mea+0xc0>)
 8001a7a:	f007 f9d9 	bl	8008e30 <siprintf>
	  HAL_UART_Transmit(&huart1, Uart_TX_Buf, 25, HAL_MAX_DELAY);
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	2219      	movs	r2, #25
 8001a84:	4918      	ldr	r1, [pc, #96]	@ (8001ae8 <StartTVOC_mea+0xc0>)
 8001a86:	4819      	ldr	r0, [pc, #100]	@ (8001aec <StartTVOC_mea+0xc4>)
 8001a88:	f003 fd68 	bl	800555c <HAL_UART_Transmit>

	  // Tiến hành đo TVOC
	  TVOC_measure();
 8001a8c:	f7ff fbea 	bl	8001264 <TVOC_measure>
	  data1.value = Tvoc_ppb;
 8001a90:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <StartTVOC_mea+0xc8>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	837b      	strh	r3, [r7, #26]

	  // �?ưa dữ liệu vào queue LCD để hiển thị
	  osMessagePut(LCD_QueueHandle, (uint32_t)(uintptr_t)&data1, osWaitForever);
 8001a96:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <StartTVOC_mea+0xcc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f107 010c 	add.w	r1, r7, #12
 8001a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f004 fd06 	bl	80064b4 <osMessagePut>

	  // Gửi thông báo kết thúc đo TVOC qua UART
	  sprintf((char*)Uart_TX_Buf, " %lu TVOCMEA OUT \r\n", osKernelSysTick());
 8001aa8:	f004 fba1 	bl	80061ee <osKernelSysTick>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4911      	ldr	r1, [pc, #68]	@ (8001af8 <StartTVOC_mea+0xd0>)
 8001ab2:	480d      	ldr	r0, [pc, #52]	@ (8001ae8 <StartTVOC_mea+0xc0>)
 8001ab4:	f007 f9bc 	bl	8008e30 <siprintf>
	  HAL_UART_Transmit(&huart1, Uart_TX_Buf, 25, HAL_MAX_DELAY);
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8001abc:	2219      	movs	r2, #25
 8001abe:	490a      	ldr	r1, [pc, #40]	@ (8001ae8 <StartTVOC_mea+0xc0>)
 8001ac0:	480a      	ldr	r0, [pc, #40]	@ (8001aec <StartTVOC_mea+0xc4>)
 8001ac2:	f003 fd4b 	bl	800555c <HAL_UART_Transmit>

	  osDelay(period - execution_time);
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	f004 fbff 	bl	80062d0 <osDelay>
	  sprintf((char*)Uart_TX_Buf, " %lu TVOCMEA IN \r\n", osKernelSysTick());
 8001ad2:	bf00      	nop
 8001ad4:	e7cb      	b.n	8001a6e <StartTVOC_mea+0x46>
 8001ad6:	bf00      	nop
 8001ad8:	0800a7f8 	.word	0x0800a7f8
 8001adc:	0800a800 	.word	0x0800a800
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	0800a804 	.word	0x0800a804
 8001ae8:	200004d8 	.word	0x200004d8
 8001aec:	20000430 	.word	0x20000430
 8001af0:	200004b6 	.word	0x200004b6
 8001af4:	20000494 	.word	0x20000494
 8001af8:	0800a818 	.word	0x0800a818

08001afc <StartCO2_mea>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCO2_mea */
void StartCO2_mea(void const * argument)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCO2_mea */
	SensorData data2;
	snprintf(data2.sensorName, sizeof(data2.sensorName), "CO2");
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	3304      	adds	r3, #4
 8001b0a:	4a28      	ldr	r2, [pc, #160]	@ (8001bac <StartCO2_mea+0xb0>)
 8001b0c:	210a      	movs	r1, #10
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f007 f95a 	bl	8008dc8 <sniprintf>
	snprintf(data2.unit, sizeof(data2.unit), "ppm");
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	4a25      	ldr	r2, [pc, #148]	@ (8001bb0 <StartCO2_mea+0xb4>)
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f007 f953 	bl	8008dc8 <sniprintf>
	uint32_t task_index = 1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t execution_time = tasks[task_index].execution_time;  // Th�?i gian thực thi của task
 8001b26:	4a23      	ldr	r2, [pc, #140]	@ (8001bb4 <StartCO2_mea+0xb8>)
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3304      	adds	r3, #4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	623b      	str	r3, [r7, #32]
	uint32_t period = tasks[task_index].period;  // Chu kỳ của task
 8001b34:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb4 <StartCO2_mea+0xb8>)
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	4413      	add	r3, r2
 8001b3c:	330c      	adds	r3, #12
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	sprintf((char*)Uart_TX_Buf," %lu CO2MEA IN \r\n",osKernelSysTick());
 8001b42:	f004 fb54 	bl	80061ee <osKernelSysTick>
 8001b46:	4603      	mov	r3, r0
 8001b48:	461a      	mov	r2, r3
 8001b4a:	491b      	ldr	r1, [pc, #108]	@ (8001bb8 <StartCO2_mea+0xbc>)
 8001b4c:	481b      	ldr	r0, [pc, #108]	@ (8001bbc <StartCO2_mea+0xc0>)
 8001b4e:	f007 f96f 	bl	8008e30 <siprintf>
	HAL_UART_Transmit(&huart1, Uart_TX_Buf, 25, HAL_MAX_DELAY);
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	2219      	movs	r2, #25
 8001b58:	4918      	ldr	r1, [pc, #96]	@ (8001bbc <StartCO2_mea+0xc0>)
 8001b5a:	4819      	ldr	r0, [pc, #100]	@ (8001bc0 <StartCO2_mea+0xc4>)
 8001b5c:	f003 fcfe 	bl	800555c <HAL_UART_Transmit>
	CO2_measure();
 8001b60:	f7ff fb90 	bl	8001284 <CO2_measure>
	data2.value = CO2_ppm;
 8001b64:	4b17      	ldr	r3, [pc, #92]	@ (8001bc4 <StartCO2_mea+0xc8>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	837b      	strh	r3, [r7, #26]
	osMessagePut(LCD_QueueHandle, (uint32_t)(uintptr_t)&data2, osWaitForever);
 8001b6a:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <StartCO2_mea+0xcc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f107 010c 	add.w	r1, r7, #12
 8001b72:	f04f 32ff 	mov.w	r2, #4294967295
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 fc9c 	bl	80064b4 <osMessagePut>
	sprintf((char*)Uart_TX_Buf," %lu CO2MEA OUT \r\n",osKernelSysTick());
 8001b7c:	f004 fb37 	bl	80061ee <osKernelSysTick>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	4911      	ldr	r1, [pc, #68]	@ (8001bcc <StartCO2_mea+0xd0>)
 8001b86:	480d      	ldr	r0, [pc, #52]	@ (8001bbc <StartCO2_mea+0xc0>)
 8001b88:	f007 f952 	bl	8008e30 <siprintf>
	HAL_UART_Transmit(&huart1, Uart_TX_Buf, 25, HAL_MAX_DELAY);
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b90:	2219      	movs	r2, #25
 8001b92:	490a      	ldr	r1, [pc, #40]	@ (8001bbc <StartCO2_mea+0xc0>)
 8001b94:	480a      	ldr	r0, [pc, #40]	@ (8001bc0 <StartCO2_mea+0xc4>)
 8001b96:	f003 fce1 	bl	800555c <HAL_UART_Transmit>
	osDelay(period - execution_time);
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f004 fb95 	bl	80062d0 <osDelay>
	sprintf((char*)Uart_TX_Buf," %lu CO2MEA IN \r\n",osKernelSysTick());
 8001ba6:	bf00      	nop
 8001ba8:	e7cb      	b.n	8001b42 <StartCO2_mea+0x46>
 8001baa:	bf00      	nop
 8001bac:	0800a82c 	.word	0x0800a82c
 8001bb0:	0800a830 	.word	0x0800a830
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	0800a834 	.word	0x0800a834
 8001bbc:	200004d8 	.word	0x200004d8
 8001bc0:	20000430 	.word	0x20000430
 8001bc4:	200004be 	.word	0x200004be
 8001bc8:	20000494 	.word	0x20000494
 8001bcc:	0800a848 	.word	0x0800a848

08001bd0 <StartCO_mea>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCO_mea */
void StartCO_mea(void const * argument)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCO_mea */
	SensorData data3;
	snprintf(data3.sensorName, sizeof(data3.sensorName), "CO");
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	3304      	adds	r3, #4
 8001bde:	4a28      	ldr	r2, [pc, #160]	@ (8001c80 <StartCO_mea+0xb0>)
 8001be0:	210a      	movs	r1, #10
 8001be2:	4618      	mov	r0, r3
 8001be4:	f007 f8f0 	bl	8008dc8 <sniprintf>
	snprintf(data3.unit, sizeof(data3.unit), "ppm");
 8001be8:	f107 030c 	add.w	r3, r7, #12
 8001bec:	4a25      	ldr	r2, [pc, #148]	@ (8001c84 <StartCO_mea+0xb4>)
 8001bee:	2104      	movs	r1, #4
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f007 f8e9 	bl	8008dc8 <sniprintf>
	uint32_t task_index = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t execution_time = tasks[task_index].execution_time;  // Th�?i gian thực thi của task
 8001bfa:	4a23      	ldr	r2, [pc, #140]	@ (8001c88 <StartCO_mea+0xb8>)
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	4413      	add	r3, r2
 8001c02:	3304      	adds	r3, #4
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	623b      	str	r3, [r7, #32]
	uint32_t period = tasks[task_index].period;  // Chu kỳ của task
 8001c08:	4a1f      	ldr	r2, [pc, #124]	@ (8001c88 <StartCO_mea+0xb8>)
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	330c      	adds	r3, #12
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	sprintf((char*)Uart_TX_Buf," %lu COMEA IN \r\n",osKernelSysTick());
 8001c16:	f004 faea 	bl	80061ee <osKernelSysTick>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	491b      	ldr	r1, [pc, #108]	@ (8001c8c <StartCO_mea+0xbc>)
 8001c20:	481b      	ldr	r0, [pc, #108]	@ (8001c90 <StartCO_mea+0xc0>)
 8001c22:	f007 f905 	bl	8008e30 <siprintf>
	HAL_UART_Transmit(&huart1, Uart_TX_Buf, 25, HAL_MAX_DELAY);
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	2219      	movs	r2, #25
 8001c2c:	4918      	ldr	r1, [pc, #96]	@ (8001c90 <StartCO_mea+0xc0>)
 8001c2e:	4819      	ldr	r0, [pc, #100]	@ (8001c94 <StartCO_mea+0xc4>)
 8001c30:	f003 fc94 	bl	800555c <HAL_UART_Transmit>
	CO_measure();
 8001c34:	f7ff fad4 	bl	80011e0 <CO_measure>
	data3.value = CO_ppm;
 8001c38:	4b17      	ldr	r3, [pc, #92]	@ (8001c98 <StartCO_mea+0xc8>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	837b      	strh	r3, [r7, #26]
	osMessagePut(LCD_QueueHandle, (uint32_t)(uintptr_t)&data3, osWaitForever);
 8001c3e:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <StartCO_mea+0xcc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f107 010c 	add.w	r1, r7, #12
 8001c46:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f004 fc32 	bl	80064b4 <osMessagePut>
	sprintf((char*)Uart_TX_Buf," %lu COMEA OUT \r\n",osKernelSysTick());
 8001c50:	f004 facd 	bl	80061ee <osKernelSysTick>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4911      	ldr	r1, [pc, #68]	@ (8001ca0 <StartCO_mea+0xd0>)
 8001c5a:	480d      	ldr	r0, [pc, #52]	@ (8001c90 <StartCO_mea+0xc0>)
 8001c5c:	f007 f8e8 	bl	8008e30 <siprintf>
	HAL_UART_Transmit(&huart1, Uart_TX_Buf, 25, HAL_MAX_DELAY);
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
 8001c64:	2219      	movs	r2, #25
 8001c66:	490a      	ldr	r1, [pc, #40]	@ (8001c90 <StartCO_mea+0xc0>)
 8001c68:	480a      	ldr	r0, [pc, #40]	@ (8001c94 <StartCO_mea+0xc4>)
 8001c6a:	f003 fc77 	bl	800555c <HAL_UART_Transmit>
	osDelay(period - execution_time);
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 fb2b 	bl	80062d0 <osDelay>
	sprintf((char*)Uart_TX_Buf," %lu COMEA IN \r\n",osKernelSysTick());
 8001c7a:	bf00      	nop
 8001c7c:	e7cb      	b.n	8001c16 <StartCO_mea+0x46>
 8001c7e:	bf00      	nop
 8001c80:	0800a85c 	.word	0x0800a85c
 8001c84:	0800a830 	.word	0x0800a830
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	0800a860 	.word	0x0800a860
 8001c90:	200004d8 	.word	0x200004d8
 8001c94:	20000430 	.word	0x20000430
 8001c98:	200004c4 	.word	0x200004c4
 8001c9c:	20000494 	.word	0x20000494
 8001ca0:	0800a874 	.word	0x0800a874

08001ca4 <StartLCD_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD_1 */
void StartLCD_1(void const * argument)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b08d      	sub	sp, #52	@ 0x34
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD_1 */
	osEvent evt;
	SensorData receivedData;
	uint32_t task_index = 4;
 8001cac:	2304      	movs	r3, #4
 8001cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t execution_time = tasks[task_index].execution_time;  // Th�?i gian thực thi của task
 8001cb0:	4a25      	ldr	r2, [pc, #148]	@ (8001d48 <StartLCD_1+0xa4>)
 8001cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t period = tasks[task_index].period;  // Chu kỳ của task
 8001cbe:	4a22      	ldr	r2, [pc, #136]	@ (8001d48 <StartLCD_1+0xa4>)
 8001cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	4413      	add	r3, r2
 8001cc6:	330c      	adds	r3, #12
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Infinite loop */
  for(;;)
  {
	evt = osMessageGet(LCD_QueueHandle, osWaitForever);
 8001ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d4c <StartLCD_1+0xa8>)
 8001cce:	6819      	ldr	r1, [r3, #0]
 8001cd0:	f107 0318 	add.w	r3, r7, #24
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f004 fc2b 	bl	8006534 <osMessageGet>
	if (evt.status == osEventMessage)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	2b10      	cmp	r3, #16
 8001ce2:	d12a      	bne.n	8001d3a <StartLCD_1+0x96>
	{
	   receivedData = *(SensorData *)evt.value.p;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f107 0408 	add.w	r4, r7, #8
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	6859      	ldr	r1, [r3, #4]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	   sprintf((char*)Uart_TX_Buf," %lu LCD IN %d \r\n",osKernelSysTick(),receivedData.value);
 8001cf4:	f004 fa7b 	bl	80061ee <osKernelSysTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	8afb      	ldrh	r3, [r7, #22]
 8001cfc:	4914      	ldr	r1, [pc, #80]	@ (8001d50 <StartLCD_1+0xac>)
 8001cfe:	4815      	ldr	r0, [pc, #84]	@ (8001d54 <StartLCD_1+0xb0>)
 8001d00:	f007 f896 	bl	8008e30 <siprintf>
	   HAL_UART_Transmit(&huart1, Uart_TX_Buf, 25, HAL_MAX_DELAY);
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
 8001d08:	2219      	movs	r2, #25
 8001d0a:	4912      	ldr	r1, [pc, #72]	@ (8001d54 <StartLCD_1+0xb0>)
 8001d0c:	4812      	ldr	r0, [pc, #72]	@ (8001d58 <StartLCD_1+0xb4>)
 8001d0e:	f003 fc25 	bl	800555c <HAL_UART_Transmit>

	   LCD_Display(receivedData);
 8001d12:	f107 0308 	add.w	r3, r7, #8
 8001d16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d18:	f7ff fac4 	bl	80012a4 <LCD_Display>

	   sprintf((char*)Uart_TX_Buf," %lu LCD OUT \r\n",osKernelSysTick());
 8001d1c:	f004 fa67 	bl	80061ee <osKernelSysTick>
 8001d20:	4603      	mov	r3, r0
 8001d22:	461a      	mov	r2, r3
 8001d24:	490d      	ldr	r1, [pc, #52]	@ (8001d5c <StartLCD_1+0xb8>)
 8001d26:	480b      	ldr	r0, [pc, #44]	@ (8001d54 <StartLCD_1+0xb0>)
 8001d28:	f007 f882 	bl	8008e30 <siprintf>
	   HAL_UART_Transmit(&huart1, Uart_TX_Buf, 25, HAL_MAX_DELAY);
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d30:	2219      	movs	r2, #25
 8001d32:	4908      	ldr	r1, [pc, #32]	@ (8001d54 <StartLCD_1+0xb0>)
 8001d34:	4808      	ldr	r0, [pc, #32]	@ (8001d58 <StartLCD_1+0xb4>)
 8001d36:	f003 fc11 	bl	800555c <HAL_UART_Transmit>
	}
    osDelay(period-execution_time);
 8001d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f004 fac5 	bl	80062d0 <osDelay>
	evt = osMessageGet(LCD_QueueHandle, osWaitForever);
 8001d46:	e7c1      	b.n	8001ccc <StartLCD_1+0x28>
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000494 	.word	0x20000494
 8001d50:	0800a888 	.word	0x0800a888
 8001d54:	200004d8 	.word	0x200004d8
 8001d58:	20000430 	.word	0x20000430
 8001d5c:	0800a89c 	.word	0x0800a89c

08001d60 <StartUart_Send>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUart_Send */
void StartUart_Send(void const * argument)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUart_Send */
	uint32_t task_index = 5;
 8001d68:	2305      	movs	r3, #5
 8001d6a:	617b      	str	r3, [r7, #20]
	uint32_t execution_time = tasks[task_index].execution_time;  // Th�?i gian thực thi của task
 8001d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd8 <StartUart_Send+0x78>)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4413      	add	r3, r2
 8001d74:	3304      	adds	r3, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	613b      	str	r3, [r7, #16]
	uint32_t period = tasks[task_index].period;  // Chu kỳ của task
 8001d7a:	4a17      	ldr	r2, [pc, #92]	@ (8001dd8 <StartUart_Send+0x78>)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	4413      	add	r3, r2
 8001d82:	330c      	adds	r3, #12
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	sprintf((char*)Uart_TX_Buf," %lu UART IN \r\n",osKernelSysTick());
 8001d88:	f004 fa31 	bl	80061ee <osKernelSysTick>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4912      	ldr	r1, [pc, #72]	@ (8001ddc <StartUart_Send+0x7c>)
 8001d92:	4813      	ldr	r0, [pc, #76]	@ (8001de0 <StartUart_Send+0x80>)
 8001d94:	f007 f84c 	bl	8008e30 <siprintf>
	HAL_UART_Transmit(&huart1, Uart_TX_Buf, 25, HAL_MAX_DELAY);
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	2219      	movs	r2, #25
 8001d9e:	4910      	ldr	r1, [pc, #64]	@ (8001de0 <StartUart_Send+0x80>)
 8001da0:	4810      	ldr	r0, [pc, #64]	@ (8001de4 <StartUart_Send+0x84>)
 8001da2:	f003 fbdb 	bl	800555c <HAL_UART_Transmit>
	Uart_Send();
 8001da6:	f7ff faaf 	bl	8001308 <Uart_Send>
	sprintf((char*)Uart_TX_Buf," %lu UART OUT \r\n",osKernelSysTick());
 8001daa:	f004 fa20 	bl	80061ee <osKernelSysTick>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	490d      	ldr	r1, [pc, #52]	@ (8001de8 <StartUart_Send+0x88>)
 8001db4:	480a      	ldr	r0, [pc, #40]	@ (8001de0 <StartUart_Send+0x80>)
 8001db6:	f007 f83b 	bl	8008e30 <siprintf>
	HAL_UART_Transmit(&huart1, Uart_TX_Buf, 25, HAL_MAX_DELAY);
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbe:	2219      	movs	r2, #25
 8001dc0:	4907      	ldr	r1, [pc, #28]	@ (8001de0 <StartUart_Send+0x80>)
 8001dc2:	4808      	ldr	r0, [pc, #32]	@ (8001de4 <StartUart_Send+0x84>)
 8001dc4:	f003 fbca 	bl	800555c <HAL_UART_Transmit>
    osDelay(period-execution_time);
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 fa7e 	bl	80062d0 <osDelay>
	sprintf((char*)Uart_TX_Buf," %lu UART IN \r\n",osKernelSysTick());
 8001dd4:	bf00      	nop
 8001dd6:	e7d7      	b.n	8001d88 <StartUart_Send+0x28>
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	0800a8ac 	.word	0x0800a8ac
 8001de0:	200004d8 	.word	0x200004d8
 8001de4:	20000430 	.word	0x20000430
 8001de8:	0800a8bc 	.word	0x0800a8bc

08001dec <StartTaskIsr>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskIsr */
void StartTaskIsr(void const * argument)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskIsr */
  /* Infinite loop */
  for(;;)
  {
	 osSemaphoreWait(BinarySem_ISRHandle,osWaitForever);
 8001df4:	4b39      	ldr	r3, [pc, #228]	@ (8001edc <StartTaskIsr+0xf0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 faad 	bl	800635c <osSemaphoreWait>
	 sprintf((char*)Uart_TX_Buf,"%lu ISR IN \r\n", osKernelSysTick());
 8001e02:	f004 f9f4 	bl	80061ee <osKernelSysTick>
 8001e06:	4603      	mov	r3, r0
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4935      	ldr	r1, [pc, #212]	@ (8001ee0 <StartTaskIsr+0xf4>)
 8001e0c:	4835      	ldr	r0, [pc, #212]	@ (8001ee4 <StartTaskIsr+0xf8>)
 8001e0e:	f007 f80f 	bl	8008e30 <siprintf>
	 HAL_UART_Transmit(&huart1, Uart_TX_Buf, 25, HAL_MAX_DELAY);
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	2219      	movs	r2, #25
 8001e18:	4932      	ldr	r1, [pc, #200]	@ (8001ee4 <StartTaskIsr+0xf8>)
 8001e1a:	4833      	ldr	r0, [pc, #204]	@ (8001ee8 <StartTaskIsr+0xfc>)
 8001e1c:	f003 fb9e 	bl	800555c <HAL_UART_Transmit>
	 if((char)Uart_RX_Buf[0] == '3')
 8001e20:	4b32      	ldr	r3, [pc, #200]	@ (8001eec <StartTaskIsr+0x100>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b33      	cmp	r3, #51	@ 0x33
 8001e26:	d114      	bne.n	8001e52 <StartTaskIsr+0x66>
	 {
		TVOC_measure();
 8001e28:	f7ff fa1c 	bl	8001264 <TVOC_measure>
		sprintf((char*)Uart_TX_Buf, "TVOC:%d ppb\r\n",(int)Tvoc_ppb);
 8001e2c:	4b30      	ldr	r3, [pc, #192]	@ (8001ef0 <StartTaskIsr+0x104>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4930      	ldr	r1, [pc, #192]	@ (8001ef4 <StartTaskIsr+0x108>)
 8001e34:	482b      	ldr	r0, [pc, #172]	@ (8001ee4 <StartTaskIsr+0xf8>)
 8001e36:	f006 fffb 	bl	8008e30 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*) Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
 8001e3a:	482a      	ldr	r0, [pc, #168]	@ (8001ee4 <StartTaskIsr+0xf8>)
 8001e3c:	f7fe f988 	bl	8000150 <strlen>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	f04f 33ff 	mov.w	r3, #4294967295
 8001e48:	4926      	ldr	r1, [pc, #152]	@ (8001ee4 <StartTaskIsr+0xf8>)
 8001e4a:	4827      	ldr	r0, [pc, #156]	@ (8001ee8 <StartTaskIsr+0xfc>)
 8001e4c:	f003 fb86 	bl	800555c <HAL_UART_Transmit>
 8001e50:	e030      	b.n	8001eb4 <StartTaskIsr+0xc8>
	 }
	 else if((char)Uart_RX_Buf[0]  == '2')
 8001e52:	4b26      	ldr	r3, [pc, #152]	@ (8001eec <StartTaskIsr+0x100>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b32      	cmp	r3, #50	@ 0x32
 8001e58:	d114      	bne.n	8001e84 <StartTaskIsr+0x98>
	 {
		CO2_measure();
 8001e5a:	f7ff fa13 	bl	8001284 <CO2_measure>
		sprintf((char*)Uart_TX_Buf, "CO2:%d ppm\r\n",(int)CO2_ppm);
 8001e5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ef8 <StartTaskIsr+0x10c>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4925      	ldr	r1, [pc, #148]	@ (8001efc <StartTaskIsr+0x110>)
 8001e66:	481f      	ldr	r0, [pc, #124]	@ (8001ee4 <StartTaskIsr+0xf8>)
 8001e68:	f006 ffe2 	bl	8008e30 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*) Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
 8001e6c:	481d      	ldr	r0, [pc, #116]	@ (8001ee4 <StartTaskIsr+0xf8>)
 8001e6e:	f7fe f96f 	bl	8000150 <strlen>
 8001e72:	4603      	mov	r3, r0
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	491a      	ldr	r1, [pc, #104]	@ (8001ee4 <StartTaskIsr+0xf8>)
 8001e7c:	481a      	ldr	r0, [pc, #104]	@ (8001ee8 <StartTaskIsr+0xfc>)
 8001e7e:	f003 fb6d 	bl	800555c <HAL_UART_Transmit>
 8001e82:	e017      	b.n	8001eb4 <StartTaskIsr+0xc8>
	 }
	 else if((char)Uart_RX_Buf[0]  == '1')
 8001e84:	4b19      	ldr	r3, [pc, #100]	@ (8001eec <StartTaskIsr+0x100>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b31      	cmp	r3, #49	@ 0x31
 8001e8a:	d113      	bne.n	8001eb4 <StartTaskIsr+0xc8>
	 {
		CO_measure();
 8001e8c:	f7ff f9a8 	bl	80011e0 <CO_measure>
		sprintf((char*)Uart_TX_Buf, "CO:%d ppm\r\n",(int)CO_ppm);
 8001e90:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <StartTaskIsr+0x114>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	491b      	ldr	r1, [pc, #108]	@ (8001f04 <StartTaskIsr+0x118>)
 8001e98:	4812      	ldr	r0, [pc, #72]	@ (8001ee4 <StartTaskIsr+0xf8>)
 8001e9a:	f006 ffc9 	bl	8008e30 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*) Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
 8001e9e:	4811      	ldr	r0, [pc, #68]	@ (8001ee4 <StartTaskIsr+0xf8>)
 8001ea0:	f7fe f956 	bl	8000150 <strlen>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eac:	490d      	ldr	r1, [pc, #52]	@ (8001ee4 <StartTaskIsr+0xf8>)
 8001eae:	480e      	ldr	r0, [pc, #56]	@ (8001ee8 <StartTaskIsr+0xfc>)
 8001eb0:	f003 fb54 	bl	800555c <HAL_UART_Transmit>
	 }
	 sprintf((char*)Uart_TX_Buf,"%lu ISR OUT \r\n", osKernelSysTick());
 8001eb4:	f004 f99b 	bl	80061ee <osKernelSysTick>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4912      	ldr	r1, [pc, #72]	@ (8001f08 <StartTaskIsr+0x11c>)
 8001ebe:	4809      	ldr	r0, [pc, #36]	@ (8001ee4 <StartTaskIsr+0xf8>)
 8001ec0:	f006 ffb6 	bl	8008e30 <siprintf>
	 HAL_UART_Transmit(&huart1, Uart_TX_Buf, 25, HAL_MAX_DELAY);
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec8:	2219      	movs	r2, #25
 8001eca:	4906      	ldr	r1, [pc, #24]	@ (8001ee4 <StartTaskIsr+0xf8>)
 8001ecc:	4806      	ldr	r0, [pc, #24]	@ (8001ee8 <StartTaskIsr+0xfc>)
 8001ece:	f003 fb45 	bl	800555c <HAL_UART_Transmit>
	 //osSemaphoreRelease(myBinarySem01Handle);
	 osDelay(1000);
 8001ed2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ed6:	f004 f9fb 	bl	80062d0 <osDelay>
	 osSemaphoreWait(BinarySem_ISRHandle,osWaitForever);
 8001eda:	e78b      	b.n	8001df4 <StartTaskIsr+0x8>
 8001edc:	20000498 	.word	0x20000498
 8001ee0:	0800a8d0 	.word	0x0800a8d0
 8001ee4:	200004d8 	.word	0x200004d8
 8001ee8:	20000430 	.word	0x20000430
 8001eec:	20000500 	.word	0x20000500
 8001ef0:	200004b6 	.word	0x200004b6
 8001ef4:	0800a6b4 	.word	0x0800a6b4
 8001ef8:	200004be 	.word	0x200004be
 8001efc:	0800a6d0 	.word	0x0800a6d0
 8001f00:	200004c4 	.word	0x200004c4
 8001f04:	0800a6c4 	.word	0x0800a6c4
 8001f08:	0800a8e0 	.word	0x0800a8e0

08001f0c <StartWarning>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWarning */
void StartWarning(void const * argument)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWarning */
	uint32_t task_index = 3;
 8001f14:	2303      	movs	r3, #3
 8001f16:	617b      	str	r3, [r7, #20]
	uint32_t execution_time = tasks[task_index].execution_time;  // Th�?i gian thực thi của task
 8001f18:	4a1a      	ldr	r2, [pc, #104]	@ (8001f84 <StartWarning+0x78>)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	4413      	add	r3, r2
 8001f20:	3304      	adds	r3, #4
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	613b      	str	r3, [r7, #16]
	uint32_t period = tasks[task_index].period;  // Chu kỳ của task
 8001f26:	4a17      	ldr	r2, [pc, #92]	@ (8001f84 <StartWarning+0x78>)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	4413      	add	r3, r2
 8001f2e:	330c      	adds	r3, #12
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	sprintf((char*)Uart_TX_Buf,"%lu Warning IN \r\n", osKernelSysTick());
 8001f34:	f004 f95b 	bl	80061ee <osKernelSysTick>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4912      	ldr	r1, [pc, #72]	@ (8001f88 <StartWarning+0x7c>)
 8001f3e:	4813      	ldr	r0, [pc, #76]	@ (8001f8c <StartWarning+0x80>)
 8001f40:	f006 ff76 	bl	8008e30 <siprintf>
	HAL_UART_Transmit(&huart1, Uart_TX_Buf, 25, HAL_MAX_DELAY);
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
 8001f48:	2219      	movs	r2, #25
 8001f4a:	4910      	ldr	r1, [pc, #64]	@ (8001f8c <StartWarning+0x80>)
 8001f4c:	4810      	ldr	r0, [pc, #64]	@ (8001f90 <StartWarning+0x84>)
 8001f4e:	f003 fb05 	bl	800555c <HAL_UART_Transmit>
	Warning();
 8001f52:	f000 fa99 	bl	8002488 <Warning>
	sprintf((char*)Uart_TX_Buf,"%lu Warning OUT \r\n", osKernelSysTick());
 8001f56:	f004 f94a 	bl	80061ee <osKernelSysTick>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	490d      	ldr	r1, [pc, #52]	@ (8001f94 <StartWarning+0x88>)
 8001f60:	480a      	ldr	r0, [pc, #40]	@ (8001f8c <StartWarning+0x80>)
 8001f62:	f006 ff65 	bl	8008e30 <siprintf>
	HAL_UART_Transmit(&huart1, Uart_TX_Buf, 25, HAL_MAX_DELAY);
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	2219      	movs	r2, #25
 8001f6c:	4907      	ldr	r1, [pc, #28]	@ (8001f8c <StartWarning+0x80>)
 8001f6e:	4808      	ldr	r0, [pc, #32]	@ (8001f90 <StartWarning+0x84>)
 8001f70:	f003 faf4 	bl	800555c <HAL_UART_Transmit>
    osDelay(period-execution_time);
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f004 f9a8 	bl	80062d0 <osDelay>
	sprintf((char*)Uart_TX_Buf,"%lu Warning IN \r\n", osKernelSysTick());
 8001f80:	bf00      	nop
 8001f82:	e7d7      	b.n	8001f34 <StartWarning+0x28>
 8001f84:	20000000 	.word	0x20000000
 8001f88:	0800a8f0 	.word	0x0800a8f0
 8001f8c:	200004d8 	.word	0x200004d8
 8001f90:	20000430 	.word	0x20000430
 8001f94:	0800a904 	.word	0x0800a904

08001f98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa8:	d101      	bne.n	8001fae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001faa:	f000 fad9 	bl	8002560 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fba:	b672      	cpsid	i
}
 8001fbc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fbe:	bf00      	nop
 8001fc0:	e7fd      	b.n	8001fbe <Error_Handler+0x8>
	...

08001fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fca:	4b18      	ldr	r3, [pc, #96]	@ (800202c <HAL_MspInit+0x68>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	4a17      	ldr	r2, [pc, #92]	@ (800202c <HAL_MspInit+0x68>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6193      	str	r3, [r2, #24]
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <HAL_MspInit+0x68>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b12      	ldr	r3, [pc, #72]	@ (800202c <HAL_MspInit+0x68>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a11      	ldr	r2, [pc, #68]	@ (800202c <HAL_MspInit+0x68>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <HAL_MspInit+0x68>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	210f      	movs	r1, #15
 8001ffe:	f06f 0001 	mvn.w	r0, #1
 8002002:	f000 fec8 	bl	8002d96 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002006:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <HAL_MspInit+0x6c>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	4a04      	ldr	r2, [pc, #16]	@ (8002030 <HAL_MspInit+0x6c>)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	40010000 	.word	0x40010000

08002034 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a14      	ldr	r2, [pc, #80]	@ (80020a0 <HAL_ADC_MspInit+0x6c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d121      	bne.n	8002098 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002054:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <HAL_ADC_MspInit+0x70>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4a12      	ldr	r2, [pc, #72]	@ (80020a4 <HAL_ADC_MspInit+0x70>)
 800205a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b10      	ldr	r3, [pc, #64]	@ (80020a4 <HAL_ADC_MspInit+0x70>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <HAL_ADC_MspInit+0x70>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a0c      	ldr	r2, [pc, #48]	@ (80020a4 <HAL_ADC_MspInit+0x70>)
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <HAL_ADC_MspInit+0x70>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002084:	2301      	movs	r3, #1
 8002086:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002088:	2303      	movs	r3, #3
 800208a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	4619      	mov	r1, r3
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <HAL_ADC_MspInit+0x74>)
 8002094:	f000 ff5c 	bl	8002f50 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002098:	bf00      	nop
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40012400 	.word	0x40012400
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010800 	.word	0x40010800

080020ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	@ 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0318 	add.w	r3, r7, #24
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a2b      	ldr	r2, [pc, #172]	@ (8002174 <HAL_I2C_MspInit+0xc8>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d124      	bne.n	8002116 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002178 <HAL_I2C_MspInit+0xcc>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a29      	ldr	r2, [pc, #164]	@ (8002178 <HAL_I2C_MspInit+0xcc>)
 80020d2:	f043 0308 	orr.w	r3, r3, #8
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b27      	ldr	r3, [pc, #156]	@ (8002178 <HAL_I2C_MspInit+0xcc>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020e4:	23c0      	movs	r3, #192	@ 0xc0
 80020e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e8:	2312      	movs	r3, #18
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ec:	2303      	movs	r3, #3
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	4619      	mov	r1, r3
 80020f6:	4821      	ldr	r0, [pc, #132]	@ (800217c <HAL_I2C_MspInit+0xd0>)
 80020f8:	f000 ff2a 	bl	8002f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <HAL_I2C_MspInit+0xcc>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	4a1d      	ldr	r2, [pc, #116]	@ (8002178 <HAL_I2C_MspInit+0xcc>)
 8002102:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002106:	61d3      	str	r3, [r2, #28]
 8002108:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <HAL_I2C_MspInit+0xcc>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002114:	e029      	b.n	800216a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a19      	ldr	r2, [pc, #100]	@ (8002180 <HAL_I2C_MspInit+0xd4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d124      	bne.n	800216a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002120:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <HAL_I2C_MspInit+0xcc>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	4a14      	ldr	r2, [pc, #80]	@ (8002178 <HAL_I2C_MspInit+0xcc>)
 8002126:	f043 0308 	orr.w	r3, r3, #8
 800212a:	6193      	str	r3, [r2, #24]
 800212c:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <HAL_I2C_MspInit+0xcc>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002138:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800213c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213e:	2312      	movs	r3, #18
 8002140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002146:	f107 0318 	add.w	r3, r7, #24
 800214a:	4619      	mov	r1, r3
 800214c:	480b      	ldr	r0, [pc, #44]	@ (800217c <HAL_I2C_MspInit+0xd0>)
 800214e:	f000 feff 	bl	8002f50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002152:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <HAL_I2C_MspInit+0xcc>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	4a08      	ldr	r2, [pc, #32]	@ (8002178 <HAL_I2C_MspInit+0xcc>)
 8002158:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800215c:	61d3      	str	r3, [r2, #28]
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_I2C_MspInit+0xcc>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
}
 800216a:	bf00      	nop
 800216c:	3728      	adds	r7, #40	@ 0x28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40005400 	.word	0x40005400
 8002178:	40021000 	.word	0x40021000
 800217c:	40010c00 	.word	0x40010c00
 8002180:	40005800 	.word	0x40005800

08002184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a20      	ldr	r2, [pc, #128]	@ (8002220 <HAL_UART_MspInit+0x9c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d139      	bne.n	8002218 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002224 <HAL_UART_MspInit+0xa0>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002224 <HAL_UART_MspInit+0xa0>)
 80021aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ae:	6193      	str	r3, [r2, #24]
 80021b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002224 <HAL_UART_MspInit+0xa0>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021bc:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <HAL_UART_MspInit+0xa0>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	4a18      	ldr	r2, [pc, #96]	@ (8002224 <HAL_UART_MspInit+0xa0>)
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	6193      	str	r3, [r2, #24]
 80021c8:	4b16      	ldr	r3, [pc, #88]	@ (8002224 <HAL_UART_MspInit+0xa0>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e2:	f107 0310 	add.w	r3, r7, #16
 80021e6:	4619      	mov	r1, r3
 80021e8:	480f      	ldr	r0, [pc, #60]	@ (8002228 <HAL_UART_MspInit+0xa4>)
 80021ea:	f000 feb1 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 0310 	add.w	r3, r7, #16
 8002200:	4619      	mov	r1, r3
 8002202:	4809      	ldr	r0, [pc, #36]	@ (8002228 <HAL_UART_MspInit+0xa4>)
 8002204:	f000 fea4 	bl	8002f50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2105      	movs	r1, #5
 800220c:	2025      	movs	r0, #37	@ 0x25
 800220e:	f000 fdc2 	bl	8002d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002212:	2025      	movs	r0, #37	@ 0x25
 8002214:	f000 fddb 	bl	8002dce <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40013800 	.word	0x40013800
 8002224:	40021000 	.word	0x40021000
 8002228:	40010800 	.word	0x40010800

0800222c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08e      	sub	sp, #56	@ 0x38
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002242:	4b34      	ldr	r3, [pc, #208]	@ (8002314 <HAL_InitTick+0xe8>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	4a33      	ldr	r2, [pc, #204]	@ (8002314 <HAL_InitTick+0xe8>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	61d3      	str	r3, [r2, #28]
 800224e:	4b31      	ldr	r3, [pc, #196]	@ (8002314 <HAL_InitTick+0xe8>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800225a:	f107 0210 	add.w	r2, r7, #16
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f002 fde7 	bl	8004e38 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800226e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d103      	bne.n	800227c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002274:	f002 fdb8 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 8002278:	6378      	str	r0, [r7, #52]	@ 0x34
 800227a:	e004      	b.n	8002286 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800227c:	f002 fdb4 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 8002280:	4603      	mov	r3, r0
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002288:	4a23      	ldr	r2, [pc, #140]	@ (8002318 <HAL_InitTick+0xec>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	0c9b      	lsrs	r3, r3, #18
 8002290:	3b01      	subs	r3, #1
 8002292:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002294:	4b21      	ldr	r3, [pc, #132]	@ (800231c <HAL_InitTick+0xf0>)
 8002296:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800229a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800229c:	4b1f      	ldr	r3, [pc, #124]	@ (800231c <HAL_InitTick+0xf0>)
 800229e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022a2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80022a4:	4a1d      	ldr	r2, [pc, #116]	@ (800231c <HAL_InitTick+0xf0>)
 80022a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80022aa:	4b1c      	ldr	r3, [pc, #112]	@ (800231c <HAL_InitTick+0xf0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b0:	4b1a      	ldr	r3, [pc, #104]	@ (800231c <HAL_InitTick+0xf0>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b6:	4b19      	ldr	r3, [pc, #100]	@ (800231c <HAL_InitTick+0xf0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80022bc:	4817      	ldr	r0, [pc, #92]	@ (800231c <HAL_InitTick+0xf0>)
 80022be:	f002 febf 	bl	8005040 <HAL_TIM_Base_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80022c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d11b      	bne.n	8002308 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80022d0:	4812      	ldr	r0, [pc, #72]	@ (800231c <HAL_InitTick+0xf0>)
 80022d2:	f002 ff0d 	bl	80050f0 <HAL_TIM_Base_Start_IT>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80022dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d111      	bne.n	8002308 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022e4:	201c      	movs	r0, #28
 80022e6:	f000 fd72 	bl	8002dce <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b0f      	cmp	r3, #15
 80022ee:	d808      	bhi.n	8002302 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80022f0:	2200      	movs	r2, #0
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	201c      	movs	r0, #28
 80022f6:	f000 fd4e 	bl	8002d96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022fa:	4a09      	ldr	r2, [pc, #36]	@ (8002320 <HAL_InitTick+0xf4>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	e002      	b.n	8002308 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002308:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800230c:	4618      	mov	r0, r3
 800230e:	3738      	adds	r7, #56	@ 0x38
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	431bde83 	.word	0x431bde83
 800231c:	20000504 	.word	0x20000504
 8002320:	2000007c 	.word	0x2000007c

08002324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002328:	bf00      	nop
 800232a:	e7fd      	b.n	8002328 <NMI_Handler+0x4>

0800232c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <HardFault_Handler+0x4>

08002334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <MemManage_Handler+0x4>

0800233c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <BusFault_Handler+0x4>

08002344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <UsageFault_Handler+0x4>

0800234c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800235c:	4802      	ldr	r0, [pc, #8]	@ (8002368 <TIM2_IRQHandler+0x10>)
 800235e:	f002 ff19 	bl	8005194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000504 	.word	0x20000504

0800236c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002370:	4802      	ldr	r0, [pc, #8]	@ (800237c <USART1_IRQHandler+0x10>)
 8002372:	f003 f9a3 	bl	80056bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000430 	.word	0x20000430

08002380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002388:	4a14      	ldr	r2, [pc, #80]	@ (80023dc <_sbrk+0x5c>)
 800238a:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <_sbrk+0x60>)
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002394:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <_sbrk+0x64>)
 800239e:	4a12      	ldr	r2, [pc, #72]	@ (80023e8 <_sbrk+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d207      	bcs.n	80023c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b0:	f006 fd66 	bl	8008e80 <__errno>
 80023b4:	4603      	mov	r3, r0
 80023b6:	220c      	movs	r2, #12
 80023b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	e009      	b.n	80023d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c0:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c6:	4b07      	ldr	r3, [pc, #28]	@ (80023e4 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a05      	ldr	r2, [pc, #20]	@ (80023e4 <_sbrk+0x64>)
 80023d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20005000 	.word	0x20005000
 80023e0:	00000400 	.word	0x00000400
 80023e4:	2000054c 	.word	0x2000054c
 80023e8:	20001ab0 	.word	0x20001ab0

080023ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <L1_Warning_On>:
 */

#include "warning.h"

void L1_Warning_On()
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002402:	4808      	ldr	r0, [pc, #32]	@ (8002424 <L1_Warning_On+0x2c>)
 8002404:	f000 ff28 	bl	8003258 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 8002408:	2201      	movs	r2, #1
 800240a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800240e:	4805      	ldr	r0, [pc, #20]	@ (8002424 <L1_Warning_On+0x2c>)
 8002410:	f000 ff22 	bl	8003258 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 8002414:	2201      	movs	r2, #1
 8002416:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800241a:	4802      	ldr	r0, [pc, #8]	@ (8002424 <L1_Warning_On+0x2c>)
 800241c:	f000 ff1c 	bl	8003258 <HAL_GPIO_WritePin>
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40010c00 	.word	0x40010c00

08002428 <L2_Warning_On>:

void L2_Warning_On ()
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 800242c:	2201      	movs	r2, #1
 800242e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002432:	4808      	ldr	r0, [pc, #32]	@ (8002454 <L2_Warning_On+0x2c>)
 8002434:	f000 ff10 	bl	8003258 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_RESET);
 8002438:	2200      	movs	r2, #0
 800243a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800243e:	4805      	ldr	r0, [pc, #20]	@ (8002454 <L2_Warning_On+0x2c>)
 8002440:	f000 ff0a 	bl	8003258 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 8002444:	2201      	movs	r2, #1
 8002446:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800244a:	4802      	ldr	r0, [pc, #8]	@ (8002454 <L2_Warning_On+0x2c>)
 800244c:	f000 ff04 	bl	8003258 <HAL_GPIO_WritePin>
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40010c00 	.word	0x40010c00

08002458 <L3_Warning_On>:

void L3_Warning_On ()
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 800245c:	2201      	movs	r2, #1
 800245e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002462:	4808      	ldr	r0, [pc, #32]	@ (8002484 <L3_Warning_On+0x2c>)
 8002464:	f000 fef8 	bl	8003258 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 8002468:	2201      	movs	r2, #1
 800246a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800246e:	4805      	ldr	r0, [pc, #20]	@ (8002484 <L3_Warning_On+0x2c>)
 8002470:	f000 fef2 	bl	8003258 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_RESET);
 8002474:	2200      	movs	r2, #0
 8002476:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800247a:	4802      	ldr	r0, [pc, #8]	@ (8002484 <L3_Warning_On+0x2c>)
 800247c:	f000 feec 	bl	8003258 <HAL_GPIO_WritePin>
}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40010c00 	.word	0x40010c00

08002488 <Warning>:



void Warning ()
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
	  // khi không ấn nút( cảnh báo tự đông)
	  if(CO2_ppm<=1000 && CO_ppm <= 25 && Tvoc_ppb <=300)
 800248c:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <Warning+0x54>)
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002494:	d80b      	bhi.n	80024ae <Warning+0x26>
 8002496:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <Warning+0x58>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	2b19      	cmp	r3, #25
 800249c:	d807      	bhi.n	80024ae <Warning+0x26>
 800249e:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <Warning+0x5c>)
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80024a6:	d802      	bhi.n	80024ae <Warning+0x26>
	  {
		  L1_Warning_On();
 80024a8:	f7ff ffa6 	bl	80023f8 <L1_Warning_On>
 80024ac:	e013      	b.n	80024d6 <Warning+0x4e>
	  }
	  else if((CO2_ppm>=2000) || (CO_ppm>=50) || (Tvoc_ppb>=1000))
 80024ae:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <Warning+0x54>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80024b6:	d208      	bcs.n	80024ca <Warning+0x42>
 80024b8:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <Warning+0x58>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	2b31      	cmp	r3, #49	@ 0x31
 80024be:	d804      	bhi.n	80024ca <Warning+0x42>
 80024c0:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <Warning+0x5c>)
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024c8:	d302      	bcc.n	80024d0 <Warning+0x48>
	  {
		  L3_Warning_On();
 80024ca:	f7ff ffc5 	bl	8002458 <L3_Warning_On>
 80024ce:	e002      	b.n	80024d6 <Warning+0x4e>
	  }
	  else
	  {
		  L2_Warning_On();
 80024d0:	f7ff ffaa 	bl	8002428 <L2_Warning_On>
	  }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200004be 	.word	0x200004be
 80024e0:	200004c4 	.word	0x200004c4
 80024e4:	200004b6 	.word	0x200004b6

080024e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024e8:	f7ff ff80 	bl	80023ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024ec:	480b      	ldr	r0, [pc, #44]	@ (800251c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024ee:	490c      	ldr	r1, [pc, #48]	@ (8002520 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002524 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f4:	e002      	b.n	80024fc <LoopCopyDataInit>

080024f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fa:	3304      	adds	r3, #4

080024fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002500:	d3f9      	bcc.n	80024f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002502:	4a09      	ldr	r2, [pc, #36]	@ (8002528 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002504:	4c09      	ldr	r4, [pc, #36]	@ (800252c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002508:	e001      	b.n	800250e <LoopFillZerobss>

0800250a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800250c:	3204      	adds	r2, #4

0800250e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002510:	d3fb      	bcc.n	800250a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002512:	f006 fcbb 	bl	8008e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002516:	f7fe ff61 	bl	80013dc <main>
  bx lr
 800251a:	4770      	bx	lr
  ldr r0, =_sdata
 800251c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002520:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8002524:	0800a9c0 	.word	0x0800a9c0
  ldr r2, =_sbss
 8002528:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 800252c:	20001ab0 	.word	0x20001ab0

08002530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002530:	e7fe      	b.n	8002530 <ADC1_2_IRQHandler>
	...

08002534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002538:	4b08      	ldr	r3, [pc, #32]	@ (800255c <HAL_Init+0x28>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a07      	ldr	r2, [pc, #28]	@ (800255c <HAL_Init+0x28>)
 800253e:	f043 0310 	orr.w	r3, r3, #16
 8002542:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002544:	2003      	movs	r0, #3
 8002546:	f000 fc1b 	bl	8002d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800254a:	200f      	movs	r0, #15
 800254c:	f7ff fe6e 	bl	800222c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002550:	f7ff fd38 	bl	8001fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40022000 	.word	0x40022000

08002560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002564:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_IncTick+0x1c>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <HAL_IncTick+0x20>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4413      	add	r3, r2
 8002570:	4a03      	ldr	r2, [pc, #12]	@ (8002580 <HAL_IncTick+0x20>)
 8002572:	6013      	str	r3, [r2, #0]
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	20000080 	.word	0x20000080
 8002580:	20000550 	.word	0x20000550

08002584 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return uwTick;
 8002588:	4b02      	ldr	r3, [pc, #8]	@ (8002594 <HAL_GetTick+0x10>)
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	20000550 	.word	0x20000550

08002598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a0:	f7ff fff0 	bl	8002584 <HAL_GetTick>
 80025a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d005      	beq.n	80025be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025b2:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <HAL_Delay+0x44>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4413      	add	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025be:	bf00      	nop
 80025c0:	f7ff ffe0 	bl	8002584 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d8f7      	bhi.n	80025c0 <HAL_Delay+0x28>
  {
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000080 	.word	0x20000080

080025e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0be      	b.n	8002780 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff fd08 	bl	8002034 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fabf 	bl	8002ba8 <ADC_ConversionStop_Disable>
 800262a:	4603      	mov	r3, r0
 800262c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 8099 	bne.w	800276e <HAL_ADC_Init+0x18e>
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 8095 	bne.w	800276e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002648:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800264c:	f023 0302 	bic.w	r3, r3, #2
 8002650:	f043 0202 	orr.w	r2, r3, #2
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002660:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7b1b      	ldrb	r3, [r3, #12]
 8002666:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002668:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	4313      	orrs	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002678:	d003      	beq.n	8002682 <HAL_ADC_Init+0xa2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d102      	bne.n	8002688 <HAL_ADC_Init+0xa8>
 8002682:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002686:	e000      	b.n	800268a <HAL_ADC_Init+0xaa>
 8002688:	2300      	movs	r3, #0
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7d1b      	ldrb	r3, [r3, #20]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d119      	bne.n	80026cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	7b1b      	ldrb	r3, [r3, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d109      	bne.n	80026b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	035a      	lsls	r2, r3, #13
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	e00b      	b.n	80026cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b8:	f043 0220 	orr.w	r2, r3, #32
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c4:	f043 0201 	orr.w	r2, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	430a      	orrs	r2, r1
 80026de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	4b28      	ldr	r3, [pc, #160]	@ (8002788 <HAL_ADC_Init+0x1a8>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	430b      	orrs	r3, r1
 80026f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026fc:	d003      	beq.n	8002706 <HAL_ADC_Init+0x126>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d104      	bne.n	8002710 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	3b01      	subs	r3, #1
 800270c:	051b      	lsls	r3, r3, #20
 800270e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002716:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	430a      	orrs	r2, r1
 8002722:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	4b18      	ldr	r3, [pc, #96]	@ (800278c <HAL_ADC_Init+0x1ac>)
 800272c:	4013      	ands	r3, r2
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	429a      	cmp	r2, r3
 8002732:	d10b      	bne.n	800274c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273e:	f023 0303 	bic.w	r3, r3, #3
 8002742:	f043 0201 	orr.w	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800274a:	e018      	b.n	800277e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	f023 0312 	bic.w	r3, r3, #18
 8002754:	f043 0210 	orr.w	r2, r3, #16
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800276c:	e007      	b.n	800277e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002772:	f043 0210 	orr.w	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800277e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	ffe1f7fd 	.word	0xffe1f7fd
 800278c:	ff1f0efe 	.word	0xff1f0efe

08002790 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_Start+0x1a>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e098      	b.n	80028dc <HAL_ADC_Start+0x14c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f99e 	bl	8002af4 <ADC_Enable>
 80027b8:	4603      	mov	r3, r0
 80027ba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 8087 	bne.w	80028d2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a41      	ldr	r2, [pc, #260]	@ (80028e4 <HAL_ADC_Start+0x154>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d105      	bne.n	80027ee <HAL_ADC_Start+0x5e>
 80027e2:	4b41      	ldr	r3, [pc, #260]	@ (80028e8 <HAL_ADC_Start+0x158>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d115      	bne.n	800281a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002804:	2b00      	cmp	r3, #0
 8002806:	d026      	beq.n	8002856 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002810:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002818:	e01d      	b.n	8002856 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a2f      	ldr	r2, [pc, #188]	@ (80028e8 <HAL_ADC_Start+0x158>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d004      	beq.n	800283a <HAL_ADC_Start+0xaa>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a2b      	ldr	r2, [pc, #172]	@ (80028e4 <HAL_ADC_Start+0x154>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10d      	bne.n	8002856 <HAL_ADC_Start+0xc6>
 800283a:	4b2b      	ldr	r3, [pc, #172]	@ (80028e8 <HAL_ADC_Start+0x158>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800284e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d006      	beq.n	8002870 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002866:	f023 0206 	bic.w	r2, r3, #6
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800286e:	e002      	b.n	8002876 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f06f 0202 	mvn.w	r2, #2
 8002886:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002892:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002896:	d113      	bne.n	80028c0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800289c:	4a11      	ldr	r2, [pc, #68]	@ (80028e4 <HAL_ADC_Start+0x154>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d105      	bne.n	80028ae <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80028a2:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <HAL_ADC_Start+0x158>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d108      	bne.n	80028c0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	e00c      	b.n	80028da <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	e003      	b.n	80028da <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40012800 	.word	0x40012800
 80028e8:	40012400 	.word	0x40012400

080028ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x20>
 8002920:	2302      	movs	r3, #2
 8002922:	e0dc      	b.n	8002ade <HAL_ADC_ConfigChannel+0x1da>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d81c      	bhi.n	800296e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	3b05      	subs	r3, #5
 8002946:	221f      	movs	r2, #31
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	4019      	ands	r1, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	3b05      	subs	r3, #5
 8002960:	fa00 f203 	lsl.w	r2, r0, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	635a      	str	r2, [r3, #52]	@ 0x34
 800296c:	e03c      	b.n	80029e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b0c      	cmp	r3, #12
 8002974:	d81c      	bhi.n	80029b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	3b23      	subs	r3, #35	@ 0x23
 8002988:	221f      	movs	r2, #31
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	4019      	ands	r1, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	3b23      	subs	r3, #35	@ 0x23
 80029a2:	fa00 f203 	lsl.w	r2, r0, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80029ae:	e01b      	b.n	80029e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	3b41      	subs	r3, #65	@ 0x41
 80029c2:	221f      	movs	r2, #31
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	4019      	ands	r1, r3
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	3b41      	subs	r3, #65	@ 0x41
 80029dc:	fa00 f203 	lsl.w	r2, r0, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	d91c      	bls.n	8002a2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68d9      	ldr	r1, [r3, #12]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	3b1e      	subs	r3, #30
 8002a02:	2207      	movs	r2, #7
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	4019      	ands	r1, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6898      	ldr	r0, [r3, #8]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	3b1e      	subs	r3, #30
 8002a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	60da      	str	r2, [r3, #12]
 8002a28:	e019      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6919      	ldr	r1, [r3, #16]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	4019      	ands	r1, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6898      	ldr	r0, [r3, #8]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	fa00 f203 	lsl.w	r2, r0, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d003      	beq.n	8002a6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a6a:	2b11      	cmp	r3, #17
 8002a6c:	d132      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d125      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d126      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002a94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b10      	cmp	r3, #16
 8002a9c:	d11a      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a9e:	4b13      	ldr	r3, [pc, #76]	@ (8002aec <HAL_ADC_ConfigChannel+0x1e8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a13      	ldr	r2, [pc, #76]	@ (8002af0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	0c9a      	lsrs	r2, r3, #18
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ab4:	e002      	b.n	8002abc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f9      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x1b2>
 8002ac2:	e007      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	40012400 	.word	0x40012400
 8002aec:	20000078 	.word	0x20000078
 8002af0:	431bde83 	.word	0x431bde83

08002af4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d040      	beq.n	8002b94 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b22:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba0 <ADC_Enable+0xac>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba4 <ADC_Enable+0xb0>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	0c9b      	lsrs	r3, r3, #18
 8002b2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b30:	e002      	b.n	8002b38 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f9      	bne.n	8002b32 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b3e:	f7ff fd21 	bl	8002584 <HAL_GetTick>
 8002b42:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b44:	e01f      	b.n	8002b86 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b46:	f7ff fd1d 	bl	8002584 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d918      	bls.n	8002b86 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d011      	beq.n	8002b86 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b66:	f043 0210 	orr.w	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e007      	b.n	8002b96 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d1d8      	bne.n	8002b46 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000078 	.word	0x20000078
 8002ba4:	431bde83 	.word	0x431bde83

08002ba8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d12e      	bne.n	8002c20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bd2:	f7ff fcd7 	bl	8002584 <HAL_GetTick>
 8002bd6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bd8:	e01b      	b.n	8002c12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bda:	f7ff fcd3 	bl	8002584 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d914      	bls.n	8002c12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d10d      	bne.n	8002c12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfa:	f043 0210 	orr.w	r2, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c06:	f043 0201 	orr.w	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e007      	b.n	8002c22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d0dc      	beq.n	8002bda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5e:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	60d3      	str	r3, [r2, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4906      	ldr	r1, [pc, #24]	@ (8002cc4 <__NVIC_EnableIRQ+0x34>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	e000e100 	.word	0xe000e100

08002cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	6039      	str	r1, [r7, #0]
 8002cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	db0a      	blt.n	8002cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	490c      	ldr	r1, [pc, #48]	@ (8002d14 <__NVIC_SetPriority+0x4c>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	0112      	lsls	r2, r2, #4
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	440b      	add	r3, r1
 8002cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf0:	e00a      	b.n	8002d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4908      	ldr	r1, [pc, #32]	@ (8002d18 <__NVIC_SetPriority+0x50>)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	3b04      	subs	r3, #4
 8002d00:	0112      	lsls	r2, r2, #4
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	440b      	add	r3, r1
 8002d06:	761a      	strb	r2, [r3, #24]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000e100 	.word	0xe000e100
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	@ 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f1c3 0307 	rsb	r3, r3, #7
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	bf28      	it	cs
 8002d3a:	2304      	movcs	r3, #4
 8002d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3304      	adds	r3, #4
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d902      	bls.n	8002d4c <NVIC_EncodePriority+0x30>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3b03      	subs	r3, #3
 8002d4a:	e000      	b.n	8002d4e <NVIC_EncodePriority+0x32>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	401a      	ands	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43d9      	mvns	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	4313      	orrs	r3, r2
         );
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3724      	adds	r7, #36	@ 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff ff4f 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b086      	sub	sp, #24
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002da8:	f7ff ff64 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	6978      	ldr	r0, [r7, #20]
 8002db4:	f7ff ffb2 	bl	8002d1c <NVIC_EncodePriority>
 8002db8:	4602      	mov	r2, r0
 8002dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff81 	bl	8002cc8 <__NVIC_SetPriority>
}
 8002dc6:	bf00      	nop
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff57 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b085      	sub	sp, #20
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d008      	beq.n	8002e14 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2204      	movs	r2, #4
 8002e06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e020      	b.n	8002e56 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 020e 	bic.w	r2, r2, #14
 8002e22:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e42:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d005      	beq.n	8002e84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
 8002e82:	e051      	b.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 020e 	bic.w	r2, r2, #14
 8002e92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a22      	ldr	r2, [pc, #136]	@ (8002f34 <HAL_DMA_Abort_IT+0xd4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d029      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xa2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a21      	ldr	r2, [pc, #132]	@ (8002f38 <HAL_DMA_Abort_IT+0xd8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d022      	beq.n	8002efe <HAL_DMA_Abort_IT+0x9e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8002f3c <HAL_DMA_Abort_IT+0xdc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d01a      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x98>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f40 <HAL_DMA_Abort_IT+0xe0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d012      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x92>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f44 <HAL_DMA_Abort_IT+0xe4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00a      	beq.n	8002eec <HAL_DMA_Abort_IT+0x8c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1b      	ldr	r2, [pc, #108]	@ (8002f48 <HAL_DMA_Abort_IT+0xe8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d102      	bne.n	8002ee6 <HAL_DMA_Abort_IT+0x86>
 8002ee0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ee4:	e00e      	b.n	8002f04 <HAL_DMA_Abort_IT+0xa4>
 8002ee6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002eea:	e00b      	b.n	8002f04 <HAL_DMA_Abort_IT+0xa4>
 8002eec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ef0:	e008      	b.n	8002f04 <HAL_DMA_Abort_IT+0xa4>
 8002ef2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ef6:	e005      	b.n	8002f04 <HAL_DMA_Abort_IT+0xa4>
 8002ef8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002efc:	e002      	b.n	8002f04 <HAL_DMA_Abort_IT+0xa4>
 8002efe:	2310      	movs	r3, #16
 8002f00:	e000      	b.n	8002f04 <HAL_DMA_Abort_IT+0xa4>
 8002f02:	2301      	movs	r3, #1
 8002f04:	4a11      	ldr	r2, [pc, #68]	@ (8002f4c <HAL_DMA_Abort_IT+0xec>)
 8002f06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4798      	blx	r3
    } 
  }
  return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40020008 	.word	0x40020008
 8002f38:	4002001c 	.word	0x4002001c
 8002f3c:	40020030 	.word	0x40020030
 8002f40:	40020044 	.word	0x40020044
 8002f44:	40020058 	.word	0x40020058
 8002f48:	4002006c 	.word	0x4002006c
 8002f4c:	40020000 	.word	0x40020000

08002f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b08b      	sub	sp, #44	@ 0x2c
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f62:	e169      	b.n	8003238 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f64:	2201      	movs	r2, #1
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	f040 8158 	bne.w	8003232 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4a9a      	ldr	r2, [pc, #616]	@ (80031f0 <HAL_GPIO_Init+0x2a0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d05e      	beq.n	800304a <HAL_GPIO_Init+0xfa>
 8002f8c:	4a98      	ldr	r2, [pc, #608]	@ (80031f0 <HAL_GPIO_Init+0x2a0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d875      	bhi.n	800307e <HAL_GPIO_Init+0x12e>
 8002f92:	4a98      	ldr	r2, [pc, #608]	@ (80031f4 <HAL_GPIO_Init+0x2a4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d058      	beq.n	800304a <HAL_GPIO_Init+0xfa>
 8002f98:	4a96      	ldr	r2, [pc, #600]	@ (80031f4 <HAL_GPIO_Init+0x2a4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d86f      	bhi.n	800307e <HAL_GPIO_Init+0x12e>
 8002f9e:	4a96      	ldr	r2, [pc, #600]	@ (80031f8 <HAL_GPIO_Init+0x2a8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d052      	beq.n	800304a <HAL_GPIO_Init+0xfa>
 8002fa4:	4a94      	ldr	r2, [pc, #592]	@ (80031f8 <HAL_GPIO_Init+0x2a8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d869      	bhi.n	800307e <HAL_GPIO_Init+0x12e>
 8002faa:	4a94      	ldr	r2, [pc, #592]	@ (80031fc <HAL_GPIO_Init+0x2ac>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d04c      	beq.n	800304a <HAL_GPIO_Init+0xfa>
 8002fb0:	4a92      	ldr	r2, [pc, #584]	@ (80031fc <HAL_GPIO_Init+0x2ac>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d863      	bhi.n	800307e <HAL_GPIO_Init+0x12e>
 8002fb6:	4a92      	ldr	r2, [pc, #584]	@ (8003200 <HAL_GPIO_Init+0x2b0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d046      	beq.n	800304a <HAL_GPIO_Init+0xfa>
 8002fbc:	4a90      	ldr	r2, [pc, #576]	@ (8003200 <HAL_GPIO_Init+0x2b0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d85d      	bhi.n	800307e <HAL_GPIO_Init+0x12e>
 8002fc2:	2b12      	cmp	r3, #18
 8002fc4:	d82a      	bhi.n	800301c <HAL_GPIO_Init+0xcc>
 8002fc6:	2b12      	cmp	r3, #18
 8002fc8:	d859      	bhi.n	800307e <HAL_GPIO_Init+0x12e>
 8002fca:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd0 <HAL_GPIO_Init+0x80>)
 8002fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd0:	0800304b 	.word	0x0800304b
 8002fd4:	08003025 	.word	0x08003025
 8002fd8:	08003037 	.word	0x08003037
 8002fdc:	08003079 	.word	0x08003079
 8002fe0:	0800307f 	.word	0x0800307f
 8002fe4:	0800307f 	.word	0x0800307f
 8002fe8:	0800307f 	.word	0x0800307f
 8002fec:	0800307f 	.word	0x0800307f
 8002ff0:	0800307f 	.word	0x0800307f
 8002ff4:	0800307f 	.word	0x0800307f
 8002ff8:	0800307f 	.word	0x0800307f
 8002ffc:	0800307f 	.word	0x0800307f
 8003000:	0800307f 	.word	0x0800307f
 8003004:	0800307f 	.word	0x0800307f
 8003008:	0800307f 	.word	0x0800307f
 800300c:	0800307f 	.word	0x0800307f
 8003010:	0800307f 	.word	0x0800307f
 8003014:	0800302d 	.word	0x0800302d
 8003018:	08003041 	.word	0x08003041
 800301c:	4a79      	ldr	r2, [pc, #484]	@ (8003204 <HAL_GPIO_Init+0x2b4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003022:	e02c      	b.n	800307e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	623b      	str	r3, [r7, #32]
          break;
 800302a:	e029      	b.n	8003080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	3304      	adds	r3, #4
 8003032:	623b      	str	r3, [r7, #32]
          break;
 8003034:	e024      	b.n	8003080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	3308      	adds	r3, #8
 800303c:	623b      	str	r3, [r7, #32]
          break;
 800303e:	e01f      	b.n	8003080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	330c      	adds	r3, #12
 8003046:	623b      	str	r3, [r7, #32]
          break;
 8003048:	e01a      	b.n	8003080 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003052:	2304      	movs	r3, #4
 8003054:	623b      	str	r3, [r7, #32]
          break;
 8003056:	e013      	b.n	8003080 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d105      	bne.n	800306c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003060:	2308      	movs	r3, #8
 8003062:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	611a      	str	r2, [r3, #16]
          break;
 800306a:	e009      	b.n	8003080 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800306c:	2308      	movs	r3, #8
 800306e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	615a      	str	r2, [r3, #20]
          break;
 8003076:	e003      	b.n	8003080 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003078:	2300      	movs	r3, #0
 800307a:	623b      	str	r3, [r7, #32]
          break;
 800307c:	e000      	b.n	8003080 <HAL_GPIO_Init+0x130>
          break;
 800307e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2bff      	cmp	r3, #255	@ 0xff
 8003084:	d801      	bhi.n	800308a <HAL_GPIO_Init+0x13a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	e001      	b.n	800308e <HAL_GPIO_Init+0x13e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3304      	adds	r3, #4
 800308e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2bff      	cmp	r3, #255	@ 0xff
 8003094:	d802      	bhi.n	800309c <HAL_GPIO_Init+0x14c>
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	e002      	b.n	80030a2 <HAL_GPIO_Init+0x152>
 800309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309e:	3b08      	subs	r3, #8
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	210f      	movs	r1, #15
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	fa01 f303 	lsl.w	r3, r1, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	401a      	ands	r2, r3
 80030b4:	6a39      	ldr	r1, [r7, #32]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	fa01 f303 	lsl.w	r3, r1, r3
 80030bc:	431a      	orrs	r2, r3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80b1 	beq.w	8003232 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030d0:	4b4d      	ldr	r3, [pc, #308]	@ (8003208 <HAL_GPIO_Init+0x2b8>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4a4c      	ldr	r2, [pc, #304]	@ (8003208 <HAL_GPIO_Init+0x2b8>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6193      	str	r3, [r2, #24]
 80030dc:	4b4a      	ldr	r3, [pc, #296]	@ (8003208 <HAL_GPIO_Init+0x2b8>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030e8:	4a48      	ldr	r2, [pc, #288]	@ (800320c <HAL_GPIO_Init+0x2bc>)
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	089b      	lsrs	r3, r3, #2
 80030ee:	3302      	adds	r3, #2
 80030f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	220f      	movs	r2, #15
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a40      	ldr	r2, [pc, #256]	@ (8003210 <HAL_GPIO_Init+0x2c0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d013      	beq.n	800313c <HAL_GPIO_Init+0x1ec>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a3f      	ldr	r2, [pc, #252]	@ (8003214 <HAL_GPIO_Init+0x2c4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00d      	beq.n	8003138 <HAL_GPIO_Init+0x1e8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a3e      	ldr	r2, [pc, #248]	@ (8003218 <HAL_GPIO_Init+0x2c8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d007      	beq.n	8003134 <HAL_GPIO_Init+0x1e4>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a3d      	ldr	r2, [pc, #244]	@ (800321c <HAL_GPIO_Init+0x2cc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d101      	bne.n	8003130 <HAL_GPIO_Init+0x1e0>
 800312c:	2303      	movs	r3, #3
 800312e:	e006      	b.n	800313e <HAL_GPIO_Init+0x1ee>
 8003130:	2304      	movs	r3, #4
 8003132:	e004      	b.n	800313e <HAL_GPIO_Init+0x1ee>
 8003134:	2302      	movs	r3, #2
 8003136:	e002      	b.n	800313e <HAL_GPIO_Init+0x1ee>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <HAL_GPIO_Init+0x1ee>
 800313c:	2300      	movs	r3, #0
 800313e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003140:	f002 0203 	and.w	r2, r2, #3
 8003144:	0092      	lsls	r2, r2, #2
 8003146:	4093      	lsls	r3, r2
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800314e:	492f      	ldr	r1, [pc, #188]	@ (800320c <HAL_GPIO_Init+0x2bc>)
 8003150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	3302      	adds	r3, #2
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d006      	beq.n	8003176 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003168:	4b2d      	ldr	r3, [pc, #180]	@ (8003220 <HAL_GPIO_Init+0x2d0>)
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	492c      	ldr	r1, [pc, #176]	@ (8003220 <HAL_GPIO_Init+0x2d0>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]
 8003174:	e006      	b.n	8003184 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003176:	4b2a      	ldr	r3, [pc, #168]	@ (8003220 <HAL_GPIO_Init+0x2d0>)
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	43db      	mvns	r3, r3
 800317e:	4928      	ldr	r1, [pc, #160]	@ (8003220 <HAL_GPIO_Init+0x2d0>)
 8003180:	4013      	ands	r3, r2
 8003182:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003190:	4b23      	ldr	r3, [pc, #140]	@ (8003220 <HAL_GPIO_Init+0x2d0>)
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	4922      	ldr	r1, [pc, #136]	@ (8003220 <HAL_GPIO_Init+0x2d0>)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	60cb      	str	r3, [r1, #12]
 800319c:	e006      	b.n	80031ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800319e:	4b20      	ldr	r3, [pc, #128]	@ (8003220 <HAL_GPIO_Init+0x2d0>)
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	491e      	ldr	r1, [pc, #120]	@ (8003220 <HAL_GPIO_Init+0x2d0>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d006      	beq.n	80031c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031b8:	4b19      	ldr	r3, [pc, #100]	@ (8003220 <HAL_GPIO_Init+0x2d0>)
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	4918      	ldr	r1, [pc, #96]	@ (8003220 <HAL_GPIO_Init+0x2d0>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
 80031c4:	e006      	b.n	80031d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031c6:	4b16      	ldr	r3, [pc, #88]	@ (8003220 <HAL_GPIO_Init+0x2d0>)
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	4914      	ldr	r1, [pc, #80]	@ (8003220 <HAL_GPIO_Init+0x2d0>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d021      	beq.n	8003224 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003220 <HAL_GPIO_Init+0x2d0>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	490e      	ldr	r1, [pc, #56]	@ (8003220 <HAL_GPIO_Init+0x2d0>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	600b      	str	r3, [r1, #0]
 80031ec:	e021      	b.n	8003232 <HAL_GPIO_Init+0x2e2>
 80031ee:	bf00      	nop
 80031f0:	10320000 	.word	0x10320000
 80031f4:	10310000 	.word	0x10310000
 80031f8:	10220000 	.word	0x10220000
 80031fc:	10210000 	.word	0x10210000
 8003200:	10120000 	.word	0x10120000
 8003204:	10110000 	.word	0x10110000
 8003208:	40021000 	.word	0x40021000
 800320c:	40010000 	.word	0x40010000
 8003210:	40010800 	.word	0x40010800
 8003214:	40010c00 	.word	0x40010c00
 8003218:	40011000 	.word	0x40011000
 800321c:	40011400 	.word	0x40011400
 8003220:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003224:	4b0b      	ldr	r3, [pc, #44]	@ (8003254 <HAL_GPIO_Init+0x304>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	43db      	mvns	r3, r3
 800322c:	4909      	ldr	r1, [pc, #36]	@ (8003254 <HAL_GPIO_Init+0x304>)
 800322e:	4013      	ands	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	3301      	adds	r3, #1
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	f47f ae8e 	bne.w	8002f64 <HAL_GPIO_Init+0x14>
  }
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	372c      	adds	r7, #44	@ 0x2c
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	40010400 	.word	0x40010400

08003258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
 8003264:	4613      	mov	r3, r2
 8003266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003268:	787b      	ldrb	r3, [r7, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003274:	e003      	b.n	800327e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	041a      	lsls	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	611a      	str	r2, [r3, #16]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e12b      	b.n	80034f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fe fefc 	bl	80020ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2224      	movs	r2, #36	@ 0x24
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032ec:	f001 fd7c 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 80032f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4a81      	ldr	r2, [pc, #516]	@ (80034fc <HAL_I2C_Init+0x274>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d807      	bhi.n	800330c <HAL_I2C_Init+0x84>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a80      	ldr	r2, [pc, #512]	@ (8003500 <HAL_I2C_Init+0x278>)
 8003300:	4293      	cmp	r3, r2
 8003302:	bf94      	ite	ls
 8003304:	2301      	movls	r3, #1
 8003306:	2300      	movhi	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e006      	b.n	800331a <HAL_I2C_Init+0x92>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4a7d      	ldr	r2, [pc, #500]	@ (8003504 <HAL_I2C_Init+0x27c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	bf94      	ite	ls
 8003314:	2301      	movls	r3, #1
 8003316:	2300      	movhi	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e0e7      	b.n	80034f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4a78      	ldr	r2, [pc, #480]	@ (8003508 <HAL_I2C_Init+0x280>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	0c9b      	lsrs	r3, r3, #18
 800332c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4a6a      	ldr	r2, [pc, #424]	@ (80034fc <HAL_I2C_Init+0x274>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d802      	bhi.n	800335c <HAL_I2C_Init+0xd4>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	3301      	adds	r3, #1
 800335a:	e009      	b.n	8003370 <HAL_I2C_Init+0xe8>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	4a69      	ldr	r2, [pc, #420]	@ (800350c <HAL_I2C_Init+0x284>)
 8003368:	fba2 2303 	umull	r2, r3, r2, r3
 800336c:	099b      	lsrs	r3, r3, #6
 800336e:	3301      	adds	r3, #1
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	430b      	orrs	r3, r1
 8003376:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003382:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	495c      	ldr	r1, [pc, #368]	@ (80034fc <HAL_I2C_Init+0x274>)
 800338c:	428b      	cmp	r3, r1
 800338e:	d819      	bhi.n	80033c4 <HAL_I2C_Init+0x13c>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1e59      	subs	r1, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	fbb1 f3f3 	udiv	r3, r1, r3
 800339e:	1c59      	adds	r1, r3, #1
 80033a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033a4:	400b      	ands	r3, r1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <HAL_I2C_Init+0x138>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1e59      	subs	r1, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b8:	3301      	adds	r3, #1
 80033ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033be:	e051      	b.n	8003464 <HAL_I2C_Init+0x1dc>
 80033c0:	2304      	movs	r3, #4
 80033c2:	e04f      	b.n	8003464 <HAL_I2C_Init+0x1dc>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d111      	bne.n	80033f0 <HAL_I2C_Init+0x168>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1e58      	subs	r0, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	440b      	add	r3, r1
 80033da:	fbb0 f3f3 	udiv	r3, r0, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	e012      	b.n	8003416 <HAL_I2C_Init+0x18e>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1e58      	subs	r0, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	0099      	lsls	r1, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	fbb0 f3f3 	udiv	r3, r0, r3
 8003406:	3301      	adds	r3, #1
 8003408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_Init+0x196>
 800341a:	2301      	movs	r3, #1
 800341c:	e022      	b.n	8003464 <HAL_I2C_Init+0x1dc>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10e      	bne.n	8003444 <HAL_I2C_Init+0x1bc>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1e58      	subs	r0, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	440b      	add	r3, r1
 8003434:	fbb0 f3f3 	udiv	r3, r0, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003442:	e00f      	b.n	8003464 <HAL_I2C_Init+0x1dc>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1e58      	subs	r0, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	0099      	lsls	r1, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	fbb0 f3f3 	udiv	r3, r0, r3
 800345a:	3301      	adds	r3, #1
 800345c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003460:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	6809      	ldr	r1, [r1, #0]
 8003468:	4313      	orrs	r3, r2
 800346a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003492:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6911      	ldr	r1, [r2, #16]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68d2      	ldr	r2, [r2, #12]
 800349e:	4311      	orrs	r1, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	000186a0 	.word	0x000186a0
 8003500:	001e847f 	.word	0x001e847f
 8003504:	003d08ff 	.word	0x003d08ff
 8003508:	431bde83 	.word	0x431bde83
 800350c:	10624dd3 	.word	0x10624dd3

08003510 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	461a      	mov	r2, r3
 800351c:	460b      	mov	r3, r1
 800351e:	817b      	strh	r3, [r7, #10]
 8003520:	4613      	mov	r3, r2
 8003522:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003524:	f7ff f82e 	bl	8002584 <HAL_GetTick>
 8003528:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b20      	cmp	r3, #32
 8003534:	f040 80e0 	bne.w	80036f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	2319      	movs	r3, #25
 800353e:	2201      	movs	r2, #1
 8003540:	4970      	ldr	r1, [pc, #448]	@ (8003704 <HAL_I2C_Master_Transmit+0x1f4>)
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fe50 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800354e:	2302      	movs	r3, #2
 8003550:	e0d3      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_I2C_Master_Transmit+0x50>
 800355c:	2302      	movs	r3, #2
 800355e:	e0cc      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1ea>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d007      	beq.n	8003586 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003594:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2221      	movs	r2, #33	@ 0x21
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2210      	movs	r2, #16
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	893a      	ldrh	r2, [r7, #8]
 80035b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4a50      	ldr	r2, [pc, #320]	@ (8003708 <HAL_I2C_Master_Transmit+0x1f8>)
 80035c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035c8:	8979      	ldrh	r1, [r7, #10]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	6a3a      	ldr	r2, [r7, #32]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fc0a 	bl	8003de8 <I2C_MasterRequestWrite>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e08d      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035f4:	e066      	b.n	80036c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	6a39      	ldr	r1, [r7, #32]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 ff0e 	bl	800441c <I2C_WaitOnTXEFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00d      	beq.n	8003622 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	2b04      	cmp	r3, #4
 800360c:	d107      	bne.n	800361e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800361c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e06b      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	781a      	ldrb	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b04      	cmp	r3, #4
 800365e:	d11b      	bne.n	8003698 <HAL_I2C_Master_Transmit+0x188>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	d017      	beq.n	8003698 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	6a39      	ldr	r1, [r7, #32]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 ff05 	bl	80044ac <I2C_WaitOnBTFFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00d      	beq.n	80036c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d107      	bne.n	80036c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e01a      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d194      	bne.n	80035f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	00100002 	.word	0x00100002
 8003708:	ffff0000 	.word	0xffff0000

0800370c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	4608      	mov	r0, r1
 8003716:	4611      	mov	r1, r2
 8003718:	461a      	mov	r2, r3
 800371a:	4603      	mov	r3, r0
 800371c:	817b      	strh	r3, [r7, #10]
 800371e:	460b      	mov	r3, r1
 8003720:	813b      	strh	r3, [r7, #8]
 8003722:	4613      	mov	r3, r2
 8003724:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003726:	f7fe ff2d 	bl	8002584 <HAL_GetTick>
 800372a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b20      	cmp	r3, #32
 8003736:	f040 80d9 	bne.w	80038ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	2319      	movs	r3, #25
 8003740:	2201      	movs	r2, #1
 8003742:	496d      	ldr	r1, [pc, #436]	@ (80038f8 <HAL_I2C_Mem_Write+0x1ec>)
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fd4f 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003750:	2302      	movs	r3, #2
 8003752:	e0cc      	b.n	80038ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_I2C_Mem_Write+0x56>
 800375e:	2302      	movs	r3, #2
 8003760:	e0c5      	b.n	80038ee <HAL_I2C_Mem_Write+0x1e2>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d007      	beq.n	8003788 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003796:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2221      	movs	r2, #33	@ 0x21
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2240      	movs	r2, #64	@ 0x40
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a3a      	ldr	r2, [r7, #32]
 80037b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a4d      	ldr	r2, [pc, #308]	@ (80038fc <HAL_I2C_Mem_Write+0x1f0>)
 80037c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ca:	88f8      	ldrh	r0, [r7, #6]
 80037cc:	893a      	ldrh	r2, [r7, #8]
 80037ce:	8979      	ldrh	r1, [r7, #10]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	4603      	mov	r3, r0
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fb86 	bl	8003eec <I2C_RequestMemoryWrite>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d052      	beq.n	800388c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e081      	b.n	80038ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 fe14 	bl	800441c <I2C_WaitOnTXEFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d107      	bne.n	8003812 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003810:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06b      	b.n	80038ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381a:	781a      	ldrb	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b04      	cmp	r3, #4
 8003852:	d11b      	bne.n	800388c <HAL_I2C_Mem_Write+0x180>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003858:	2b00      	cmp	r3, #0
 800385a:	d017      	beq.n	800388c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1aa      	bne.n	80037ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fe07 	bl	80044ac <I2C_WaitOnBTFFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00d      	beq.n	80038c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d107      	bne.n	80038bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e016      	b.n	80038ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e000      	b.n	80038ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038ec:	2302      	movs	r3, #2
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	00100002 	.word	0x00100002
 80038fc:	ffff0000 	.word	0xffff0000

08003900 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08c      	sub	sp, #48	@ 0x30
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	4608      	mov	r0, r1
 800390a:	4611      	mov	r1, r2
 800390c:	461a      	mov	r2, r3
 800390e:	4603      	mov	r3, r0
 8003910:	817b      	strh	r3, [r7, #10]
 8003912:	460b      	mov	r3, r1
 8003914:	813b      	strh	r3, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800391e:	f7fe fe31 	bl	8002584 <HAL_GetTick>
 8003922:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b20      	cmp	r3, #32
 800392e:	f040 8250 	bne.w	8003dd2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	2319      	movs	r3, #25
 8003938:	2201      	movs	r2, #1
 800393a:	4982      	ldr	r1, [pc, #520]	@ (8003b44 <HAL_I2C_Mem_Read+0x244>)
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fc53 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003948:	2302      	movs	r3, #2
 800394a:	e243      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_I2C_Mem_Read+0x5a>
 8003956:	2302      	movs	r3, #2
 8003958:	e23c      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x4d4>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b01      	cmp	r3, #1
 800396e:	d007      	beq.n	8003980 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800398e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2222      	movs	r2, #34	@ 0x22
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2240      	movs	r2, #64	@ 0x40
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80039b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4a62      	ldr	r2, [pc, #392]	@ (8003b48 <HAL_I2C_Mem_Read+0x248>)
 80039c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039c2:	88f8      	ldrh	r0, [r7, #6]
 80039c4:	893a      	ldrh	r2, [r7, #8]
 80039c6:	8979      	ldrh	r1, [r7, #10]
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	9301      	str	r3, [sp, #4]
 80039cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	4603      	mov	r3, r0
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fb20 	bl	8004018 <I2C_RequestMemoryRead>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e1f8      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d113      	bne.n	8003a12 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	e1cc      	b.n	8003dac <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d11e      	bne.n	8003a58 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a28:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a2a:	b672      	cpsid	i
}
 8003a2c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a54:	b662      	cpsie	i
}
 8003a56:	e035      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d11e      	bne.n	8003a9e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a70:	b672      	cpsid	i
}
 8003a72:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a9a:	b662      	cpsie	i
}
 8003a9c:	e012      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003aac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ac4:	e172      	b.n	8003dac <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	f200 811f 	bhi.w	8003d0e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d123      	bne.n	8003b20 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ada:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fd2d 	bl	800453c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e173      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b1e:	e145      	b.n	8003dac <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d152      	bne.n	8003bce <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2e:	2200      	movs	r2, #0
 8003b30:	4906      	ldr	r1, [pc, #24]	@ (8003b4c <HAL_I2C_Mem_Read+0x24c>)
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fb58 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d008      	beq.n	8003b50 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e148      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x4d4>
 8003b42:	bf00      	nop
 8003b44:	00100002 	.word	0x00100002
 8003b48:	ffff0000 	.word	0xffff0000
 8003b4c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b50:	b672      	cpsid	i
}
 8003b52:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b96:	b662      	cpsie	i
}
 8003b98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bcc:	e0ee      	b.n	8003dac <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	4981      	ldr	r1, [pc, #516]	@ (8003ddc <HAL_I2C_Mem_Read+0x4dc>)
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 fb05 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0f5      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bf6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bf8:	b672      	cpsid	i
}
 8003bfa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c2e:	4b6c      	ldr	r3, [pc, #432]	@ (8003de0 <HAL_I2C_Mem_Read+0x4e0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	08db      	lsrs	r3, r3, #3
 8003c34:	4a6b      	ldr	r2, [pc, #428]	@ (8003de4 <HAL_I2C_Mem_Read+0x4e4>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	0a1a      	lsrs	r2, r3, #8
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	00da      	lsls	r2, r3, #3
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d118      	bne.n	8003c86 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	f043 0220 	orr.w	r2, r3, #32
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c76:	b662      	cpsie	i
}
 8003c78:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0a6      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d1d9      	bne.n	8003c48 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cd6:	b662      	cpsie	i
}
 8003cd8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d0c:	e04e      	b.n	8003dac <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 fc12 	bl	800453c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e058      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d124      	bne.n	8003dac <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d107      	bne.n	8003d7a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d78:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f47f ae88 	bne.w	8003ac6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3728      	adds	r7, #40	@ 0x28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	00010004 	.word	0x00010004
 8003de0:	20000078 	.word	0x20000078
 8003de4:	14f8b589 	.word	0x14f8b589

08003de8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	460b      	mov	r3, r1
 8003df6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d006      	beq.n	8003e12 <I2C_MasterRequestWrite+0x2a>
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d003      	beq.n	8003e12 <I2C_MasterRequestWrite+0x2a>
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e10:	d108      	bne.n	8003e24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e00b      	b.n	8003e3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e28:	2b12      	cmp	r3, #18
 8003e2a:	d107      	bne.n	8003e3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f9cd 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00d      	beq.n	8003e70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e62:	d103      	bne.n	8003e6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e035      	b.n	8003edc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e78:	d108      	bne.n	8003e8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e7a:	897b      	ldrh	r3, [r7, #10]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e88:	611a      	str	r2, [r3, #16]
 8003e8a:	e01b      	b.n	8003ec4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e8c:	897b      	ldrh	r3, [r7, #10]
 8003e8e:	11db      	asrs	r3, r3, #7
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f003 0306 	and.w	r3, r3, #6
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f063 030f 	orn	r3, r3, #15
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	490e      	ldr	r1, [pc, #56]	@ (8003ee4 <I2C_MasterRequestWrite+0xfc>)
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fa16 	bl	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e010      	b.n	8003edc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003eba:	897b      	ldrh	r3, [r7, #10]
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	4907      	ldr	r1, [pc, #28]	@ (8003ee8 <I2C_MasterRequestWrite+0x100>)
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fa06 	bl	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	00010008 	.word	0x00010008
 8003ee8:	00010002 	.word	0x00010002

08003eec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	4608      	mov	r0, r1
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	817b      	strh	r3, [r7, #10]
 8003efe:	460b      	mov	r3, r1
 8003f00:	813b      	strh	r3, [r7, #8]
 8003f02:	4613      	mov	r3, r2
 8003f04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f960 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00d      	beq.n	8003f4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f3c:	d103      	bne.n	8003f46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e05f      	b.n	800400a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f4a:	897b      	ldrh	r3, [r7, #10]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	6a3a      	ldr	r2, [r7, #32]
 8003f5e:	492d      	ldr	r1, [pc, #180]	@ (8004014 <I2C_RequestMemoryWrite+0x128>)
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f9bb 	bl	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e04c      	b.n	800400a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f88:	6a39      	ldr	r1, [r7, #32]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 fa46 	bl	800441c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d107      	bne.n	8003fae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e02b      	b.n	800400a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fb8:	893b      	ldrh	r3, [r7, #8]
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	611a      	str	r2, [r3, #16]
 8003fc2:	e021      	b.n	8004008 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fc4:	893b      	ldrh	r3, [r7, #8]
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd4:	6a39      	ldr	r1, [r7, #32]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 fa20 	bl	800441c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d107      	bne.n	8003ffa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e005      	b.n	800400a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ffe:	893b      	ldrh	r3, [r7, #8]
 8004000:	b2da      	uxtb	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	00010002 	.word	0x00010002

08004018 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	4608      	mov	r0, r1
 8004022:	4611      	mov	r1, r2
 8004024:	461a      	mov	r2, r3
 8004026:	4603      	mov	r3, r0
 8004028:	817b      	strh	r3, [r7, #10]
 800402a:	460b      	mov	r3, r1
 800402c:	813b      	strh	r3, [r7, #8]
 800402e:	4613      	mov	r3, r2
 8004030:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004040:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004050:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	2200      	movs	r2, #0
 800405a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f8c2 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00d      	beq.n	8004086 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004078:	d103      	bne.n	8004082 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004080:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e0aa      	b.n	80041dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004086:	897b      	ldrh	r3, [r7, #10]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004094:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	6a3a      	ldr	r2, [r7, #32]
 800409a:	4952      	ldr	r1, [pc, #328]	@ (80041e4 <I2C_RequestMemoryRead+0x1cc>)
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f91d 	bl	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e097      	b.n	80041dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c4:	6a39      	ldr	r1, [r7, #32]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f9a8 	bl	800441c <I2C_WaitOnTXEFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00d      	beq.n	80040ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d107      	bne.n	80040ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e076      	b.n	80041dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d105      	bne.n	8004100 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040f4:	893b      	ldrh	r3, [r7, #8]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	611a      	str	r2, [r3, #16]
 80040fe:	e021      	b.n	8004144 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004100:	893b      	ldrh	r3, [r7, #8]
 8004102:	0a1b      	lsrs	r3, r3, #8
 8004104:	b29b      	uxth	r3, r3
 8004106:	b2da      	uxtb	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800410e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004110:	6a39      	ldr	r1, [r7, #32]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f982 	bl	800441c <I2C_WaitOnTXEFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	2b04      	cmp	r3, #4
 8004124:	d107      	bne.n	8004136 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004134:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e050      	b.n	80041dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800413a:	893b      	ldrh	r3, [r7, #8]
 800413c:	b2da      	uxtb	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004146:	6a39      	ldr	r1, [r7, #32]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f967 	bl	800441c <I2C_WaitOnTXEFlagUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00d      	beq.n	8004170 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004158:	2b04      	cmp	r3, #4
 800415a:	d107      	bne.n	800416c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e035      	b.n	80041dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800417e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	2200      	movs	r2, #0
 8004188:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f82b 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041a6:	d103      	bne.n	80041b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e013      	b.n	80041dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041b4:	897b      	ldrh	r3, [r7, #10]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	6a3a      	ldr	r2, [r7, #32]
 80041c8:	4906      	ldr	r1, [pc, #24]	@ (80041e4 <I2C_RequestMemoryRead+0x1cc>)
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f886 	bl	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	00010002 	.word	0x00010002

080041e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041f8:	e048      	b.n	800428c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d044      	beq.n	800428c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004202:	f7fe f9bf 	bl	8002584 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d302      	bcc.n	8004218 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d139      	bne.n	800428c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	0c1b      	lsrs	r3, r3, #16
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	d10d      	bne.n	800423e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	43da      	mvns	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4013      	ands	r3, r2
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	461a      	mov	r2, r3
 800423c:	e00c      	b.n	8004258 <I2C_WaitOnFlagUntilTimeout+0x70>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	43da      	mvns	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4013      	ands	r3, r2
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	429a      	cmp	r2, r3
 800425c:	d116      	bne.n	800428c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e023      	b.n	80042d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	0c1b      	lsrs	r3, r3, #16
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	d10d      	bne.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	43da      	mvns	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4013      	ands	r3, r2
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf0c      	ite	eq
 80042a8:	2301      	moveq	r3, #1
 80042aa:	2300      	movne	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	e00c      	b.n	80042cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	43da      	mvns	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4013      	ands	r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d093      	beq.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042ea:	e071      	b.n	80043d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042fa:	d123      	bne.n	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800430a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004314:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004330:	f043 0204 	orr.w	r2, r3, #4
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e067      	b.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434a:	d041      	beq.n	80043d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434c:	f7fe f91a 	bl	8002584 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	429a      	cmp	r2, r3
 800435a:	d302      	bcc.n	8004362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d136      	bne.n	80043d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b01      	cmp	r3, #1
 800436a:	d10c      	bne.n	8004386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	43da      	mvns	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4013      	ands	r3, r2
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	bf14      	ite	ne
 800437e:	2301      	movne	r3, #1
 8004380:	2300      	moveq	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	e00b      	b.n	800439e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	43da      	mvns	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4013      	ands	r3, r2
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d016      	beq.n	80043d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043bc:	f043 0220 	orr.w	r2, r3, #32
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e021      	b.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	0c1b      	lsrs	r3, r3, #16
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d10c      	bne.n	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	43da      	mvns	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e00b      	b.n	800440c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	43da      	mvns	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4013      	ands	r3, r2
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	bf14      	ite	ne
 8004406:	2301      	movne	r3, #1
 8004408:	2300      	moveq	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	f47f af6d 	bne.w	80042ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004428:	e034      	b.n	8004494 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f8e3 	bl	80045f6 <I2C_IsAcknowledgeFailed>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e034      	b.n	80044a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d028      	beq.n	8004494 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004442:	f7fe f89f 	bl	8002584 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	429a      	cmp	r2, r3
 8004450:	d302      	bcc.n	8004458 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d11d      	bne.n	8004494 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004462:	2b80      	cmp	r3, #128	@ 0x80
 8004464:	d016      	beq.n	8004494 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004480:	f043 0220 	orr.w	r2, r3, #32
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e007      	b.n	80044a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449e:	2b80      	cmp	r3, #128	@ 0x80
 80044a0:	d1c3      	bne.n	800442a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044b8:	e034      	b.n	8004524 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 f89b 	bl	80045f6 <I2C_IsAcknowledgeFailed>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e034      	b.n	8004534 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d028      	beq.n	8004524 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d2:	f7fe f857 	bl	8002584 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d302      	bcc.n	80044e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d11d      	bne.n	8004524 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d016      	beq.n	8004524 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	f043 0220 	orr.w	r2, r3, #32
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e007      	b.n	8004534 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b04      	cmp	r3, #4
 8004530:	d1c3      	bne.n	80044ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004548:	e049      	b.n	80045de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b10      	cmp	r3, #16
 8004556:	d119      	bne.n	800458c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0210 	mvn.w	r2, #16
 8004560:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e030      	b.n	80045ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458c:	f7fd fffa 	bl	8002584 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d11d      	bne.n	80045de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ac:	2b40      	cmp	r3, #64	@ 0x40
 80045ae:	d016      	beq.n	80045de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ca:	f043 0220 	orr.w	r2, r3, #32
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e007      	b.n	80045ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e8:	2b40      	cmp	r3, #64	@ 0x40
 80045ea:	d1ae      	bne.n	800454a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460c:	d11b      	bne.n	8004646 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004616:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004632:	f043 0204 	orr.w	r2, r3, #4
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr
	...

08004654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e272      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 8087 	beq.w	8004782 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004674:	4b92      	ldr	r3, [pc, #584]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 030c 	and.w	r3, r3, #12
 800467c:	2b04      	cmp	r3, #4
 800467e:	d00c      	beq.n	800469a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004680:	4b8f      	ldr	r3, [pc, #572]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 030c 	and.w	r3, r3, #12
 8004688:	2b08      	cmp	r3, #8
 800468a:	d112      	bne.n	80046b2 <HAL_RCC_OscConfig+0x5e>
 800468c:	4b8c      	ldr	r3, [pc, #560]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004698:	d10b      	bne.n	80046b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800469a:	4b89      	ldr	r3, [pc, #548]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d06c      	beq.n	8004780 <HAL_RCC_OscConfig+0x12c>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d168      	bne.n	8004780 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e24c      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ba:	d106      	bne.n	80046ca <HAL_RCC_OscConfig+0x76>
 80046bc:	4b80      	ldr	r3, [pc, #512]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a7f      	ldr	r2, [pc, #508]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	e02e      	b.n	8004728 <HAL_RCC_OscConfig+0xd4>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10c      	bne.n	80046ec <HAL_RCC_OscConfig+0x98>
 80046d2:	4b7b      	ldr	r3, [pc, #492]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a7a      	ldr	r2, [pc, #488]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	4b78      	ldr	r3, [pc, #480]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a77      	ldr	r2, [pc, #476]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	e01d      	b.n	8004728 <HAL_RCC_OscConfig+0xd4>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046f4:	d10c      	bne.n	8004710 <HAL_RCC_OscConfig+0xbc>
 80046f6:	4b72      	ldr	r3, [pc, #456]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a71      	ldr	r2, [pc, #452]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	4b6f      	ldr	r3, [pc, #444]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a6e      	ldr	r2, [pc, #440]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	e00b      	b.n	8004728 <HAL_RCC_OscConfig+0xd4>
 8004710:	4b6b      	ldr	r3, [pc, #428]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a6a      	ldr	r2, [pc, #424]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	4b68      	ldr	r3, [pc, #416]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a67      	ldr	r2, [pc, #412]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004726:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d013      	beq.n	8004758 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fd ff28 	bl	8002584 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004738:	f7fd ff24 	bl	8002584 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	@ 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e200      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474a:	4b5d      	ldr	r3, [pc, #372]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0xe4>
 8004756:	e014      	b.n	8004782 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004758:	f7fd ff14 	bl	8002584 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004760:	f7fd ff10 	bl	8002584 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	@ 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e1ec      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004772:	4b53      	ldr	r3, [pc, #332]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x10c>
 800477e:	e000      	b.n	8004782 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d063      	beq.n	8004856 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800478e:	4b4c      	ldr	r3, [pc, #304]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00b      	beq.n	80047b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800479a:	4b49      	ldr	r3, [pc, #292]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d11c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x18c>
 80047a6:	4b46      	ldr	r3, [pc, #280]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d116      	bne.n	80047e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b2:	4b43      	ldr	r3, [pc, #268]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_RCC_OscConfig+0x176>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d001      	beq.n	80047ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e1c0      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ca:	4b3d      	ldr	r3, [pc, #244]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4939      	ldr	r1, [pc, #228]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047de:	e03a      	b.n	8004856 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047e8:	4b36      	ldr	r3, [pc, #216]	@ (80048c4 <HAL_RCC_OscConfig+0x270>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ee:	f7fd fec9 	bl	8002584 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f6:	f7fd fec5 	bl	8002584 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e1a1      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004808:	4b2d      	ldr	r3, [pc, #180]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004814:	4b2a      	ldr	r3, [pc, #168]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4927      	ldr	r1, [pc, #156]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004824:	4313      	orrs	r3, r2
 8004826:	600b      	str	r3, [r1, #0]
 8004828:	e015      	b.n	8004856 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800482a:	4b26      	ldr	r3, [pc, #152]	@ (80048c4 <HAL_RCC_OscConfig+0x270>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fd fea8 	bl	8002584 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004838:	f7fd fea4 	bl	8002584 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e180      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484a:	4b1d      	ldr	r3, [pc, #116]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d03a      	beq.n	80048d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d019      	beq.n	800489e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800486a:	4b17      	ldr	r3, [pc, #92]	@ (80048c8 <HAL_RCC_OscConfig+0x274>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004870:	f7fd fe88 	bl	8002584 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004878:	f7fd fe84 	bl	8002584 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e160      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488a:	4b0d      	ldr	r3, [pc, #52]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800488c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004896:	2001      	movs	r0, #1
 8004898:	f000 fafe 	bl	8004e98 <RCC_Delay>
 800489c:	e01c      	b.n	80048d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800489e:	4b0a      	ldr	r3, [pc, #40]	@ (80048c8 <HAL_RCC_OscConfig+0x274>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a4:	f7fd fe6e 	bl	8002584 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048aa:	e00f      	b.n	80048cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ac:	f7fd fe6a 	bl	8002584 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d908      	bls.n	80048cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e146      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
 80048be:	bf00      	nop
 80048c0:	40021000 	.word	0x40021000
 80048c4:	42420000 	.word	0x42420000
 80048c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048cc:	4b92      	ldr	r3, [pc, #584]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e9      	bne.n	80048ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 80a6 	beq.w	8004a32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048e6:	2300      	movs	r3, #0
 80048e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ea:	4b8b      	ldr	r3, [pc, #556]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10d      	bne.n	8004912 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f6:	4b88      	ldr	r3, [pc, #544]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	4a87      	ldr	r2, [pc, #540]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80048fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004900:	61d3      	str	r3, [r2, #28]
 8004902:	4b85      	ldr	r3, [pc, #532]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800490e:	2301      	movs	r3, #1
 8004910:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004912:	4b82      	ldr	r3, [pc, #520]	@ (8004b1c <HAL_RCC_OscConfig+0x4c8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	d118      	bne.n	8004950 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800491e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b1c <HAL_RCC_OscConfig+0x4c8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a7e      	ldr	r2, [pc, #504]	@ (8004b1c <HAL_RCC_OscConfig+0x4c8>)
 8004924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800492a:	f7fd fe2b 	bl	8002584 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004932:	f7fd fe27 	bl	8002584 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b64      	cmp	r3, #100	@ 0x64
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e103      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004944:	4b75      	ldr	r3, [pc, #468]	@ (8004b1c <HAL_RCC_OscConfig+0x4c8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f0      	beq.n	8004932 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d106      	bne.n	8004966 <HAL_RCC_OscConfig+0x312>
 8004958:	4b6f      	ldr	r3, [pc, #444]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	4a6e      	ldr	r2, [pc, #440]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	6213      	str	r3, [r2, #32]
 8004964:	e02d      	b.n	80049c2 <HAL_RCC_OscConfig+0x36e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10c      	bne.n	8004988 <HAL_RCC_OscConfig+0x334>
 800496e:	4b6a      	ldr	r3, [pc, #424]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	4a69      	ldr	r2, [pc, #420]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	6213      	str	r3, [r2, #32]
 800497a:	4b67      	ldr	r3, [pc, #412]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	4a66      	ldr	r2, [pc, #408]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004980:	f023 0304 	bic.w	r3, r3, #4
 8004984:	6213      	str	r3, [r2, #32]
 8004986:	e01c      	b.n	80049c2 <HAL_RCC_OscConfig+0x36e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	2b05      	cmp	r3, #5
 800498e:	d10c      	bne.n	80049aa <HAL_RCC_OscConfig+0x356>
 8004990:	4b61      	ldr	r3, [pc, #388]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	4a60      	ldr	r2, [pc, #384]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004996:	f043 0304 	orr.w	r3, r3, #4
 800499a:	6213      	str	r3, [r2, #32]
 800499c:	4b5e      	ldr	r3, [pc, #376]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	6213      	str	r3, [r2, #32]
 80049a8:	e00b      	b.n	80049c2 <HAL_RCC_OscConfig+0x36e>
 80049aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	4a5a      	ldr	r2, [pc, #360]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80049b0:	f023 0301 	bic.w	r3, r3, #1
 80049b4:	6213      	str	r3, [r2, #32]
 80049b6:	4b58      	ldr	r3, [pc, #352]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	4a57      	ldr	r2, [pc, #348]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80049bc:	f023 0304 	bic.w	r3, r3, #4
 80049c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d015      	beq.n	80049f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ca:	f7fd fddb 	bl	8002584 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d0:	e00a      	b.n	80049e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d2:	f7fd fdd7 	bl	8002584 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e0b1      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ee      	beq.n	80049d2 <HAL_RCC_OscConfig+0x37e>
 80049f4:	e014      	b.n	8004a20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f6:	f7fd fdc5 	bl	8002584 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fc:	e00a      	b.n	8004a14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fe:	f7fd fdc1 	bl	8002584 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e09b      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a14:	4b40      	ldr	r3, [pc, #256]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1ee      	bne.n	80049fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d105      	bne.n	8004a32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a26:	4b3c      	ldr	r3, [pc, #240]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 8087 	beq.w	8004b4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a3c:	4b36      	ldr	r3, [pc, #216]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d061      	beq.n	8004b0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d146      	bne.n	8004ade <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a50:	4b33      	ldr	r3, [pc, #204]	@ (8004b20 <HAL_RCC_OscConfig+0x4cc>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a56:	f7fd fd95 	bl	8002584 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5e:	f7fd fd91 	bl	8002584 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e06d      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a70:	4b29      	ldr	r3, [pc, #164]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a84:	d108      	bne.n	8004a98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a86:	4b24      	ldr	r3, [pc, #144]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	4921      	ldr	r1, [pc, #132]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a98:	4b1f      	ldr	r3, [pc, #124]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a19      	ldr	r1, [r3, #32]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	491b      	ldr	r1, [pc, #108]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b20 <HAL_RCC_OscConfig+0x4cc>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab6:	f7fd fd65 	bl	8002584 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abe:	f7fd fd61 	bl	8002584 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e03d      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ad0:	4b11      	ldr	r3, [pc, #68]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x46a>
 8004adc:	e035      	b.n	8004b4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ade:	4b10      	ldr	r3, [pc, #64]	@ (8004b20 <HAL_RCC_OscConfig+0x4cc>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fd4e 	bl	8002584 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aec:	f7fd fd4a 	bl	8002584 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e026      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004afe:	4b06      	ldr	r3, [pc, #24]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x498>
 8004b0a:	e01e      	b.n	8004b4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d107      	bne.n	8004b24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e019      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	40007000 	.word	0x40007000
 8004b20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b24:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <HAL_RCC_OscConfig+0x500>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d106      	bne.n	8004b46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d001      	beq.n	8004b4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40021000 	.word	0x40021000

08004b58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0d0      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b6c:	4b6a      	ldr	r3, [pc, #424]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d910      	bls.n	8004b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7a:	4b67      	ldr	r3, [pc, #412]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f023 0207 	bic.w	r2, r3, #7
 8004b82:	4965      	ldr	r1, [pc, #404]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b63      	ldr	r3, [pc, #396]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0b8      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d020      	beq.n	8004bea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bb4:	4b59      	ldr	r3, [pc, #356]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4a58      	ldr	r2, [pc, #352]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004bba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bcc:	4b53      	ldr	r3, [pc, #332]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4a52      	ldr	r2, [pc, #328]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004bd2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004bd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd8:	4b50      	ldr	r3, [pc, #320]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	494d      	ldr	r1, [pc, #308]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d040      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d107      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfe:	4b47      	ldr	r3, [pc, #284]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d115      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e07f      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d107      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c16:	4b41      	ldr	r3, [pc, #260]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e073      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c26:	4b3d      	ldr	r3, [pc, #244]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e06b      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c36:	4b39      	ldr	r3, [pc, #228]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f023 0203 	bic.w	r2, r3, #3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	4936      	ldr	r1, [pc, #216]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c48:	f7fd fc9c 	bl	8002584 <HAL_GetTick>
 8004c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4e:	e00a      	b.n	8004c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c50:	f7fd fc98 	bl	8002584 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e053      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c66:	4b2d      	ldr	r3, [pc, #180]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f003 020c 	and.w	r2, r3, #12
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d1eb      	bne.n	8004c50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c78:	4b27      	ldr	r3, [pc, #156]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d210      	bcs.n	8004ca8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c86:	4b24      	ldr	r3, [pc, #144]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f023 0207 	bic.w	r2, r3, #7
 8004c8e:	4922      	ldr	r1, [pc, #136]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c96:	4b20      	ldr	r3, [pc, #128]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e032      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb4:	4b19      	ldr	r3, [pc, #100]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4916      	ldr	r1, [pc, #88]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cd2:	4b12      	ldr	r3, [pc, #72]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	490e      	ldr	r1, [pc, #56]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ce6:	f000 f821 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004cea:	4602      	mov	r2, r0
 8004cec:	4b0b      	ldr	r3, [pc, #44]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	091b      	lsrs	r3, r3, #4
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	490a      	ldr	r1, [pc, #40]	@ (8004d20 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf8:	5ccb      	ldrb	r3, [r1, r3]
 8004cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfe:	4a09      	ldr	r2, [pc, #36]	@ (8004d24 <HAL_RCC_ClockConfig+0x1cc>)
 8004d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d02:	4b09      	ldr	r3, [pc, #36]	@ (8004d28 <HAL_RCC_ClockConfig+0x1d0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fd fa90 	bl	800222c <HAL_InitTick>

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40022000 	.word	0x40022000
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	0800a920 	.word	0x0800a920
 8004d24:	20000078 	.word	0x20000078
 8004d28:	2000007c 	.word	0x2000007c

08004d2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	2300      	movs	r3, #0
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d46:	4b1e      	ldr	r3, [pc, #120]	@ (8004dc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d002      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0x30>
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d003      	beq.n	8004d62 <HAL_RCC_GetSysClockFreq+0x36>
 8004d5a:	e027      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d5c:	4b19      	ldr	r3, [pc, #100]	@ (8004dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d5e:	613b      	str	r3, [r7, #16]
      break;
 8004d60:	e027      	b.n	8004db2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	0c9b      	lsrs	r3, r3, #18
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	4a17      	ldr	r2, [pc, #92]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d6c:	5cd3      	ldrb	r3, [r2, r3]
 8004d6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d010      	beq.n	8004d9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d7a:	4b11      	ldr	r3, [pc, #68]	@ (8004dc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	0c5b      	lsrs	r3, r3, #17
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	4a11      	ldr	r2, [pc, #68]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d86:	5cd3      	ldrb	r3, [r2, r3]
 8004d88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d8e:	fb03 f202 	mul.w	r2, r3, r2
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	e004      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004da0:	fb02 f303 	mul.w	r3, r2, r3
 8004da4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	613b      	str	r3, [r7, #16]
      break;
 8004daa:	e002      	b.n	8004db2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004dac:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dae:	613b      	str	r3, [r7, #16]
      break;
 8004db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004db2:	693b      	ldr	r3, [r7, #16]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	371c      	adds	r7, #28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	007a1200 	.word	0x007a1200
 8004dc8:	0800a938 	.word	0x0800a938
 8004dcc:	0800a948 	.word	0x0800a948
 8004dd0:	003d0900 	.word	0x003d0900

08004dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd8:	4b02      	ldr	r3, [pc, #8]	@ (8004de4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004dda:	681b      	ldr	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr
 8004de4:	20000078 	.word	0x20000078

08004de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dec:	f7ff fff2 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004df0:	4602      	mov	r2, r0
 8004df2:	4b05      	ldr	r3, [pc, #20]	@ (8004e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	0a1b      	lsrs	r3, r3, #8
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	4903      	ldr	r1, [pc, #12]	@ (8004e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dfe:	5ccb      	ldrb	r3, [r1, r3]
 8004e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	0800a930 	.word	0x0800a930

08004e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e14:	f7ff ffde 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4b05      	ldr	r3, [pc, #20]	@ (8004e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	0adb      	lsrs	r3, r3, #11
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	4903      	ldr	r1, [pc, #12]	@ (8004e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e26:	5ccb      	ldrb	r3, [r1, r3]
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40021000 	.word	0x40021000
 8004e34:	0800a930 	.word	0x0800a930

08004e38 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	220f      	movs	r2, #15
 8004e46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e48:	4b11      	ldr	r3, [pc, #68]	@ (8004e90 <HAL_RCC_GetClockConfig+0x58>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 0203 	and.w	r2, r3, #3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e54:	4b0e      	ldr	r3, [pc, #56]	@ (8004e90 <HAL_RCC_GetClockConfig+0x58>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e60:	4b0b      	ldr	r3, [pc, #44]	@ (8004e90 <HAL_RCC_GetClockConfig+0x58>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004e6c:	4b08      	ldr	r3, [pc, #32]	@ (8004e90 <HAL_RCC_GetClockConfig+0x58>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	08db      	lsrs	r3, r3, #3
 8004e72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e7a:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <HAL_RCC_GetClockConfig+0x5c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0207 	and.w	r2, r3, #7
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bc80      	pop	{r7}
 8004e8e:	4770      	bx	lr
 8004e90:	40021000 	.word	0x40021000
 8004e94:	40022000 	.word	0x40022000

08004e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ecc <RCC_Delay+0x34>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed0 <RCC_Delay+0x38>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	0a5b      	lsrs	r3, r3, #9
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	fb02 f303 	mul.w	r3, r2, r3
 8004eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004eb4:	bf00      	nop
  }
  while (Delay --);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1e5a      	subs	r2, r3, #1
 8004eba:	60fa      	str	r2, [r7, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f9      	bne.n	8004eb4 <RCC_Delay+0x1c>
}
 8004ec0:	bf00      	nop
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr
 8004ecc:	20000078 	.word	0x20000078
 8004ed0:	10624dd3 	.word	0x10624dd3

08004ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d07d      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef4:	4b4f      	ldr	r3, [pc, #316]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10d      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f00:	4b4c      	ldr	r3, [pc, #304]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	4a4b      	ldr	r2, [pc, #300]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f0a:	61d3      	str	r3, [r2, #28]
 8004f0c:	4b49      	ldr	r3, [pc, #292]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f14:	60bb      	str	r3, [r7, #8]
 8004f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f1c:	4b46      	ldr	r3, [pc, #280]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d118      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f28:	4b43      	ldr	r3, [pc, #268]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a42      	ldr	r2, [pc, #264]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f34:	f7fd fb26 	bl	8002584 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3a:	e008      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f3c:	f7fd fb22 	bl	8002584 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	@ 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e06d      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f5a:	4b36      	ldr	r3, [pc, #216]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d02e      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d027      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f78:	4b2e      	ldr	r3, [pc, #184]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f82:	4b2e      	ldr	r3, [pc, #184]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f88:	4b2c      	ldr	r3, [pc, #176]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f8e:	4a29      	ldr	r2, [pc, #164]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d014      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9e:	f7fd faf1 	bl	8002584 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa4:	e00a      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa6:	f7fd faed 	bl	8002584 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e036      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0ee      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4917      	ldr	r1, [pc, #92]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fda:	7dfb      	ldrb	r3, [r7, #23]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d105      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe0:	4b14      	ldr	r3, [pc, #80]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	4a13      	ldr	r2, [pc, #76]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	490b      	ldr	r1, [pc, #44]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005006:	4313      	orrs	r3, r2
 8005008:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0310 	and.w	r3, r3, #16
 8005012:	2b00      	cmp	r3, #0
 8005014:	d008      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005016:	4b07      	ldr	r3, [pc, #28]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	4904      	ldr	r1, [pc, #16]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005024:	4313      	orrs	r3, r2
 8005026:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000
 8005038:	40007000 	.word	0x40007000
 800503c:	42420440 	.word	0x42420440

08005040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e041      	b.n	80050d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f839 	bl	80050de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f000 f99c 	bl	80053bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr

080050f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b01      	cmp	r3, #1
 8005102:	d001      	beq.n	8005108 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e03a      	b.n	800517e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a18      	ldr	r2, [pc, #96]	@ (8005188 <HAL_TIM_Base_Start_IT+0x98>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00e      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x58>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005132:	d009      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x58>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a14      	ldr	r2, [pc, #80]	@ (800518c <HAL_TIM_Base_Start_IT+0x9c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x58>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a13      	ldr	r2, [pc, #76]	@ (8005190 <HAL_TIM_Base_Start_IT+0xa0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d111      	bne.n	800516c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b06      	cmp	r3, #6
 8005158:	d010      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516a:	e007      	b.n	800517c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr
 8005188:	40012c00 	.word	0x40012c00
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800

08005194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d020      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01b      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0202 	mvn.w	r2, #2
 80051c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f8d1 	bl	8005386 <HAL_TIM_IC_CaptureCallback>
 80051e4:	e005      	b.n	80051f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f8c4 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f8d3 	bl	8005398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d020      	beq.n	8005244 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01b      	beq.n	8005244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0204 	mvn.w	r2, #4
 8005214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2202      	movs	r2, #2
 800521a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8ab 	bl	8005386 <HAL_TIM_IC_CaptureCallback>
 8005230:	e005      	b.n	800523e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f89e 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f8ad 	bl	8005398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d020      	beq.n	8005290 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01b      	beq.n	8005290 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0208 	mvn.w	r2, #8
 8005260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2204      	movs	r2, #4
 8005266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f885 	bl	8005386 <HAL_TIM_IC_CaptureCallback>
 800527c:	e005      	b.n	800528a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f878 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f887 	bl	8005398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b00      	cmp	r3, #0
 8005298:	d020      	beq.n	80052dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01b      	beq.n	80052dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0210 	mvn.w	r2, #16
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2208      	movs	r2, #8
 80052b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f85f 	bl	8005386 <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f852 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f861 	bl	8005398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00c      	beq.n	8005300 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d007      	beq.n	8005300 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0201 	mvn.w	r2, #1
 80052f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fc fe4c 	bl	8001f98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00c      	beq.n	8005324 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005310:	2b00      	cmp	r3, #0
 8005312:	d007      	beq.n	8005324 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800531c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f8c3 	bl	80054aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00c      	beq.n	8005348 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d007      	beq.n	8005348 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f831 	bl	80053aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0220 	mvn.w	r2, #32
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f896 	bl	8005498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr

08005386 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr

080053aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a2f      	ldr	r2, [pc, #188]	@ (800548c <TIM_Base_SetConfig+0xd0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00b      	beq.n	80053ec <TIM_Base_SetConfig+0x30>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053da:	d007      	beq.n	80053ec <TIM_Base_SetConfig+0x30>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a2c      	ldr	r2, [pc, #176]	@ (8005490 <TIM_Base_SetConfig+0xd4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_Base_SetConfig+0x30>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005494 <TIM_Base_SetConfig+0xd8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d108      	bne.n	80053fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a22      	ldr	r2, [pc, #136]	@ (800548c <TIM_Base_SetConfig+0xd0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00b      	beq.n	800541e <TIM_Base_SetConfig+0x62>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800540c:	d007      	beq.n	800541e <TIM_Base_SetConfig+0x62>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a1f      	ldr	r2, [pc, #124]	@ (8005490 <TIM_Base_SetConfig+0xd4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_Base_SetConfig+0x62>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a1e      	ldr	r2, [pc, #120]	@ (8005494 <TIM_Base_SetConfig+0xd8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d108      	bne.n	8005430 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a0d      	ldr	r2, [pc, #52]	@ (800548c <TIM_Base_SetConfig+0xd0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d103      	bne.n	8005464 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f023 0201 	bic.w	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	611a      	str	r2, [r3, #16]
  }
}
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800

08005498 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr

080054aa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr

080054bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e042      	b.n	8005554 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7fc fe4e 	bl	8002184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2224      	movs	r2, #36	@ 0x24
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fdb7 	bl	8006074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005514:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695a      	ldr	r2, [r3, #20]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005524:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005534:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	@ 0x28
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b20      	cmp	r3, #32
 800557a:	d175      	bne.n	8005668 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_UART_Transmit+0x2c>
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e06e      	b.n	800566a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2221      	movs	r2, #33	@ 0x21
 8005596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800559a:	f7fc fff3 	bl	8002584 <HAL_GetTick>
 800559e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	88fa      	ldrh	r2, [r7, #6]
 80055aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b4:	d108      	bne.n	80055c8 <HAL_UART_Transmit+0x6c>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d104      	bne.n	80055c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	e003      	b.n	80055d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055cc:	2300      	movs	r3, #0
 80055ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055d0:	e02e      	b.n	8005630 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2200      	movs	r2, #0
 80055da:	2180      	movs	r1, #128	@ 0x80
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 fb1c 	bl	8005c1a <UART_WaitOnFlagUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e03a      	b.n	800566a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005608:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	3302      	adds	r3, #2
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	e007      	b.n	8005622 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	781a      	ldrb	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	3301      	adds	r3, #1
 8005620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1cb      	bne.n	80055d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2200      	movs	r2, #0
 8005642:	2140      	movs	r1, #64	@ 0x40
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fae8 	bl	8005c1a <UART_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e006      	b.n	800566a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	e000      	b.n	800566a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005668:	2302      	movs	r3, #2
  }
}
 800566a:	4618      	mov	r0, r3
 800566c:	3720      	adds	r7, #32
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	4613      	mov	r3, r2
 800567e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b20      	cmp	r3, #32
 800568a:	d112      	bne.n	80056b2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <HAL_UART_Receive_IT+0x26>
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e00b      	b.n	80056b4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056a2:	88fb      	ldrh	r3, [r7, #6]
 80056a4:	461a      	mov	r2, r3
 80056a6:	68b9      	ldr	r1, [r7, #8]
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 fb0f 	bl	8005ccc <UART_Start_Receive_IT>
 80056ae:	4603      	mov	r3, r0
 80056b0:	e000      	b.n	80056b4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80056b2:	2302      	movs	r3, #2
  }
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b0ba      	sub	sp, #232	@ 0xe8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80056fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b00      	cmp	r3, #0
 800570c:	d009      	beq.n	8005722 <HAL_UART_IRQHandler+0x66>
 800570e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fbec 	bl	8005ef8 <UART_Receive_IT>
      return;
 8005720:	e25b      	b.n	8005bda <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 80de 	beq.w	80058e8 <HAL_UART_IRQHandler+0x22c>
 800572c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800573c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 80d1 	beq.w	80058e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00b      	beq.n	800576a <HAL_UART_IRQHandler+0xae>
 8005752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800575a:	2b00      	cmp	r3, #0
 800575c:	d005      	beq.n	800576a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005762:	f043 0201 	orr.w	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800576a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00b      	beq.n	800578e <HAL_UART_IRQHandler+0xd2>
 8005776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005786:	f043 0202 	orr.w	r2, r3, #2
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800578e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00b      	beq.n	80057b2 <HAL_UART_IRQHandler+0xf6>
 800579a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d005      	beq.n	80057b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057aa:	f043 0204 	orr.w	r2, r3, #4
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d011      	beq.n	80057e2 <HAL_UART_IRQHandler+0x126>
 80057be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d105      	bne.n	80057d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d005      	beq.n	80057e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057da:	f043 0208 	orr.w	r2, r3, #8
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 81f2 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d008      	beq.n	800580a <HAL_UART_IRQHandler+0x14e>
 80057f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fb77 	bl	8005ef8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005814:	2b00      	cmp	r3, #0
 8005816:	bf14      	ite	ne
 8005818:	2301      	movne	r3, #1
 800581a:	2300      	moveq	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	2b00      	cmp	r3, #0
 800582c:	d103      	bne.n	8005836 <HAL_UART_IRQHandler+0x17a>
 800582e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d04f      	beq.n	80058d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fa81 	bl	8005d3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d041      	beq.n	80058ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3314      	adds	r3, #20
 8005850:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005860:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005864:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005868:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3314      	adds	r3, #20
 8005872:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005876:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800587a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800588e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1d9      	bne.n	800584a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d013      	beq.n	80058c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a2:	4a7e      	ldr	r2, [pc, #504]	@ (8005a9c <HAL_UART_IRQHandler+0x3e0>)
 80058a4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fd fad8 	bl	8002e60 <HAL_DMA_Abort_IT>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d016      	beq.n	80058e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058c0:	4610      	mov	r0, r2
 80058c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c4:	e00e      	b.n	80058e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f993 	bl	8005bf2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058cc:	e00a      	b.n	80058e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f98f 	bl	8005bf2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d4:	e006      	b.n	80058e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f98b 	bl	8005bf2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80058e2:	e175      	b.n	8005bd0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e4:	bf00      	nop
    return;
 80058e6:	e173      	b.n	8005bd0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	f040 814f 	bne.w	8005b90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f6:	f003 0310 	and.w	r3, r3, #16
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 8148 	beq.w	8005b90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 8141 	beq.w	8005b90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800590e:	2300      	movs	r3, #0
 8005910:	60bb      	str	r3, [r7, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	60bb      	str	r3, [r7, #8]
 8005922:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 80b6 	beq.w	8005aa0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005940:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8145 	beq.w	8005bd4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800594e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005952:	429a      	cmp	r2, r3
 8005954:	f080 813e 	bcs.w	8005bd4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800595e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	2b20      	cmp	r3, #32
 8005968:	f000 8088 	beq.w	8005a7c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800597a:	e853 3f00 	ldrex	r3, [r3]
 800597e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005982:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005986:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800598a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	330c      	adds	r3, #12
 8005994:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005998:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800599c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1d9      	bne.n	800596c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3314      	adds	r3, #20
 80059be:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059c2:	e853 3f00 	ldrex	r3, [r3]
 80059c6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059ca:	f023 0301 	bic.w	r3, r3, #1
 80059ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3314      	adds	r3, #20
 80059d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059dc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e1      	bne.n	80059b8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3314      	adds	r3, #20
 80059fa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059fe:	e853 3f00 	ldrex	r3, [r3]
 8005a02:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3314      	adds	r3, #20
 8005a14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a18:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a1a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a1e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e3      	bne.n	80059f4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	330c      	adds	r3, #12
 8005a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a44:	e853 3f00 	ldrex	r3, [r3]
 8005a48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a4c:	f023 0310 	bic.w	r3, r3, #16
 8005a50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	330c      	adds	r3, #12
 8005a5a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a5e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a60:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e3      	bne.n	8005a3a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fd f9b7 	bl	8002dea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f8b6 	bl	8005c04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a98:	e09c      	b.n	8005bd4 <HAL_UART_IRQHandler+0x518>
 8005a9a:	bf00      	nop
 8005a9c:	08005e03 	.word	0x08005e03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 808e 	beq.w	8005bd8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005abc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 8089 	beq.w	8005bd8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	330c      	adds	r3, #12
 8005acc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005adc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005aea:	647a      	str	r2, [r7, #68]	@ 0x44
 8005aec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005af0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e3      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3314      	adds	r3, #20
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	f023 0301 	bic.w	r3, r3, #1
 8005b14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3314      	adds	r3, #20
 8005b1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b22:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1e3      	bne.n	8005afe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	330c      	adds	r3, #12
 8005b4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0310 	bic.w	r3, r3, #16
 8005b5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	330c      	adds	r3, #12
 8005b64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b68:	61fa      	str	r2, [r7, #28]
 8005b6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	69b9      	ldr	r1, [r7, #24]
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	e841 2300 	strex	r3, r2, [r1]
 8005b74:	617b      	str	r3, [r7, #20]
   return(result);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e3      	bne.n	8005b44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f83b 	bl	8005c04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b8e:	e023      	b.n	8005bd8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d009      	beq.n	8005bb0 <HAL_UART_IRQHandler+0x4f4>
 8005b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f93e 	bl	8005e2a <UART_Transmit_IT>
    return;
 8005bae:	e014      	b.n	8005bda <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00e      	beq.n	8005bda <HAL_UART_IRQHandler+0x51e>
 8005bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f97d 	bl	8005ec8 <UART_EndTransmit_IT>
    return;
 8005bce:	e004      	b.n	8005bda <HAL_UART_IRQHandler+0x51e>
    return;
 8005bd0:	bf00      	nop
 8005bd2:	e002      	b.n	8005bda <HAL_UART_IRQHandler+0x51e>
      return;
 8005bd4:	bf00      	nop
 8005bd6:	e000      	b.n	8005bda <HAL_UART_IRQHandler+0x51e>
      return;
 8005bd8:	bf00      	nop
  }
}
 8005bda:	37e8      	adds	r7, #232	@ 0xe8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc80      	pop	{r7}
 8005bf0:	4770      	bx	lr

08005bf2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr

08005c04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr

08005c1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b086      	sub	sp, #24
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	603b      	str	r3, [r7, #0]
 8005c26:	4613      	mov	r3, r2
 8005c28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c2a:	e03b      	b.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d037      	beq.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c34:	f7fc fca6 	bl	8002584 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	6a3a      	ldr	r2, [r7, #32]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d302      	bcc.n	8005c4a <UART_WaitOnFlagUntilTimeout+0x30>
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e03a      	b.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d023      	beq.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b80      	cmp	r3, #128	@ 0x80
 8005c60:	d020      	beq.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b40      	cmp	r3, #64	@ 0x40
 8005c66:	d01d      	beq.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d116      	bne.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c76:	2300      	movs	r3, #0
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f856 	bl	8005d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2208      	movs	r2, #8
 8005c96:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e00f      	b.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	4013      	ands	r3, r2
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	bf0c      	ite	eq
 8005cb4:	2301      	moveq	r3, #1
 8005cb6:	2300      	movne	r3, #0
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	461a      	mov	r2, r3
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d0b4      	beq.n	8005c2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	88fa      	ldrh	r2, [r7, #6]
 8005ce4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	88fa      	ldrh	r2, [r7, #6]
 8005cea:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2222      	movs	r2, #34	@ 0x22
 8005cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d10:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695a      	ldr	r2, [r3, #20]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0201 	orr.w	r2, r2, #1
 8005d20:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0220 	orr.w	r2, r2, #32
 8005d30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bc80      	pop	{r7}
 8005d3c:	4770      	bx	lr

08005d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b095      	sub	sp, #84	@ 0x54
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	330c      	adds	r3, #12
 8005d64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d66:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e5      	bne.n	8005d46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3314      	adds	r3, #20
 8005d80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3314      	adds	r3, #20
 8005d98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e5      	bne.n	8005d7a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d119      	bne.n	8005dea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	330c      	adds	r3, #12
 8005dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f023 0310 	bic.w	r3, r3, #16
 8005dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	330c      	adds	r3, #12
 8005dd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dd6:	61ba      	str	r2, [r7, #24]
 8005dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6979      	ldr	r1, [r7, #20]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	613b      	str	r3, [r7, #16]
   return(result);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e5      	bne.n	8005db6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005df8:	bf00      	nop
 8005dfa:	3754      	adds	r7, #84	@ 0x54
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bc80      	pop	{r7}
 8005e00:	4770      	bx	lr

08005e02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f7ff fee8 	bl	8005bf2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b21      	cmp	r3, #33	@ 0x21
 8005e3c:	d13e      	bne.n	8005ebc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e46:	d114      	bne.n	8005e72 <UART_Transmit_IT+0x48>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d110      	bne.n	8005e72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	1c9a      	adds	r2, r3, #2
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	621a      	str	r2, [r3, #32]
 8005e70:	e008      	b.n	8005e84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	1c59      	adds	r1, r3, #1
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6211      	str	r1, [r2, #32]
 8005e7c:	781a      	ldrb	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	4619      	mov	r1, r3
 8005e92:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10f      	bne.n	8005eb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ea6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e000      	b.n	8005ebe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ebc:	2302      	movs	r3, #2
  }
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bc80      	pop	{r7}
 8005ec6:	4770      	bx	lr

08005ec8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ede:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff fe79 	bl	8005be0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08c      	sub	sp, #48	@ 0x30
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b22      	cmp	r3, #34	@ 0x22
 8005f0a:	f040 80ae 	bne.w	800606a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f16:	d117      	bne.n	8005f48 <UART_Receive_IT+0x50>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d113      	bne.n	8005f48 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f20:	2300      	movs	r3, #0
 8005f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f28:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f40:	1c9a      	adds	r2, r3, #2
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f46:	e026      	b.n	8005f96 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f5a:	d007      	beq.n	8005f6c <UART_Receive_IT+0x74>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <UART_Receive_IT+0x82>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d106      	bne.n	8005f7a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	e008      	b.n	8005f8c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d15d      	bne.n	8006066 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0220 	bic.w	r2, r2, #32
 8005fb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695a      	ldr	r2, [r3, #20]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0201 	bic.w	r2, r2, #1
 8005fd8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d135      	bne.n	800605c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	330c      	adds	r3, #12
 8005ffc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	e853 3f00 	ldrex	r3, [r3]
 8006004:	613b      	str	r3, [r7, #16]
   return(result);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f023 0310 	bic.w	r3, r3, #16
 800600c:	627b      	str	r3, [r7, #36]	@ 0x24
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	330c      	adds	r3, #12
 8006014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006016:	623a      	str	r2, [r7, #32]
 8006018:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	69f9      	ldr	r1, [r7, #28]
 800601c:	6a3a      	ldr	r2, [r7, #32]
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	61bb      	str	r3, [r7, #24]
   return(result);
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1e5      	bne.n	8005ff6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b10      	cmp	r3, #16
 8006036:	d10a      	bne.n	800604e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff fdd5 	bl	8005c04 <HAL_UARTEx_RxEventCallback>
 800605a:	e002      	b.n	8006062 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7fb f99d 	bl	800139c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	e002      	b.n	800606c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	e000      	b.n	800606c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800606a:	2302      	movs	r3, #2
  }
}
 800606c:	4618      	mov	r0, r3
 800606e:	3730      	adds	r7, #48	@ 0x30
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	431a      	orrs	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80060ae:	f023 030c 	bic.w	r3, r3, #12
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6812      	ldr	r2, [r2, #0]
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	430b      	orrs	r3, r1
 80060ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a2c      	ldr	r2, [pc, #176]	@ (8006188 <UART_SetConfig+0x114>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d103      	bne.n	80060e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80060dc:	f7fe fe98 	bl	8004e10 <HAL_RCC_GetPCLK2Freq>
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	e002      	b.n	80060ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80060e4:	f7fe fe80 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 80060e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	009a      	lsls	r2, r3, #2
 80060f4:	441a      	add	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006100:	4a22      	ldr	r2, [pc, #136]	@ (800618c <UART_SetConfig+0x118>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	0119      	lsls	r1, r3, #4
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	009a      	lsls	r2, r3, #2
 8006114:	441a      	add	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006120:	4b1a      	ldr	r3, [pc, #104]	@ (800618c <UART_SetConfig+0x118>)
 8006122:	fba3 0302 	umull	r0, r3, r3, r2
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	2064      	movs	r0, #100	@ 0x64
 800612a:	fb00 f303 	mul.w	r3, r0, r3
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	3332      	adds	r3, #50	@ 0x32
 8006134:	4a15      	ldr	r2, [pc, #84]	@ (800618c <UART_SetConfig+0x118>)
 8006136:	fba2 2303 	umull	r2, r3, r2, r3
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006140:	4419      	add	r1, r3
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009a      	lsls	r2, r3, #2
 800614c:	441a      	add	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	fbb2 f2f3 	udiv	r2, r2, r3
 8006158:	4b0c      	ldr	r3, [pc, #48]	@ (800618c <UART_SetConfig+0x118>)
 800615a:	fba3 0302 	umull	r0, r3, r3, r2
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	2064      	movs	r0, #100	@ 0x64
 8006162:	fb00 f303 	mul.w	r3, r0, r3
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	3332      	adds	r3, #50	@ 0x32
 800616c:	4a07      	ldr	r2, [pc, #28]	@ (800618c <UART_SetConfig+0x118>)
 800616e:	fba2 2303 	umull	r2, r3, r2, r3
 8006172:	095b      	lsrs	r3, r3, #5
 8006174:	f003 020f 	and.w	r2, r3, #15
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	440a      	add	r2, r1
 800617e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40013800 	.word	0x40013800
 800618c:	51eb851f 	.word	0x51eb851f

08006190 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800619e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061a2:	2b84      	cmp	r3, #132	@ 0x84
 80061a4:	d005      	beq.n	80061b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80061a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	3303      	adds	r3, #3
 80061b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80061b2:	68fb      	ldr	r3, [r7, #12]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bc80      	pop	{r7}
 80061bc:	4770      	bx	lr

080061be <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061c4:	f3ef 8305 	mrs	r3, IPSR
 80061c8:	607b      	str	r3, [r7, #4]
  return(result);
 80061ca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bf14      	ite	ne
 80061d0:	2301      	movne	r3, #1
 80061d2:	2300      	moveq	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr

080061e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80061e4:	f001 fbf6 	bl	80079d4 <vTaskStartScheduler>
  
  return osOK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	bd80      	pop	{r7, pc}

080061ee <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80061f2:	f7ff ffe4 	bl	80061be <inHandlerMode>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80061fc:	f001 fcf8 	bl	8007bf0 <xTaskGetTickCountFromISR>
 8006200:	4603      	mov	r3, r0
 8006202:	e002      	b.n	800620a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006204:	f001 fce6 	bl	8007bd4 <xTaskGetTickCount>
 8006208:	4603      	mov	r3, r0
  }
}
 800620a:	4618      	mov	r0, r3
 800620c:	bd80      	pop	{r7, pc}

0800620e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800620e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006210:	b089      	sub	sp, #36	@ 0x24
 8006212:	af04      	add	r7, sp, #16
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d020      	beq.n	8006262 <osThreadCreate+0x54>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01c      	beq.n	8006262 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685c      	ldr	r4, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691e      	ldr	r6, [r3, #16]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff ffa8 	bl	8006190 <makeFreeRtosPriority>
 8006240:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800624a:	9202      	str	r2, [sp, #8]
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	9100      	str	r1, [sp, #0]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	4632      	mov	r2, r6
 8006254:	4629      	mov	r1, r5
 8006256:	4620      	mov	r0, r4
 8006258:	f001 f95f 	bl	800751a <xTaskCreateStatic>
 800625c:	4603      	mov	r3, r0
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	e01c      	b.n	800629c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685c      	ldr	r4, [r3, #4]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800626e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff ff8a 	bl	8006190 <makeFreeRtosPriority>
 800627c:	4602      	mov	r2, r0
 800627e:	f107 030c 	add.w	r3, r7, #12
 8006282:	9301      	str	r3, [sp, #4]
 8006284:	9200      	str	r2, [sp, #0]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	4632      	mov	r2, r6
 800628a:	4629      	mov	r1, r5
 800628c:	4620      	mov	r0, r4
 800628e:	f001 f9a4 	bl	80075da <xTaskCreate>
 8006292:	4603      	mov	r3, r0
 8006294:	2b01      	cmp	r3, #1
 8006296:	d001      	beq.n	800629c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006298:	2300      	movs	r3, #0
 800629a:	e000      	b.n	800629e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800629c:	68fb      	ldr	r3, [r7, #12]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062a6 <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	460b      	mov	r3, r1
 80062b0:	807b      	strh	r3, [r7, #2]
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 80062b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff ff6a 	bl	8006190 <makeFreeRtosPriority>
 80062bc:	4603      	mov	r3, r0
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f001 fae9 	bl	8007898 <vTaskPrioritySet>
  return osOK;
 80062c6:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <osDelay+0x16>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	e000      	b.n	80062e8 <osDelay+0x18>
 80062e6:	2301      	movs	r3, #1
 80062e8:	4618      	mov	r0, r3
 80062ea:	f001 fa9f 	bl	800782c <vTaskDelay>
  
  return osOK;
 80062ee:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00f      	beq.n	800632a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d10a      	bne.n	8006326 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2203      	movs	r2, #3
 8006316:	9200      	str	r2, [sp, #0]
 8006318:	2200      	movs	r2, #0
 800631a:	2100      	movs	r1, #0
 800631c:	2001      	movs	r0, #1
 800631e:	f000 fa88 	bl	8006832 <xQueueGenericCreateStatic>
 8006322:	4603      	mov	r3, r0
 8006324:	e016      	b.n	8006354 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	e014      	b.n	8006354 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d110      	bne.n	8006352 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006330:	2203      	movs	r2, #3
 8006332:	2100      	movs	r1, #0
 8006334:	2001      	movs	r0, #1
 8006336:	f000 faf9 	bl	800692c <xQueueGenericCreate>
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d005      	beq.n	800634e <osSemaphoreCreate+0x56>
 8006342:	2300      	movs	r3, #0
 8006344:	2200      	movs	r2, #0
 8006346:	2100      	movs	r1, #0
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 fb49 	bl	80069e0 <xQueueGenericSend>
      return sema;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	e000      	b.n	8006354 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006352:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006366:	2300      	movs	r3, #0
 8006368:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006370:	2380      	movs	r3, #128	@ 0x80
 8006372:	e03a      	b.n	80063ea <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006374:	2300      	movs	r3, #0
 8006376:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637e:	d103      	bne.n	8006388 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006380:	f04f 33ff 	mov.w	r3, #4294967295
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	e009      	b.n	800639c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d006      	beq.n	800639c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <osSemaphoreWait+0x40>
      ticks = 1;
 8006398:	2301      	movs	r3, #1
 800639a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800639c:	f7ff ff0f 	bl	80061be <inHandlerMode>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d017      	beq.n	80063d6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80063a6:	f107 0308 	add.w	r3, r7, #8
 80063aa:	461a      	mov	r2, r3
 80063ac:	2100      	movs	r1, #0
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 ff0a 	bl	80071c8 <xQueueReceiveFromISR>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d001      	beq.n	80063be <osSemaphoreWait+0x62>
      return osErrorOS;
 80063ba:	23ff      	movs	r3, #255	@ 0xff
 80063bc:	e015      	b.n	80063ea <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d011      	beq.n	80063e8 <osSemaphoreWait+0x8c>
 80063c4:	4b0b      	ldr	r3, [pc, #44]	@ (80063f4 <osSemaphoreWait+0x98>)
 80063c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	e008      	b.n	80063e8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80063d6:	68f9      	ldr	r1, [r7, #12]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fdf1 	bl	8006fc0 <xQueueSemaphoreTake>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d001      	beq.n	80063e8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80063e4:	23ff      	movs	r3, #255	@ 0xff
 80063e6:	e000      	b.n	80063ea <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	e000ed04 	.word	0xe000ed04

080063f8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006404:	2300      	movs	r3, #0
 8006406:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006408:	f7ff fed9 	bl	80061be <inHandlerMode>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d016      	beq.n	8006440 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006412:	f107 0308 	add.w	r3, r7, #8
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fc69 	bl	8006cf0 <xQueueGiveFromISR>
 800641e:	4603      	mov	r3, r0
 8006420:	2b01      	cmp	r3, #1
 8006422:	d001      	beq.n	8006428 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006424:	23ff      	movs	r3, #255	@ 0xff
 8006426:	e017      	b.n	8006458 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d013      	beq.n	8006456 <osSemaphoreRelease+0x5e>
 800642e:	4b0c      	ldr	r3, [pc, #48]	@ (8006460 <osSemaphoreRelease+0x68>)
 8006430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	e00a      	b.n	8006456 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006440:	2300      	movs	r3, #0
 8006442:	2200      	movs	r2, #0
 8006444:	2100      	movs	r1, #0
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 faca 	bl	80069e0 <xQueueGenericSend>
 800644c:	4603      	mov	r3, r0
 800644e:	2b01      	cmp	r3, #1
 8006450:	d001      	beq.n	8006456 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006452:	23ff      	movs	r3, #255	@ 0xff
 8006454:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006456:	68fb      	ldr	r3, [r7, #12]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	e000ed04 	.word	0xe000ed04

08006464 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006464:	b590      	push	{r4, r7, lr}
 8006466:	b085      	sub	sp, #20
 8006468:	af02      	add	r7, sp, #8
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d011      	beq.n	800649a <osMessageCreate+0x36>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00d      	beq.n	800649a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6859      	ldr	r1, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	2400      	movs	r4, #0
 8006490:	9400      	str	r4, [sp, #0]
 8006492:	f000 f9ce 	bl	8006832 <xQueueGenericCreateStatic>
 8006496:	4603      	mov	r3, r0
 8006498:	e008      	b.n	80064ac <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	4619      	mov	r1, r3
 80064a6:	f000 fa41 	bl	800692c <xQueueGenericCreate>
 80064aa:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd90      	pop	{r4, r7, pc}

080064b4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <osMessagePut+0x1e>
    ticks = 1;
 80064ce:	2301      	movs	r3, #1
 80064d0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80064d2:	f7ff fe74 	bl	80061be <inHandlerMode>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d018      	beq.n	800650e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80064dc:	f107 0210 	add.w	r2, r7, #16
 80064e0:	f107 0108 	add.w	r1, r7, #8
 80064e4:	2300      	movs	r3, #0
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fb64 	bl	8006bb4 <xQueueGenericSendFromISR>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d001      	beq.n	80064f6 <osMessagePut+0x42>
      return osErrorOS;
 80064f2:	23ff      	movs	r3, #255	@ 0xff
 80064f4:	e018      	b.n	8006528 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d014      	beq.n	8006526 <osMessagePut+0x72>
 80064fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006530 <osMessagePut+0x7c>)
 80064fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	e00b      	b.n	8006526 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800650e:	f107 0108 	add.w	r1, r7, #8
 8006512:	2300      	movs	r3, #0
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 fa62 	bl	80069e0 <xQueueGenericSend>
 800651c:	4603      	mov	r3, r0
 800651e:	2b01      	cmp	r3, #1
 8006520:	d001      	beq.n	8006526 <osMessagePut+0x72>
      return osErrorOS;
 8006522:	23ff      	movs	r3, #255	@ 0xff
 8006524:	e000      	b.n	8006528 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	e000ed04 	.word	0xe000ed04

08006534 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006534:	b590      	push	{r4, r7, lr}
 8006536:	b08b      	sub	sp, #44	@ 0x2c
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800654e:	2380      	movs	r3, #128	@ 0x80
 8006550:	617b      	str	r3, [r7, #20]
    return event;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	461c      	mov	r4, r3
 8006556:	f107 0314 	add.w	r3, r7, #20
 800655a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800655e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006562:	e054      	b.n	800660e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006564:	2300      	movs	r3, #0
 8006566:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006572:	d103      	bne.n	800657c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006574:	f04f 33ff 	mov.w	r3, #4294967295
 8006578:	627b      	str	r3, [r7, #36]	@ 0x24
 800657a:	e009      	b.n	8006590 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d006      	beq.n	8006590 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <osMessageGet+0x5c>
      ticks = 1;
 800658c:	2301      	movs	r3, #1
 800658e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006590:	f7ff fe15 	bl	80061be <inHandlerMode>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d01c      	beq.n	80065d4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800659a:	f107 0220 	add.w	r2, r7, #32
 800659e:	f107 0314 	add.w	r3, r7, #20
 80065a2:	3304      	adds	r3, #4
 80065a4:	4619      	mov	r1, r3
 80065a6:	68b8      	ldr	r0, [r7, #8]
 80065a8:	f000 fe0e 	bl	80071c8 <xQueueReceiveFromISR>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d102      	bne.n	80065b8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80065b2:	2310      	movs	r3, #16
 80065b4:	617b      	str	r3, [r7, #20]
 80065b6:	e001      	b.n	80065bc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d01d      	beq.n	80065fe <osMessageGet+0xca>
 80065c2:	4b15      	ldr	r3, [pc, #84]	@ (8006618 <osMessageGet+0xe4>)
 80065c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	e014      	b.n	80065fe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80065d4:	f107 0314 	add.w	r3, r7, #20
 80065d8:	3304      	adds	r3, #4
 80065da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065dc:	4619      	mov	r1, r3
 80065de:	68b8      	ldr	r0, [r7, #8]
 80065e0:	f000 fc16 	bl	8006e10 <xQueueReceive>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d102      	bne.n	80065f0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80065ea:	2310      	movs	r3, #16
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	e006      	b.n	80065fe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80065f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <osMessageGet+0xc6>
 80065f6:	2300      	movs	r3, #0
 80065f8:	e000      	b.n	80065fc <osMessageGet+0xc8>
 80065fa:	2340      	movs	r3, #64	@ 0x40
 80065fc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	461c      	mov	r4, r3
 8006602:	f107 0314 	add.w	r3, r7, #20
 8006606:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800660a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	372c      	adds	r7, #44	@ 0x2c
 8006612:	46bd      	mov	sp, r7
 8006614:	bd90      	pop	{r4, r7, pc}
 8006616:	bf00      	nop
 8006618:	e000ed04 	.word	0xe000ed04

0800661c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f103 0208 	add.w	r2, r3, #8
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f04f 32ff 	mov.w	r2, #4294967295
 8006634:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f103 0208 	add.w	r2, r3, #8
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f103 0208 	add.w	r2, r3, #8
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	bc80      	pop	{r7}
 8006658:	4770      	bx	lr

0800665a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr

08006672 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	601a      	str	r2, [r3, #0]
}
 80066ae:	bf00      	nop
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ce:	d103      	bne.n	80066d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	e00c      	b.n	80066f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3308      	adds	r3, #8
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	e002      	b.n	80066e6 <vListInsert+0x2e>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d2f6      	bcs.n	80066e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	601a      	str	r2, [r3, #0]
}
 800671e:	bf00      	nop
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6892      	ldr	r2, [r2, #8]
 800673e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6852      	ldr	r2, [r2, #4]
 8006748:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	429a      	cmp	r2, r3
 8006752:	d103      	bne.n	800675c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	1e5a      	subs	r2, r3, #1
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	bc80      	pop	{r7}
 8006778:	4770      	bx	lr

0800677a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10b      	bne.n	80067a6 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067a0:	bf00      	nop
 80067a2:	bf00      	nop
 80067a4:	e7fd      	b.n	80067a2 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80067a6:	f002 f821 	bl	80087ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b2:	68f9      	ldr	r1, [r7, #12]
 80067b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80067b6:	fb01 f303 	mul.w	r3, r1, r3
 80067ba:	441a      	add	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d6:	3b01      	subs	r3, #1
 80067d8:	68f9      	ldr	r1, [r7, #12]
 80067da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80067dc:	fb01 f303 	mul.w	r3, r1, r3
 80067e0:	441a      	add	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	22ff      	movs	r2, #255	@ 0xff
 80067ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	22ff      	movs	r2, #255	@ 0xff
 80067f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d109      	bne.n	8006810 <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00f      	beq.n	8006824 <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3310      	adds	r3, #16
 8006808:	4618      	mov	r0, r3
 800680a:	f001 fb1b 	bl	8007e44 <xTaskRemoveFromEventList>
 800680e:	e009      	b.n	8006824 <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3310      	adds	r3, #16
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff ff01 	bl	800661c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	3324      	adds	r3, #36	@ 0x24
 800681e:	4618      	mov	r0, r3
 8006820:	f7ff fefc 	bl	800661c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006824:	f002 f812 	bl	800884c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006828:	2301      	movs	r3, #1
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006832:	b580      	push	{r7, lr}
 8006834:	b08e      	sub	sp, #56	@ 0x38
 8006836:	af02      	add	r7, sp, #8
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	607a      	str	r2, [r7, #4]
 800683e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10b      	bne.n	800685e <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	e7fd      	b.n	800685a <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10b      	bne.n	800687c <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006876:	bf00      	nop
 8006878:	bf00      	nop
 800687a:	e7fd      	b.n	8006878 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <xQueueGenericCreateStatic+0x56>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <xQueueGenericCreateStatic+0x5a>
 8006888:	2301      	movs	r3, #1
 800688a:	e000      	b.n	800688e <xQueueGenericCreateStatic+0x5c>
 800688c:	2300      	movs	r3, #0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10b      	bne.n	80068aa <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	623b      	str	r3, [r7, #32]
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	e7fd      	b.n	80068a6 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <xQueueGenericCreateStatic+0x84>
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <xQueueGenericCreateStatic+0x88>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e000      	b.n	80068bc <xQueueGenericCreateStatic+0x8a>
 80068ba:	2300      	movs	r3, #0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10b      	bne.n	80068d8 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	61fb      	str	r3, [r7, #28]
}
 80068d2:	bf00      	nop
 80068d4:	bf00      	nop
 80068d6:	e7fd      	b.n	80068d4 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80068d8:	2348      	movs	r3, #72	@ 0x48
 80068da:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b48      	cmp	r3, #72	@ 0x48
 80068e0:	d00b      	beq.n	80068fa <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	61bb      	str	r3, [r7, #24]
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop
 80068f8:	e7fd      	b.n	80068f6 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80068fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00d      	beq.n	8006922 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800690e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	4613      	mov	r3, r2
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	68b9      	ldr	r1, [r7, #8]
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 f840 	bl	80069a2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006924:	4618      	mov	r0, r3
 8006926:	3730      	adds	r7, #48	@ 0x30
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08a      	sub	sp, #40	@ 0x28
 8006930:	af02      	add	r7, sp, #8
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	4613      	mov	r3, r2
 8006938:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10b      	bne.n	8006958 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	613b      	str	r3, [r7, #16]
}
 8006952:	bf00      	nop
 8006954:	bf00      	nop
 8006956:	e7fd      	b.n	8006954 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	fb02 f303 	mul.w	r3, r2, r3
 8006960:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	3348      	adds	r3, #72	@ 0x48
 8006966:	4618      	mov	r0, r3
 8006968:	f002 f842 	bl	80089f0 <pvPortMalloc>
 800696c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d011      	beq.n	8006998 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	3348      	adds	r3, #72	@ 0x48
 800697c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006986:	79fa      	ldrb	r2, [r7, #7]
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	4613      	mov	r3, r2
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 f805 	bl	80069a2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006998:	69bb      	ldr	r3, [r7, #24]
	}
 800699a:	4618      	mov	r0, r3
 800699c:	3720      	adds	r7, #32
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	607a      	str	r2, [r7, #4]
 80069ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d103      	bne.n	80069be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	e002      	b.n	80069c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069d0:	2101      	movs	r1, #1
 80069d2:	69b8      	ldr	r0, [r7, #24]
 80069d4:	f7ff fed1 	bl	800677a <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069d8:	bf00      	nop
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08e      	sub	sp, #56	@ 0x38
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069ee:	2300      	movs	r3, #0
 80069f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80069f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10b      	bne.n	8006a14 <xQueueGenericSend+0x34>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a0e:	bf00      	nop
 8006a10:	bf00      	nop
 8006a12:	e7fd      	b.n	8006a10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d103      	bne.n	8006a22 <xQueueGenericSend+0x42>
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <xQueueGenericSend+0x46>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <xQueueGenericSend+0x48>
 8006a26:	2300      	movs	r3, #0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10b      	bne.n	8006a44 <xQueueGenericSend+0x64>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a3e:	bf00      	nop
 8006a40:	bf00      	nop
 8006a42:	e7fd      	b.n	8006a40 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d103      	bne.n	8006a52 <xQueueGenericSend+0x72>
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <xQueueGenericSend+0x76>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <xQueueGenericSend+0x78>
 8006a56:	2300      	movs	r3, #0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10b      	bne.n	8006a74 <xQueueGenericSend+0x94>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	623b      	str	r3, [r7, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	bf00      	nop
 8006a72:	e7fd      	b.n	8006a70 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a74:	f001 fba0 	bl	80081b8 <xTaskGetSchedulerState>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <xQueueGenericSend+0xa4>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <xQueueGenericSend+0xa8>
 8006a84:	2301      	movs	r3, #1
 8006a86:	e000      	b.n	8006a8a <xQueueGenericSend+0xaa>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10b      	bne.n	8006aa6 <xQueueGenericSend+0xc6>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	61fb      	str	r3, [r7, #28]
}
 8006aa0:	bf00      	nop
 8006aa2:	bf00      	nop
 8006aa4:	e7fd      	b.n	8006aa2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006aa6:	f001 fea1 	bl	80087ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d302      	bcc.n	8006abc <xQueueGenericSend+0xdc>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d112      	bne.n	8006ae2 <xQueueGenericSend+0x102>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ac2:	f000 fc1a 	bl	80072fa <prvCopyDataToQueue>
 8006ac6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d004      	beq.n	8006ada <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad2:	3324      	adds	r3, #36	@ 0x24
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 f9b5 	bl	8007e44 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ada:	f001 feb7 	bl	800884c <vPortExitCritical>
				return pdPASS;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e062      	b.n	8006ba8 <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d103      	bne.n	8006af0 <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ae8:	f001 feb0 	bl	800884c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006aec:	2300      	movs	r3, #0
 8006aee:	e05b      	b.n	8006ba8 <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d106      	bne.n	8006b04 <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006af6:	f107 0314 	add.w	r3, r7, #20
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 fa06 	bl	8007f0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b00:	2301      	movs	r3, #1
 8006b02:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b04:	f001 fea2 	bl	800884c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b08:	f000 ffc6 	bl	8007a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b0c:	f001 fe6e 	bl	80087ec <vPortEnterCritical>
 8006b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b16:	b25b      	sxtb	r3, r3
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	d103      	bne.n	8006b26 <xQueueGenericSend+0x146>
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b2c:	b25b      	sxtb	r3, r3
 8006b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b32:	d103      	bne.n	8006b3c <xQueueGenericSend+0x15c>
 8006b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b3c:	f001 fe86 	bl	800884c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b40:	1d3a      	adds	r2, r7, #4
 8006b42:	f107 0314 	add.w	r3, r7, #20
 8006b46:	4611      	mov	r1, r2
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f001 f9f5 	bl	8007f38 <xTaskCheckForTimeOut>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d123      	bne.n	8006b9c <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b56:	f000 fcc8 	bl	80074ea <prvIsQueueFull>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d017      	beq.n	8006b90 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b62:	3310      	adds	r3, #16
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	4611      	mov	r1, r2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f001 f945 	bl	8007df8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b70:	f000 fc53 	bl	800741a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b74:	f000 ff9e 	bl	8007ab4 <xTaskResumeAll>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d193      	bne.n	8006aa6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006bb0 <xQueueGenericSend+0x1d0>)
 8006b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	e78a      	b.n	8006aa6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b92:	f000 fc42 	bl	800741a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b96:	f000 ff8d 	bl	8007ab4 <xTaskResumeAll>
 8006b9a:	e784      	b.n	8006aa6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b9e:	f000 fc3c 	bl	800741a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ba2:	f000 ff87 	bl	8007ab4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ba6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3738      	adds	r7, #56	@ 0x38
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	e000ed04 	.word	0xe000ed04

08006bb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b090      	sub	sp, #64	@ 0x40
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10b      	bne.n	8006be4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006bde:	bf00      	nop
 8006be0:	bf00      	nop
 8006be2:	e7fd      	b.n	8006be0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d103      	bne.n	8006bf2 <xQueueGenericSendFromISR+0x3e>
 8006bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <xQueueGenericSendFromISR+0x42>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e000      	b.n	8006bf8 <xQueueGenericSendFromISR+0x44>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10b      	bne.n	8006c14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c0e:	bf00      	nop
 8006c10:	bf00      	nop
 8006c12:	e7fd      	b.n	8006c10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d103      	bne.n	8006c22 <xQueueGenericSendFromISR+0x6e>
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d101      	bne.n	8006c26 <xQueueGenericSendFromISR+0x72>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <xQueueGenericSendFromISR+0x74>
 8006c26:	2300      	movs	r3, #0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10b      	bne.n	8006c44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	623b      	str	r3, [r7, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	bf00      	nop
 8006c42:	e7fd      	b.n	8006c40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c44:	f001 fe94 	bl	8008970 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c48:	f3ef 8211 	mrs	r2, BASEPRI
 8006c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	61fa      	str	r2, [r7, #28]
 8006c5e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d302      	bcc.n	8006c76 <xQueueGenericSendFromISR+0xc2>
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d12f      	bne.n	8006cd6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006c8c:	f000 fb35 	bl	80072fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c98:	d112      	bne.n	8006cc0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d016      	beq.n	8006cd0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca4:	3324      	adds	r3, #36	@ 0x24
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f001 f8cc 	bl	8007e44 <xTaskRemoveFromEventList>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00e      	beq.n	8006cd0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00b      	beq.n	8006cd0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	e007      	b.n	8006cd0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	b25a      	sxtb	r2, r3
 8006cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006cd4:	e001      	b.n	8006cda <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cdc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ce4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3740      	adds	r7, #64	@ 0x40
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08e      	sub	sp, #56	@ 0x38
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10b      	bne.n	8006d1c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	623b      	str	r3, [r7, #32]
}
 8006d16:	bf00      	nop
 8006d18:	bf00      	nop
 8006d1a:	e7fd      	b.n	8006d18 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00b      	beq.n	8006d3c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	61fb      	str	r3, [r7, #28]
}
 8006d36:	bf00      	nop
 8006d38:	bf00      	nop
 8006d3a:	e7fd      	b.n	8006d38 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d103      	bne.n	8006d4c <xQueueGiveFromISR+0x5c>
 8006d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <xQueueGiveFromISR+0x60>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e000      	b.n	8006d52 <xQueueGiveFromISR+0x62>
 8006d50:	2300      	movs	r3, #0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10b      	bne.n	8006d6e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	61bb      	str	r3, [r7, #24]
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	e7fd      	b.n	8006d6a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d6e:	f001 fdff 	bl	8008970 <vPortValidateInterruptPriority>
	__asm volatile
 8006d72:	f3ef 8211 	mrs	r2, BASEPRI
 8006d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	617a      	str	r2, [r7, #20]
 8006d88:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006d8a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d92:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d22b      	bcs.n	8006df6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006db0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db8:	d112      	bne.n	8006de0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d016      	beq.n	8006df0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc4:	3324      	adds	r3, #36	@ 0x24
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f001 f83c 	bl	8007e44 <xTaskRemoveFromEventList>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00e      	beq.n	8006df0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00b      	beq.n	8006df0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	e007      	b.n	8006df0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006de4:	3301      	adds	r3, #1
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	b25a      	sxtb	r2, r3
 8006dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006df0:	2301      	movs	r3, #1
 8006df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df4:	e001      	b.n	8006dfa <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f383 8811 	msr	BASEPRI, r3
}
 8006e04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3738      	adds	r7, #56	@ 0x38
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08c      	sub	sp, #48	@ 0x30
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10b      	bne.n	8006e42 <xQueueReceive+0x32>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	623b      	str	r3, [r7, #32]
}
 8006e3c:	bf00      	nop
 8006e3e:	bf00      	nop
 8006e40:	e7fd      	b.n	8006e3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d103      	bne.n	8006e50 <xQueueReceive+0x40>
 8006e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <xQueueReceive+0x44>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <xQueueReceive+0x46>
 8006e54:	2300      	movs	r3, #0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10b      	bne.n	8006e72 <xQueueReceive+0x62>
	__asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	61fb      	str	r3, [r7, #28]
}
 8006e6c:	bf00      	nop
 8006e6e:	bf00      	nop
 8006e70:	e7fd      	b.n	8006e6e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e72:	f001 f9a1 	bl	80081b8 <xTaskGetSchedulerState>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d102      	bne.n	8006e82 <xQueueReceive+0x72>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <xQueueReceive+0x76>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <xQueueReceive+0x78>
 8006e86:	2300      	movs	r3, #0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10b      	bne.n	8006ea4 <xQueueReceive+0x94>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	61bb      	str	r3, [r7, #24]
}
 8006e9e:	bf00      	nop
 8006ea0:	bf00      	nop
 8006ea2:	e7fd      	b.n	8006ea0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ea4:	f001 fca2 	bl	80087ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d014      	beq.n	8006ede <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006eb4:	68b9      	ldr	r1, [r7, #8]
 8006eb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006eb8:	f000 fa89 	bl	80073ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebe:	1e5a      	subs	r2, r3, #1
 8006ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d004      	beq.n	8006ed6 <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ece:	3310      	adds	r3, #16
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 ffb7 	bl	8007e44 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ed6:	f001 fcb9 	bl	800884c <vPortExitCritical>
				return pdPASS;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e069      	b.n	8006fb2 <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d103      	bne.n	8006eec <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ee4:	f001 fcb2 	bl	800884c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	e062      	b.n	8006fb2 <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ef2:	f107 0310 	add.w	r3, r7, #16
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f001 f808 	bl	8007f0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006efc:	2301      	movs	r3, #1
 8006efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f00:	f001 fca4 	bl	800884c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f04:	f000 fdc8 	bl	8007a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f08:	f001 fc70 	bl	80087ec <vPortEnterCritical>
 8006f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f12:	b25b      	sxtb	r3, r3
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d103      	bne.n	8006f22 <xQueueReceive+0x112>
 8006f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f28:	b25b      	sxtb	r3, r3
 8006f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2e:	d103      	bne.n	8006f38 <xQueueReceive+0x128>
 8006f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f38:	f001 fc88 	bl	800884c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f3c:	1d3a      	adds	r2, r7, #4
 8006f3e:	f107 0310 	add.w	r3, r7, #16
 8006f42:	4611      	mov	r1, r2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 fff7 	bl	8007f38 <xTaskCheckForTimeOut>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d123      	bne.n	8006f98 <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f52:	f000 fab4 	bl	80074be <prvIsQueueEmpty>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d017      	beq.n	8006f8c <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5e:	3324      	adds	r3, #36	@ 0x24
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	4611      	mov	r1, r2
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 ff47 	bl	8007df8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f6c:	f000 fa55 	bl	800741a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f70:	f000 fda0 	bl	8007ab4 <xTaskResumeAll>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d194      	bne.n	8006ea4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006f7a:	4b10      	ldr	r3, [pc, #64]	@ (8006fbc <xQueueReceive+0x1ac>)
 8006f7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	e78b      	b.n	8006ea4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f8e:	f000 fa44 	bl	800741a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f92:	f000 fd8f 	bl	8007ab4 <xTaskResumeAll>
 8006f96:	e785      	b.n	8006ea4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f9a:	f000 fa3e 	bl	800741a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f9e:	f000 fd89 	bl	8007ab4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fa4:	f000 fa8b 	bl	80074be <prvIsQueueEmpty>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f43f af7a 	beq.w	8006ea4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3730      	adds	r7, #48	@ 0x30
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08e      	sub	sp, #56	@ 0x38
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10b      	bne.n	8006ff4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	623b      	str	r3, [r7, #32]
}
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	e7fd      	b.n	8006ff0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00b      	beq.n	8007014 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	61fb      	str	r3, [r7, #28]
}
 800700e:	bf00      	nop
 8007010:	bf00      	nop
 8007012:	e7fd      	b.n	8007010 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007014:	f001 f8d0 	bl	80081b8 <xTaskGetSchedulerState>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d102      	bne.n	8007024 <xQueueSemaphoreTake+0x64>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <xQueueSemaphoreTake+0x68>
 8007024:	2301      	movs	r3, #1
 8007026:	e000      	b.n	800702a <xQueueSemaphoreTake+0x6a>
 8007028:	2300      	movs	r3, #0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10b      	bne.n	8007046 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	61bb      	str	r3, [r7, #24]
}
 8007040:	bf00      	nop
 8007042:	bf00      	nop
 8007044:	e7fd      	b.n	8007042 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007046:	f001 fbd1 	bl	80087ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800704a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	d019      	beq.n	800708a <xQueueSemaphoreTake+0xca>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007058:	1e5a      	subs	r2, r3, #1
 800705a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800705e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d104      	bne.n	8007070 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007066:	f001 fa53 	bl	8008510 <pvTaskIncrementMutexHeldCount>
 800706a:	4602      	mov	r2, r0
 800706c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d004      	beq.n	8007082 <xQueueSemaphoreTake+0xc2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707a:	3310      	adds	r3, #16
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fee1 	bl	8007e44 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007082:	f001 fbe3 	bl	800884c <vPortExitCritical>
				return pdPASS;
 8007086:	2301      	movs	r3, #1
 8007088:	e098      	b.n	80071bc <xQueueSemaphoreTake+0x1fc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d112      	bne.n	80070b6 <xQueueSemaphoreTake+0xf6>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00b      	beq.n	80070ae <xQueueSemaphoreTake+0xee>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	617b      	str	r3, [r7, #20]
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	e7fd      	b.n	80070aa <xQueueSemaphoreTake+0xea>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80070ae:	f001 fbcd 	bl	800884c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e082      	b.n	80071bc <xQueueSemaphoreTake+0x1fc>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d106      	bne.n	80070ca <xQueueSemaphoreTake+0x10a>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070bc:	f107 030c 	add.w	r3, r7, #12
 80070c0:	4618      	mov	r0, r3
 80070c2:	f000 ff23 	bl	8007f0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070c6:	2301      	movs	r3, #1
 80070c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070ca:	f001 fbbf 	bl	800884c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070ce:	f000 fce3 	bl	8007a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070d2:	f001 fb8b 	bl	80087ec <vPortEnterCritical>
 80070d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070dc:	b25b      	sxtb	r3, r3
 80070de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e2:	d103      	bne.n	80070ec <xQueueSemaphoreTake+0x12c>
 80070e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070f2:	b25b      	sxtb	r3, r3
 80070f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f8:	d103      	bne.n	8007102 <xQueueSemaphoreTake+0x142>
 80070fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007102:	f001 fba3 	bl	800884c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007106:	463a      	mov	r2, r7
 8007108:	f107 030c 	add.w	r3, r7, #12
 800710c:	4611      	mov	r1, r2
 800710e:	4618      	mov	r0, r3
 8007110:	f000 ff12 	bl	8007f38 <xTaskCheckForTimeOut>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d132      	bne.n	8007180 <xQueueSemaphoreTake+0x1c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800711a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800711c:	f000 f9cf 	bl	80074be <prvIsQueueEmpty>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d026      	beq.n	8007174 <xQueueSemaphoreTake+0x1b4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d109      	bne.n	8007142 <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 800712e:	f001 fb5d 	bl	80087ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	4618      	mov	r0, r3
 8007138:	f001 f85c 	bl	80081f4 <xTaskPriorityInherit>
 800713c:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800713e:	f001 fb85 	bl	800884c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007144:	3324      	adds	r3, #36	@ 0x24
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	4611      	mov	r1, r2
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fe54 	bl	8007df8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007150:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007152:	f000 f962 	bl	800741a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007156:	f000 fcad 	bl	8007ab4 <xTaskResumeAll>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	f47f af72 	bne.w	8007046 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007162:	4b18      	ldr	r3, [pc, #96]	@ (80071c4 <xQueueSemaphoreTake+0x204>)
 8007164:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	e768      	b.n	8007046 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007174:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007176:	f000 f950 	bl	800741a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800717a:	f000 fc9b 	bl	8007ab4 <xTaskResumeAll>
 800717e:	e762      	b.n	8007046 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007180:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007182:	f000 f94a 	bl	800741a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007186:	f000 fc95 	bl	8007ab4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800718a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800718c:	f000 f997 	bl	80074be <prvIsQueueEmpty>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	f43f af57 	beq.w	8007046 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00d      	beq.n	80071ba <xQueueSemaphoreTake+0x1fa>
					{
						taskENTER_CRITICAL();
 800719e:	f001 fb25 	bl	80087ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80071a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071a4:	f000 f892 	bl	80072cc <prvGetDisinheritPriorityAfterTimeout>
 80071a8:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80071aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071b0:	4618      	mov	r0, r3
 80071b2:	f001 f91d 	bl	80083f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80071b6:	f001 fb49 	bl	800884c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3738      	adds	r7, #56	@ 0x38
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08e      	sub	sp, #56	@ 0x38
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80071d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10b      	bne.n	80071f6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	623b      	str	r3, [r7, #32]
}
 80071f0:	bf00      	nop
 80071f2:	bf00      	nop
 80071f4:	e7fd      	b.n	80071f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d103      	bne.n	8007204 <xQueueReceiveFromISR+0x3c>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <xQueueReceiveFromISR+0x40>
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <xQueueReceiveFromISR+0x42>
 8007208:	2300      	movs	r3, #0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10b      	bne.n	8007226 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	61fb      	str	r3, [r7, #28]
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	e7fd      	b.n	8007222 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007226:	f001 fba3 	bl	8008970 <vPortValidateInterruptPriority>
	__asm volatile
 800722a:	f3ef 8211 	mrs	r2, BASEPRI
 800722e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	61ba      	str	r2, [r7, #24]
 8007240:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007242:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007244:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800724c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724e:	2b00      	cmp	r3, #0
 8007250:	d02f      	beq.n	80072b2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007254:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007260:	f000 f8b5 	bl	80073ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007266:	1e5a      	subs	r2, r3, #1
 8007268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800726c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007274:	d112      	bne.n	800729c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d016      	beq.n	80072ac <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800727e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007280:	3310      	adds	r3, #16
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fdde 	bl	8007e44 <xTaskRemoveFromEventList>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00e      	beq.n	80072ac <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	e007      	b.n	80072ac <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800729c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072a0:	3301      	adds	r3, #1
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	b25a      	sxtb	r2, r3
 80072a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80072ac:	2301      	movs	r3, #1
 80072ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80072b0:	e001      	b.n	80072b6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f383 8811 	msr	BASEPRI, r3
}
 80072c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3738      	adds	r7, #56	@ 0x38
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d006      	beq.n	80072ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f1c3 0307 	rsb	r3, r3, #7
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	e001      	b.n	80072ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80072ee:	68fb      	ldr	r3, [r7, #12]
	}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bc80      	pop	{r7}
 80072f8:	4770      	bx	lr

080072fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b086      	sub	sp, #24
 80072fe:	af00      	add	r7, sp, #0
 8007300:	60f8      	str	r0, [r7, #12]
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007306:	2300      	movs	r3, #0
 8007308:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800730e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10d      	bne.n	8007334 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d14d      	bne.n	80073bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	4618      	mov	r0, r3
 8007326:	f000 ffdb 	bl	80082e0 <xTaskPriorityDisinherit>
 800732a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	609a      	str	r2, [r3, #8]
 8007332:	e043      	b.n	80073bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d119      	bne.n	800736e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6858      	ldr	r0, [r3, #4]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007342:	461a      	mov	r2, r3
 8007344:	68b9      	ldr	r1, [r7, #8]
 8007346:	f001 fdc7 	bl	8008ed8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007352:	441a      	add	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	429a      	cmp	r2, r3
 8007362:	d32b      	bcc.n	80073bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	605a      	str	r2, [r3, #4]
 800736c:	e026      	b.n	80073bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	68d8      	ldr	r0, [r3, #12]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007376:	461a      	mov	r2, r3
 8007378:	68b9      	ldr	r1, [r7, #8]
 800737a:	f001 fdad 	bl	8008ed8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007386:	425b      	negs	r3, r3
 8007388:	441a      	add	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	429a      	cmp	r2, r3
 8007398:	d207      	bcs.n	80073aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	689a      	ldr	r2, [r3, #8]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a2:	425b      	negs	r3, r3
 80073a4:	441a      	add	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d105      	bne.n	80073bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	1c5a      	adds	r2, r3, #1
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80073c4:	697b      	ldr	r3, [r7, #20]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b082      	sub	sp, #8
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d018      	beq.n	8007412 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e8:	441a      	add	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d303      	bcc.n	8007402 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68d9      	ldr	r1, [r3, #12]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740a:	461a      	mov	r2, r3
 800740c:	6838      	ldr	r0, [r7, #0]
 800740e:	f001 fd63 	bl	8008ed8 <memcpy>
	}
}
 8007412:	bf00      	nop
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007422:	f001 f9e3 	bl	80087ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800742c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800742e:	e011      	b.n	8007454 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007434:	2b00      	cmp	r3, #0
 8007436:	d012      	beq.n	800745e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3324      	adds	r3, #36	@ 0x24
 800743c:	4618      	mov	r0, r3
 800743e:	f000 fd01 	bl	8007e44 <xTaskRemoveFromEventList>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007448:	f000 fdda 	bl	8008000 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	3b01      	subs	r3, #1
 8007450:	b2db      	uxtb	r3, r3
 8007452:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007458:	2b00      	cmp	r3, #0
 800745a:	dce9      	bgt.n	8007430 <prvUnlockQueue+0x16>
 800745c:	e000      	b.n	8007460 <prvUnlockQueue+0x46>
					break;
 800745e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	22ff      	movs	r2, #255	@ 0xff
 8007464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007468:	f001 f9f0 	bl	800884c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800746c:	f001 f9be 	bl	80087ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007476:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007478:	e011      	b.n	800749e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d012      	beq.n	80074a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3310      	adds	r3, #16
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fcdc 	bl	8007e44 <xTaskRemoveFromEventList>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007492:	f000 fdb5 	bl	8008000 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	3b01      	subs	r3, #1
 800749a:	b2db      	uxtb	r3, r3
 800749c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800749e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	dce9      	bgt.n	800747a <prvUnlockQueue+0x60>
 80074a6:	e000      	b.n	80074aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	22ff      	movs	r2, #255	@ 0xff
 80074ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80074b2:	f001 f9cb 	bl	800884c <vPortExitCritical>
}
 80074b6:	bf00      	nop
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074c6:	f001 f991 	bl	80087ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d102      	bne.n	80074d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074d2:	2301      	movs	r3, #1
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	e001      	b.n	80074dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074dc:	f001 f9b6 	bl	800884c <vPortExitCritical>

	return xReturn;
 80074e0:	68fb      	ldr	r3, [r7, #12]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074f2:	f001 f97b 	bl	80087ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074fe:	429a      	cmp	r2, r3
 8007500:	d102      	bne.n	8007508 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007502:	2301      	movs	r3, #1
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	e001      	b.n	800750c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007508:	2300      	movs	r3, #0
 800750a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800750c:	f001 f99e 	bl	800884c <vPortExitCritical>

	return xReturn;
 8007510:	68fb      	ldr	r3, [r7, #12]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800751a:	b580      	push	{r7, lr}
 800751c:	b08e      	sub	sp, #56	@ 0x38
 800751e:	af04      	add	r7, sp, #16
 8007520:	60f8      	str	r0, [r7, #12]
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	607a      	str	r2, [r7, #4]
 8007526:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10b      	bne.n	8007546 <xTaskCreateStatic+0x2c>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	623b      	str	r3, [r7, #32]
}
 8007540:	bf00      	nop
 8007542:	bf00      	nop
 8007544:	e7fd      	b.n	8007542 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10b      	bne.n	8007564 <xTaskCreateStatic+0x4a>
	__asm volatile
 800754c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	61fb      	str	r3, [r7, #28]
}
 800755e:	bf00      	nop
 8007560:	bf00      	nop
 8007562:	e7fd      	b.n	8007560 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007564:	2354      	movs	r3, #84	@ 0x54
 8007566:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	2b54      	cmp	r3, #84	@ 0x54
 800756c:	d00b      	beq.n	8007586 <xTaskCreateStatic+0x6c>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	61bb      	str	r3, [r7, #24]
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	e7fd      	b.n	8007582 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007586:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800758a:	2b00      	cmp	r3, #0
 800758c:	d01e      	beq.n	80075cc <xTaskCreateStatic+0xb2>
 800758e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01b      	beq.n	80075cc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007596:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800759c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a0:	2202      	movs	r2, #2
 80075a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075a6:	2300      	movs	r3, #0
 80075a8:	9303      	str	r3, [sp, #12]
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	9302      	str	r3, [sp, #8]
 80075ae:	f107 0314 	add.w	r3, r7, #20
 80075b2:	9301      	str	r3, [sp, #4]
 80075b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	68b9      	ldr	r1, [r7, #8]
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 f850 	bl	8007664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80075c6:	f000 f8d5 	bl	8007774 <prvAddNewTaskToReadyList>
 80075ca:	e001      	b.n	80075d0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075d0:	697b      	ldr	r3, [r7, #20]
	}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3728      	adds	r7, #40	@ 0x28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b08c      	sub	sp, #48	@ 0x30
 80075de:	af04      	add	r7, sp, #16
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	603b      	str	r3, [r7, #0]
 80075e6:	4613      	mov	r3, r2
 80075e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f001 f9fe 	bl	80089f0 <pvPortMalloc>
 80075f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00e      	beq.n	800761a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075fc:	2054      	movs	r0, #84	@ 0x54
 80075fe:	f001 f9f7 	bl	80089f0 <pvPortMalloc>
 8007602:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007610:	e005      	b.n	800761e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007612:	6978      	ldr	r0, [r7, #20]
 8007614:	f001 faba 	bl	8008b8c <vPortFree>
 8007618:	e001      	b.n	800761e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800761a:	2300      	movs	r3, #0
 800761c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d017      	beq.n	8007654 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800762c:	88fa      	ldrh	r2, [r7, #6]
 800762e:	2300      	movs	r3, #0
 8007630:	9303      	str	r3, [sp, #12]
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	9302      	str	r3, [sp, #8]
 8007636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007638:	9301      	str	r3, [sp, #4]
 800763a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 f80e 	bl	8007664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007648:	69f8      	ldr	r0, [r7, #28]
 800764a:	f000 f893 	bl	8007774 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800764e:	2301      	movs	r3, #1
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	e002      	b.n	800765a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007654:	f04f 33ff 	mov.w	r3, #4294967295
 8007658:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800765a:	69bb      	ldr	r3, [r7, #24]
	}
 800765c:	4618      	mov	r0, r3
 800765e:	3720      	adds	r7, #32
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800767c:	3b01      	subs	r3, #1
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	f023 0307 	bic.w	r3, r3, #7
 800768a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	f003 0307 	and.w	r3, r3, #7
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00b      	beq.n	80076ae <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	617b      	str	r3, [r7, #20]
}
 80076a8:	bf00      	nop
 80076aa:	bf00      	nop
 80076ac:	e7fd      	b.n	80076aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01f      	beq.n	80076f4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076b4:	2300      	movs	r3, #0
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	e012      	b.n	80076e0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	4413      	add	r3, r2
 80076c0:	7819      	ldrb	r1, [r3, #0]
 80076c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	4413      	add	r3, r2
 80076c8:	3334      	adds	r3, #52	@ 0x34
 80076ca:	460a      	mov	r2, r1
 80076cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	4413      	add	r3, r2
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d006      	beq.n	80076e8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	3301      	adds	r3, #1
 80076de:	61fb      	str	r3, [r7, #28]
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	2b0f      	cmp	r3, #15
 80076e4:	d9e9      	bls.n	80076ba <prvInitialiseNewTask+0x56>
 80076e6:	e000      	b.n	80076ea <prvInitialiseNewTask+0x86>
			{
				break;
 80076e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076f2:	e003      	b.n	80076fc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fe:	2b06      	cmp	r3, #6
 8007700:	d901      	bls.n	8007706 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007702:	2306      	movs	r3, #6
 8007704:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800770a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800770c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007710:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007714:	2200      	movs	r2, #0
 8007716:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771a:	3304      	adds	r3, #4
 800771c:	4618      	mov	r0, r3
 800771e:	f7fe ff9c 	bl	800665a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007724:	3318      	adds	r3, #24
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe ff97 	bl	800665a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800772c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007730:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007734:	f1c3 0207 	rsb	r2, r3, #7
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007740:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	2200      	movs	r2, #0
 8007746:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	68f9      	ldr	r1, [r7, #12]
 8007754:	69b8      	ldr	r0, [r7, #24]
 8007756:	f000 ff55 	bl	8008604 <pxPortInitialiseStack>
 800775a:	4602      	mov	r2, r0
 800775c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800776a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800776c:	bf00      	nop
 800776e:	3720      	adds	r7, #32
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800777c:	f001 f836 	bl	80087ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007780:	4b24      	ldr	r3, [pc, #144]	@ (8007814 <prvAddNewTaskToReadyList+0xa0>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3301      	adds	r3, #1
 8007786:	4a23      	ldr	r2, [pc, #140]	@ (8007814 <prvAddNewTaskToReadyList+0xa0>)
 8007788:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800778a:	4b23      	ldr	r3, [pc, #140]	@ (8007818 <prvAddNewTaskToReadyList+0xa4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d109      	bne.n	80077a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007792:	4a21      	ldr	r2, [pc, #132]	@ (8007818 <prvAddNewTaskToReadyList+0xa4>)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007798:	4b1e      	ldr	r3, [pc, #120]	@ (8007814 <prvAddNewTaskToReadyList+0xa0>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d110      	bne.n	80077c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077a0:	f000 fc4c 	bl	800803c <prvInitialiseTaskLists>
 80077a4:	e00d      	b.n	80077c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077a6:	4b1d      	ldr	r3, [pc, #116]	@ (800781c <prvAddNewTaskToReadyList+0xa8>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d109      	bne.n	80077c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007818 <prvAddNewTaskToReadyList+0xa4>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d802      	bhi.n	80077c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077bc:	4a16      	ldr	r2, [pc, #88]	@ (8007818 <prvAddNewTaskToReadyList+0xa4>)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077c2:	4b17      	ldr	r3, [pc, #92]	@ (8007820 <prvAddNewTaskToReadyList+0xac>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3301      	adds	r3, #1
 80077c8:	4a15      	ldr	r2, [pc, #84]	@ (8007820 <prvAddNewTaskToReadyList+0xac>)
 80077ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d0:	2201      	movs	r2, #1
 80077d2:	409a      	lsls	r2, r3
 80077d4:	4b13      	ldr	r3, [pc, #76]	@ (8007824 <prvAddNewTaskToReadyList+0xb0>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4313      	orrs	r3, r2
 80077da:	4a12      	ldr	r2, [pc, #72]	@ (8007824 <prvAddNewTaskToReadyList+0xb0>)
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e2:	4613      	mov	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4a0f      	ldr	r2, [pc, #60]	@ (8007828 <prvAddNewTaskToReadyList+0xb4>)
 80077ec:	441a      	add	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3304      	adds	r3, #4
 80077f2:	4619      	mov	r1, r3
 80077f4:	4610      	mov	r0, r2
 80077f6:	f7fe ff3c 	bl	8006672 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077fa:	f001 f827 	bl	800884c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077fe:	4b07      	ldr	r3, [pc, #28]	@ (800781c <prvAddNewTaskToReadyList+0xa8>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007806:	4b04      	ldr	r3, [pc, #16]	@ (8007818 <prvAddNewTaskToReadyList+0xa4>)
 8007808:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800780a:	bf00      	nop
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	20000654 	.word	0x20000654
 8007818:	20000554 	.word	0x20000554
 800781c:	20000660 	.word	0x20000660
 8007820:	20000670 	.word	0x20000670
 8007824:	2000065c 	.word	0x2000065c
 8007828:	20000558 	.word	0x20000558

0800782c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007834:	2300      	movs	r3, #0
 8007836:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d018      	beq.n	8007870 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800783e:	4b14      	ldr	r3, [pc, #80]	@ (8007890 <vTaskDelay+0x64>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00b      	beq.n	800785e <vTaskDelay+0x32>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	60bb      	str	r3, [r7, #8]
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	e7fd      	b.n	800785a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800785e:	f000 f91b 	bl	8007a98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007862:	2100      	movs	r1, #0
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fe67 	bl	8008538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800786a:	f000 f923 	bl	8007ab4 <xTaskResumeAll>
 800786e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d107      	bne.n	8007886 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007876:	4b07      	ldr	r3, [pc, #28]	@ (8007894 <vTaskDelay+0x68>)
 8007878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007886:	bf00      	nop
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	2000067c 	.word	0x2000067c
 8007894:	e000ed04 	.word	0xe000ed04

08007898 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80078a2:	2300      	movs	r3, #0
 80078a4:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b06      	cmp	r3, #6
 80078aa:	d90b      	bls.n	80078c4 <vTaskPrioritySet+0x2c>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	60fb      	str	r3, [r7, #12]
}
 80078be:	bf00      	nop
 80078c0:	bf00      	nop
 80078c2:	e7fd      	b.n	80078c0 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2b06      	cmp	r3, #6
 80078c8:	d901      	bls.n	80078ce <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078ca:	2306      	movs	r3, #6
 80078cc:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80078ce:	f000 ff8d 	bl	80087ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d102      	bne.n	80078de <vTaskPrioritySet+0x46>
 80078d8:	4b3b      	ldr	r3, [pc, #236]	@ (80079c8 <vTaskPrioritySet+0x130>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	e000      	b.n	80078e0 <vTaskPrioritySet+0x48>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078e6:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d064      	beq.n	80079ba <vTaskPrioritySet+0x122>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d90d      	bls.n	8007914 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 80078f8:	4b33      	ldr	r3, [pc, #204]	@ (80079c8 <vTaskPrioritySet+0x130>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d00f      	beq.n	8007922 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8007902:	4b31      	ldr	r3, [pc, #196]	@ (80079c8 <vTaskPrioritySet+0x130>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d309      	bcc.n	8007922 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800790e:	2301      	movs	r3, #1
 8007910:	61fb      	str	r3, [r7, #28]
 8007912:	e006      	b.n	8007922 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8007914:	4b2c      	ldr	r3, [pc, #176]	@ (80079c8 <vTaskPrioritySet+0x130>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	429a      	cmp	r2, r3
 800791c:	d101      	bne.n	8007922 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800791e:	2301      	movs	r3, #1
 8007920:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007926:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007930:	429a      	cmp	r2, r3
 8007932:	d102      	bne.n	800793a <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	645a      	str	r2, [r3, #68]	@ 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	db04      	blt.n	8007952 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	f1c3 0207 	rsb	r2, r3, #7
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	6959      	ldr	r1, [r3, #20]
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	4613      	mov	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4a1a      	ldr	r2, [pc, #104]	@ (80079cc <vTaskPrioritySet+0x134>)
 8007962:	4413      	add	r3, r2
 8007964:	4299      	cmp	r1, r3
 8007966:	d128      	bne.n	80079ba <vTaskPrioritySet+0x122>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	3304      	adds	r3, #4
 800796c:	4618      	mov	r0, r3
 800796e:	f7fe fedb 	bl	8006728 <uxListRemove>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d109      	bne.n	800798c <vTaskPrioritySet+0xf4>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8007978:	2201      	movs	r2, #1
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	fa02 f303 	lsl.w	r3, r2, r3
 8007980:	43da      	mvns	r2, r3
 8007982:	4b13      	ldr	r3, [pc, #76]	@ (80079d0 <vTaskPrioritySet+0x138>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4013      	ands	r3, r2
 8007988:	4a11      	ldr	r2, [pc, #68]	@ (80079d0 <vTaskPrioritySet+0x138>)
 800798a:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007990:	2201      	movs	r2, #1
 8007992:	409a      	lsls	r2, r3
 8007994:	4b0e      	ldr	r3, [pc, #56]	@ (80079d0 <vTaskPrioritySet+0x138>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4313      	orrs	r3, r2
 800799a:	4a0d      	ldr	r2, [pc, #52]	@ (80079d0 <vTaskPrioritySet+0x138>)
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a2:	4613      	mov	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4a08      	ldr	r2, [pc, #32]	@ (80079cc <vTaskPrioritySet+0x134>)
 80079ac:	441a      	add	r2, r3
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	3304      	adds	r3, #4
 80079b2:	4619      	mov	r1, r3
 80079b4:	4610      	mov	r0, r2
 80079b6:	f7fe fe5c 	bl	8006672 <vListInsertEnd>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80079ba:	f000 ff47 	bl	800884c <vPortExitCritical>
	}
 80079be:	bf00      	nop
 80079c0:	3720      	adds	r7, #32
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20000554 	.word	0x20000554
 80079cc:	20000558 	.word	0x20000558
 80079d0:	2000065c 	.word	0x2000065c

080079d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	@ 0x28
 80079d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079e2:	463a      	mov	r2, r7
 80079e4:	1d39      	adds	r1, r7, #4
 80079e6:	f107 0308 	add.w	r3, r7, #8
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7f9 faac 	bl	8000f48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	9202      	str	r2, [sp, #8]
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	2300      	movs	r3, #0
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	2300      	movs	r3, #0
 8007a00:	460a      	mov	r2, r1
 8007a02:	491f      	ldr	r1, [pc, #124]	@ (8007a80 <vTaskStartScheduler+0xac>)
 8007a04:	481f      	ldr	r0, [pc, #124]	@ (8007a84 <vTaskStartScheduler+0xb0>)
 8007a06:	f7ff fd88 	bl	800751a <xTaskCreateStatic>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8007a88 <vTaskStartScheduler+0xb4>)
 8007a0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a10:	4b1d      	ldr	r3, [pc, #116]	@ (8007a88 <vTaskStartScheduler+0xb4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	e001      	b.n	8007a22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d116      	bne.n	8007a56 <vTaskStartScheduler+0x82>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	613b      	str	r3, [r7, #16]
}
 8007a3a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a3c:	4b13      	ldr	r3, [pc, #76]	@ (8007a8c <vTaskStartScheduler+0xb8>)
 8007a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a44:	4b12      	ldr	r3, [pc, #72]	@ (8007a90 <vTaskStartScheduler+0xbc>)
 8007a46:	2201      	movs	r2, #1
 8007a48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a4a:	4b12      	ldr	r3, [pc, #72]	@ (8007a94 <vTaskStartScheduler+0xc0>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a50:	f000 fe5a 	bl	8008708 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a54:	e00f      	b.n	8007a76 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5c:	d10b      	bne.n	8007a76 <vTaskStartScheduler+0xa2>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	60fb      	str	r3, [r7, #12]
}
 8007a70:	bf00      	nop
 8007a72:	bf00      	nop
 8007a74:	e7fd      	b.n	8007a72 <vTaskStartScheduler+0x9e>
}
 8007a76:	bf00      	nop
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	0800a918 	.word	0x0800a918
 8007a84:	08008019 	.word	0x08008019
 8007a88:	20000678 	.word	0x20000678
 8007a8c:	20000674 	.word	0x20000674
 8007a90:	20000660 	.word	0x20000660
 8007a94:	20000658 	.word	0x20000658

08007a98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a98:	b480      	push	{r7}
 8007a9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a9c:	4b04      	ldr	r3, [pc, #16]	@ (8007ab0 <vTaskSuspendAll+0x18>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	4a03      	ldr	r2, [pc, #12]	@ (8007ab0 <vTaskSuspendAll+0x18>)
 8007aa4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007aa6:	bf00      	nop
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bc80      	pop	{r7}
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	2000067c 	.word	0x2000067c

08007ab4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ac2:	4b3c      	ldr	r3, [pc, #240]	@ (8007bb4 <xTaskResumeAll+0x100>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10b      	bne.n	8007ae2 <xTaskResumeAll+0x2e>
	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	603b      	str	r3, [r7, #0]
}
 8007adc:	bf00      	nop
 8007ade:	bf00      	nop
 8007ae0:	e7fd      	b.n	8007ade <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ae2:	f000 fe83 	bl	80087ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ae6:	4b33      	ldr	r3, [pc, #204]	@ (8007bb4 <xTaskResumeAll+0x100>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	4a31      	ldr	r2, [pc, #196]	@ (8007bb4 <xTaskResumeAll+0x100>)
 8007aee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007af0:	4b30      	ldr	r3, [pc, #192]	@ (8007bb4 <xTaskResumeAll+0x100>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d155      	bne.n	8007ba4 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007af8:	4b2f      	ldr	r3, [pc, #188]	@ (8007bb8 <xTaskResumeAll+0x104>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d051      	beq.n	8007ba4 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b00:	e02e      	b.n	8007b60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b02:	4b2e      	ldr	r3, [pc, #184]	@ (8007bbc <xTaskResumeAll+0x108>)
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3318      	adds	r3, #24
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe fe0a 	bl	8006728 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3304      	adds	r3, #4
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fe05 	bl	8006728 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b22:	2201      	movs	r2, #1
 8007b24:	409a      	lsls	r2, r3
 8007b26:	4b26      	ldr	r3, [pc, #152]	@ (8007bc0 <xTaskResumeAll+0x10c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	4a24      	ldr	r2, [pc, #144]	@ (8007bc0 <xTaskResumeAll+0x10c>)
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4a21      	ldr	r2, [pc, #132]	@ (8007bc4 <xTaskResumeAll+0x110>)
 8007b3e:	441a      	add	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	3304      	adds	r3, #4
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f7fe fd93 	bl	8006672 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b50:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc8 <xTaskResumeAll+0x114>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d302      	bcc.n	8007b60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8007bcc <xTaskResumeAll+0x118>)
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b60:	4b16      	ldr	r3, [pc, #88]	@ (8007bbc <xTaskResumeAll+0x108>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1cc      	bne.n	8007b02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b6e:	f000 fb03 	bl	8008178 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b72:	4b17      	ldr	r3, [pc, #92]	@ (8007bd0 <xTaskResumeAll+0x11c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d010      	beq.n	8007ba0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b7e:	f000 f849 	bl	8007c14 <xTaskIncrementTick>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007b88:	4b10      	ldr	r3, [pc, #64]	@ (8007bcc <xTaskResumeAll+0x118>)
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1f1      	bne.n	8007b7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd0 <xTaskResumeAll+0x11c>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8007bcc <xTaskResumeAll+0x118>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ba4:	f000 fe52 	bl	800884c <vPortExitCritical>

	return xAlreadyYielded;
 8007ba8:	687b      	ldr	r3, [r7, #4]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	2000067c 	.word	0x2000067c
 8007bb8:	20000654 	.word	0x20000654
 8007bbc:	20000614 	.word	0x20000614
 8007bc0:	2000065c 	.word	0x2000065c
 8007bc4:	20000558 	.word	0x20000558
 8007bc8:	20000554 	.word	0x20000554
 8007bcc:	20000668 	.word	0x20000668
 8007bd0:	20000664 	.word	0x20000664

08007bd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007bda:	4b04      	ldr	r3, [pc, #16]	@ (8007bec <xTaskGetTickCount+0x18>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007be0:	687b      	ldr	r3, [r7, #4]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr
 8007bec:	20000658 	.word	0x20000658

08007bf0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bf6:	f000 febb 	bl	8008970 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007bfe:	4b04      	ldr	r3, [pc, #16]	@ (8007c10 <xTaskGetTickCountFromISR+0x20>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c04:	683b      	ldr	r3, [r7, #0]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20000658 	.word	0x20000658

08007c14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8007d1c <xTaskIncrementTick+0x108>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d170      	bne.n	8007d08 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c26:	4b3e      	ldr	r3, [pc, #248]	@ (8007d20 <xTaskIncrementTick+0x10c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c2e:	4a3c      	ldr	r2, [pc, #240]	@ (8007d20 <xTaskIncrementTick+0x10c>)
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d121      	bne.n	8007c7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c3a:	4b3a      	ldr	r3, [pc, #232]	@ (8007d24 <xTaskIncrementTick+0x110>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00b      	beq.n	8007c5c <xTaskIncrementTick+0x48>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	603b      	str	r3, [r7, #0]
}
 8007c56:	bf00      	nop
 8007c58:	bf00      	nop
 8007c5a:	e7fd      	b.n	8007c58 <xTaskIncrementTick+0x44>
 8007c5c:	4b31      	ldr	r3, [pc, #196]	@ (8007d24 <xTaskIncrementTick+0x110>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	60fb      	str	r3, [r7, #12]
 8007c62:	4b31      	ldr	r3, [pc, #196]	@ (8007d28 <xTaskIncrementTick+0x114>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a2f      	ldr	r2, [pc, #188]	@ (8007d24 <xTaskIncrementTick+0x110>)
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8007d28 <xTaskIncrementTick+0x114>)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6013      	str	r3, [r2, #0]
 8007c70:	4b2e      	ldr	r3, [pc, #184]	@ (8007d2c <xTaskIncrementTick+0x118>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3301      	adds	r3, #1
 8007c76:	4a2d      	ldr	r2, [pc, #180]	@ (8007d2c <xTaskIncrementTick+0x118>)
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	f000 fa7d 	bl	8008178 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8007d30 <xTaskIncrementTick+0x11c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d344      	bcc.n	8007d12 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c88:	4b26      	ldr	r3, [pc, #152]	@ (8007d24 <xTaskIncrementTick+0x110>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d104      	bne.n	8007c9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c92:	4b27      	ldr	r3, [pc, #156]	@ (8007d30 <xTaskIncrementTick+0x11c>)
 8007c94:	f04f 32ff 	mov.w	r2, #4294967295
 8007c98:	601a      	str	r2, [r3, #0]
					break;
 8007c9a:	e03a      	b.n	8007d12 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c9c:	4b21      	ldr	r3, [pc, #132]	@ (8007d24 <xTaskIncrementTick+0x110>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d203      	bcs.n	8007cbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8007d30 <xTaskIncrementTick+0x11c>)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007cba:	e02a      	b.n	8007d12 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe fd31 	bl	8006728 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d004      	beq.n	8007cd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	3318      	adds	r3, #24
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe fd28 	bl	8006728 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cdc:	2201      	movs	r2, #1
 8007cde:	409a      	lsls	r2, r3
 8007ce0:	4b14      	ldr	r3, [pc, #80]	@ (8007d34 <xTaskIncrementTick+0x120>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	4a13      	ldr	r2, [pc, #76]	@ (8007d34 <xTaskIncrementTick+0x120>)
 8007ce8:	6013      	str	r3, [r2, #0]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cee:	4613      	mov	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4a10      	ldr	r2, [pc, #64]	@ (8007d38 <xTaskIncrementTick+0x124>)
 8007cf8:	441a      	add	r2, r3
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	4619      	mov	r1, r3
 8007d00:	4610      	mov	r0, r2
 8007d02:	f7fe fcb6 	bl	8006672 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d06:	e7bf      	b.n	8007c88 <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d08:	4b0c      	ldr	r3, [pc, #48]	@ (8007d3c <xTaskIncrementTick+0x128>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8007d3c <xTaskIncrementTick+0x128>)
 8007d10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d12:	697b      	ldr	r3, [r7, #20]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	2000067c 	.word	0x2000067c
 8007d20:	20000658 	.word	0x20000658
 8007d24:	2000060c 	.word	0x2000060c
 8007d28:	20000610 	.word	0x20000610
 8007d2c:	2000066c 	.word	0x2000066c
 8007d30:	20000674 	.word	0x20000674
 8007d34:	2000065c 	.word	0x2000065c
 8007d38:	20000558 	.word	0x20000558
 8007d3c:	20000664 	.word	0x20000664

08007d40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d46:	4b27      	ldr	r3, [pc, #156]	@ (8007de4 <vTaskSwitchContext+0xa4>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d4e:	4b26      	ldr	r3, [pc, #152]	@ (8007de8 <vTaskSwitchContext+0xa8>)
 8007d50:	2201      	movs	r2, #1
 8007d52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d54:	e040      	b.n	8007dd8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007d56:	4b24      	ldr	r3, [pc, #144]	@ (8007de8 <vTaskSwitchContext+0xa8>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d5c:	4b23      	ldr	r3, [pc, #140]	@ (8007dec <vTaskSwitchContext+0xac>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	fab3 f383 	clz	r3, r3
 8007d68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d6a:	7afb      	ldrb	r3, [r7, #11]
 8007d6c:	f1c3 031f 	rsb	r3, r3, #31
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	491f      	ldr	r1, [pc, #124]	@ (8007df0 <vTaskSwitchContext+0xb0>)
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	440b      	add	r3, r1
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10b      	bne.n	8007d9e <vTaskSwitchContext+0x5e>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	607b      	str	r3, [r7, #4]
}
 8007d98:	bf00      	nop
 8007d9a:	bf00      	nop
 8007d9c:	e7fd      	b.n	8007d9a <vTaskSwitchContext+0x5a>
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4613      	mov	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4a11      	ldr	r2, [pc, #68]	@ (8007df0 <vTaskSwitchContext+0xb0>)
 8007daa:	4413      	add	r3, r2
 8007dac:	613b      	str	r3, [r7, #16]
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	605a      	str	r2, [r3, #4]
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	3308      	adds	r3, #8
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d104      	bne.n	8007dce <vTaskSwitchContext+0x8e>
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	605a      	str	r2, [r3, #4]
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	4a07      	ldr	r2, [pc, #28]	@ (8007df4 <vTaskSwitchContext+0xb4>)
 8007dd6:	6013      	str	r3, [r2, #0]
}
 8007dd8:	bf00      	nop
 8007dda:	371c      	adds	r7, #28
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	2000067c 	.word	0x2000067c
 8007de8:	20000668 	.word	0x20000668
 8007dec:	2000065c 	.word	0x2000065c
 8007df0:	20000558 	.word	0x20000558
 8007df4:	20000554 	.word	0x20000554

08007df8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10b      	bne.n	8007e20 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	60fb      	str	r3, [r7, #12]
}
 8007e1a:	bf00      	nop
 8007e1c:	bf00      	nop
 8007e1e:	e7fd      	b.n	8007e1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e20:	4b07      	ldr	r3, [pc, #28]	@ (8007e40 <vTaskPlaceOnEventList+0x48>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3318      	adds	r3, #24
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7fe fc45 	bl	80066b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e2e:	2101      	movs	r1, #1
 8007e30:	6838      	ldr	r0, [r7, #0]
 8007e32:	f000 fb81 	bl	8008538 <prvAddCurrentTaskToDelayedList>
}
 8007e36:	bf00      	nop
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	20000554 	.word	0x20000554

08007e44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10b      	bne.n	8007e72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	60fb      	str	r3, [r7, #12]
}
 8007e6c:	bf00      	nop
 8007e6e:	bf00      	nop
 8007e70:	e7fd      	b.n	8007e6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	3318      	adds	r3, #24
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fc56 	bl	8006728 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ef4 <xTaskRemoveFromEventList+0xb0>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d11c      	bne.n	8007ebe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	3304      	adds	r3, #4
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fe fc4d 	bl	8006728 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e92:	2201      	movs	r2, #1
 8007e94:	409a      	lsls	r2, r3
 8007e96:	4b18      	ldr	r3, [pc, #96]	@ (8007ef8 <xTaskRemoveFromEventList+0xb4>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	4a16      	ldr	r2, [pc, #88]	@ (8007ef8 <xTaskRemoveFromEventList+0xb4>)
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4a13      	ldr	r2, [pc, #76]	@ (8007efc <xTaskRemoveFromEventList+0xb8>)
 8007eae:	441a      	add	r2, r3
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	f7fe fbdb 	bl	8006672 <vListInsertEnd>
 8007ebc:	e005      	b.n	8007eca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	3318      	adds	r3, #24
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	480e      	ldr	r0, [pc, #56]	@ (8007f00 <xTaskRemoveFromEventList+0xbc>)
 8007ec6:	f7fe fbd4 	bl	8006672 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ece:	4b0d      	ldr	r3, [pc, #52]	@ (8007f04 <xTaskRemoveFromEventList+0xc0>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d905      	bls.n	8007ee4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007edc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f08 <xTaskRemoveFromEventList+0xc4>)
 8007ede:	2201      	movs	r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	e001      	b.n	8007ee8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ee8:	697b      	ldr	r3, [r7, #20]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	2000067c 	.word	0x2000067c
 8007ef8:	2000065c 	.word	0x2000065c
 8007efc:	20000558 	.word	0x20000558
 8007f00:	20000614 	.word	0x20000614
 8007f04:	20000554 	.word	0x20000554
 8007f08:	20000668 	.word	0x20000668

08007f0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f14:	4b06      	ldr	r3, [pc, #24]	@ (8007f30 <vTaskInternalSetTimeOutState+0x24>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f1c:	4b05      	ldr	r3, [pc, #20]	@ (8007f34 <vTaskInternalSetTimeOutState+0x28>)
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	605a      	str	r2, [r3, #4]
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bc80      	pop	{r7}
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	2000066c 	.word	0x2000066c
 8007f34:	20000658 	.word	0x20000658

08007f38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b088      	sub	sp, #32
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10b      	bne.n	8007f60 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	613b      	str	r3, [r7, #16]
}
 8007f5a:	bf00      	nop
 8007f5c:	bf00      	nop
 8007f5e:	e7fd      	b.n	8007f5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10b      	bne.n	8007f7e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	60fb      	str	r3, [r7, #12]
}
 8007f78:	bf00      	nop
 8007f7a:	bf00      	nop
 8007f7c:	e7fd      	b.n	8007f7a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007f7e:	f000 fc35 	bl	80087ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f82:	4b1d      	ldr	r3, [pc, #116]	@ (8007ff8 <xTaskCheckForTimeOut+0xc0>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9a:	d102      	bne.n	8007fa2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	61fb      	str	r3, [r7, #28]
 8007fa0:	e023      	b.n	8007fea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	4b15      	ldr	r3, [pc, #84]	@ (8007ffc <xTaskCheckForTimeOut+0xc4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d007      	beq.n	8007fbe <xTaskCheckForTimeOut+0x86>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d302      	bcc.n	8007fbe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	61fb      	str	r3, [r7, #28]
 8007fbc:	e015      	b.n	8007fea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d20b      	bcs.n	8007fe0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	1ad2      	subs	r2, r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff ff99 	bl	8007f0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	61fb      	str	r3, [r7, #28]
 8007fde:	e004      	b.n	8007fea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fea:	f000 fc2f 	bl	800884c <vPortExitCritical>

	return xReturn;
 8007fee:	69fb      	ldr	r3, [r7, #28]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3720      	adds	r7, #32
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	20000658 	.word	0x20000658
 8007ffc:	2000066c 	.word	0x2000066c

08008000 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008000:	b480      	push	{r7}
 8008002:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008004:	4b03      	ldr	r3, [pc, #12]	@ (8008014 <vTaskMissedYield+0x14>)
 8008006:	2201      	movs	r2, #1
 8008008:	601a      	str	r2, [r3, #0]
}
 800800a:	bf00      	nop
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	20000668 	.word	0x20000668

08008018 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008020:	f000 f84c 	bl	80080bc <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8008024:	4b04      	ldr	r3, [pc, #16]	@ (8008038 <prvIdleTask+0x20>)
 8008026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008034:	bf00      	nop
 8008036:	e7f3      	b.n	8008020 <prvIdleTask+0x8>
 8008038:	e000ed04 	.word	0xe000ed04

0800803c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008042:	2300      	movs	r3, #0
 8008044:	607b      	str	r3, [r7, #4]
 8008046:	e00c      	b.n	8008062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	4613      	mov	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4a12      	ldr	r2, [pc, #72]	@ (800809c <prvInitialiseTaskLists+0x60>)
 8008054:	4413      	add	r3, r2
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fae0 	bl	800661c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3301      	adds	r3, #1
 8008060:	607b      	str	r3, [r7, #4]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b06      	cmp	r3, #6
 8008066:	d9ef      	bls.n	8008048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008068:	480d      	ldr	r0, [pc, #52]	@ (80080a0 <prvInitialiseTaskLists+0x64>)
 800806a:	f7fe fad7 	bl	800661c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800806e:	480d      	ldr	r0, [pc, #52]	@ (80080a4 <prvInitialiseTaskLists+0x68>)
 8008070:	f7fe fad4 	bl	800661c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008074:	480c      	ldr	r0, [pc, #48]	@ (80080a8 <prvInitialiseTaskLists+0x6c>)
 8008076:	f7fe fad1 	bl	800661c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800807a:	480c      	ldr	r0, [pc, #48]	@ (80080ac <prvInitialiseTaskLists+0x70>)
 800807c:	f7fe face 	bl	800661c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008080:	480b      	ldr	r0, [pc, #44]	@ (80080b0 <prvInitialiseTaskLists+0x74>)
 8008082:	f7fe facb 	bl	800661c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008086:	4b0b      	ldr	r3, [pc, #44]	@ (80080b4 <prvInitialiseTaskLists+0x78>)
 8008088:	4a05      	ldr	r2, [pc, #20]	@ (80080a0 <prvInitialiseTaskLists+0x64>)
 800808a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800808c:	4b0a      	ldr	r3, [pc, #40]	@ (80080b8 <prvInitialiseTaskLists+0x7c>)
 800808e:	4a05      	ldr	r2, [pc, #20]	@ (80080a4 <prvInitialiseTaskLists+0x68>)
 8008090:	601a      	str	r2, [r3, #0]
}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20000558 	.word	0x20000558
 80080a0:	200005e4 	.word	0x200005e4
 80080a4:	200005f8 	.word	0x200005f8
 80080a8:	20000614 	.word	0x20000614
 80080ac:	20000628 	.word	0x20000628
 80080b0:	20000640 	.word	0x20000640
 80080b4:	2000060c 	.word	0x2000060c
 80080b8:	20000610 	.word	0x20000610

080080bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080c2:	e019      	b.n	80080f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080c4:	f000 fb92 	bl	80087ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080c8:	4b10      	ldr	r3, [pc, #64]	@ (800810c <prvCheckTasksWaitingTermination+0x50>)
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fe fb27 	bl	8006728 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080da:	4b0d      	ldr	r3, [pc, #52]	@ (8008110 <prvCheckTasksWaitingTermination+0x54>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3b01      	subs	r3, #1
 80080e0:	4a0b      	ldr	r2, [pc, #44]	@ (8008110 <prvCheckTasksWaitingTermination+0x54>)
 80080e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008114 <prvCheckTasksWaitingTermination+0x58>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3b01      	subs	r3, #1
 80080ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008114 <prvCheckTasksWaitingTermination+0x58>)
 80080ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080ee:	f000 fbad 	bl	800884c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f810 	bl	8008118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080f8:	4b06      	ldr	r3, [pc, #24]	@ (8008114 <prvCheckTasksWaitingTermination+0x58>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e1      	bne.n	80080c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008100:	bf00      	nop
 8008102:	bf00      	nop
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20000628 	.word	0x20000628
 8008110:	20000654 	.word	0x20000654
 8008114:	2000063c 	.word	0x2000063c

08008118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008126:	2b00      	cmp	r3, #0
 8008128:	d108      	bne.n	800813c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fd2c 	bl	8008b8c <vPortFree>
				vPortFree( pxTCB );
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fd29 	bl	8008b8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800813a:	e019      	b.n	8008170 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008142:	2b01      	cmp	r3, #1
 8008144:	d103      	bne.n	800814e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fd20 	bl	8008b8c <vPortFree>
	}
 800814c:	e010      	b.n	8008170 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008154:	2b02      	cmp	r3, #2
 8008156:	d00b      	beq.n	8008170 <prvDeleteTCB+0x58>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	60fb      	str	r3, [r7, #12]
}
 800816a:	bf00      	nop
 800816c:	bf00      	nop
 800816e:	e7fd      	b.n	800816c <prvDeleteTCB+0x54>
	}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800817e:	4b0c      	ldr	r3, [pc, #48]	@ (80081b0 <prvResetNextTaskUnblockTime+0x38>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d104      	bne.n	8008192 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008188:	4b0a      	ldr	r3, [pc, #40]	@ (80081b4 <prvResetNextTaskUnblockTime+0x3c>)
 800818a:	f04f 32ff 	mov.w	r2, #4294967295
 800818e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008190:	e008      	b.n	80081a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008192:	4b07      	ldr	r3, [pc, #28]	@ (80081b0 <prvResetNextTaskUnblockTime+0x38>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	4a04      	ldr	r2, [pc, #16]	@ (80081b4 <prvResetNextTaskUnblockTime+0x3c>)
 80081a2:	6013      	str	r3, [r2, #0]
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bc80      	pop	{r7}
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	2000060c 	.word	0x2000060c
 80081b4:	20000674 	.word	0x20000674

080081b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081be:	4b0b      	ldr	r3, [pc, #44]	@ (80081ec <xTaskGetSchedulerState+0x34>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d102      	bne.n	80081cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081c6:	2301      	movs	r3, #1
 80081c8:	607b      	str	r3, [r7, #4]
 80081ca:	e008      	b.n	80081de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081cc:	4b08      	ldr	r3, [pc, #32]	@ (80081f0 <xTaskGetSchedulerState+0x38>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d102      	bne.n	80081da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081d4:	2302      	movs	r3, #2
 80081d6:	607b      	str	r3, [r7, #4]
 80081d8:	e001      	b.n	80081de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081da:	2300      	movs	r3, #0
 80081dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081de:	687b      	ldr	r3, [r7, #4]
	}
 80081e0:	4618      	mov	r0, r3
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bc80      	pop	{r7}
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	20000660 	.word	0x20000660
 80081f0:	2000067c 	.word	0x2000067c

080081f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008200:	2300      	movs	r3, #0
 8008202:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d05e      	beq.n	80082c8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800820e:	4b31      	ldr	r3, [pc, #196]	@ (80082d4 <xTaskPriorityInherit+0xe0>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008214:	429a      	cmp	r2, r3
 8008216:	d24e      	bcs.n	80082b6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	2b00      	cmp	r3, #0
 800821e:	db06      	blt.n	800822e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008220:	4b2c      	ldr	r3, [pc, #176]	@ (80082d4 <xTaskPriorityInherit+0xe0>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008226:	f1c3 0207 	rsb	r2, r3, #7
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	6959      	ldr	r1, [r3, #20]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008236:	4613      	mov	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4a26      	ldr	r2, [pc, #152]	@ (80082d8 <xTaskPriorityInherit+0xe4>)
 8008240:	4413      	add	r3, r2
 8008242:	4299      	cmp	r1, r3
 8008244:	d12f      	bne.n	80082a6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	3304      	adds	r3, #4
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe fa6c 	bl	8006728 <uxListRemove>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10a      	bne.n	800826c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800825a:	2201      	movs	r2, #1
 800825c:	fa02 f303 	lsl.w	r3, r2, r3
 8008260:	43da      	mvns	r2, r3
 8008262:	4b1e      	ldr	r3, [pc, #120]	@ (80082dc <xTaskPriorityInherit+0xe8>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4013      	ands	r3, r2
 8008268:	4a1c      	ldr	r2, [pc, #112]	@ (80082dc <xTaskPriorityInherit+0xe8>)
 800826a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800826c:	4b19      	ldr	r3, [pc, #100]	@ (80082d4 <xTaskPriorityInherit+0xe0>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827a:	2201      	movs	r2, #1
 800827c:	409a      	lsls	r2, r3
 800827e:	4b17      	ldr	r3, [pc, #92]	@ (80082dc <xTaskPriorityInherit+0xe8>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4313      	orrs	r3, r2
 8008284:	4a15      	ldr	r2, [pc, #84]	@ (80082dc <xTaskPriorityInherit+0xe8>)
 8008286:	6013      	str	r3, [r2, #0]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800828c:	4613      	mov	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4a10      	ldr	r2, [pc, #64]	@ (80082d8 <xTaskPriorityInherit+0xe4>)
 8008296:	441a      	add	r2, r3
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	3304      	adds	r3, #4
 800829c:	4619      	mov	r1, r3
 800829e:	4610      	mov	r0, r2
 80082a0:	f7fe f9e7 	bl	8006672 <vListInsertEnd>
 80082a4:	e004      	b.n	80082b0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80082a6:	4b0b      	ldr	r3, [pc, #44]	@ (80082d4 <xTaskPriorityInherit+0xe0>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80082b0:	2301      	movs	r3, #1
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e008      	b.n	80082c8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082ba:	4b06      	ldr	r3, [pc, #24]	@ (80082d4 <xTaskPriorityInherit+0xe0>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d201      	bcs.n	80082c8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80082c4:	2301      	movs	r3, #1
 80082c6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082c8:	68fb      	ldr	r3, [r7, #12]
	}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20000554 	.word	0x20000554
 80082d8:	20000558 	.word	0x20000558
 80082dc:	2000065c 	.word	0x2000065c

080082e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082ec:	2300      	movs	r3, #0
 80082ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d070      	beq.n	80083d8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082f6:	4b3b      	ldr	r3, [pc, #236]	@ (80083e4 <xTaskPriorityDisinherit+0x104>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d00b      	beq.n	8008318 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	60fb      	str	r3, [r7, #12]
}
 8008312:	bf00      	nop
 8008314:	bf00      	nop
 8008316:	e7fd      	b.n	8008314 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10b      	bne.n	8008338 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	60bb      	str	r3, [r7, #8]
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	e7fd      	b.n	8008334 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800833c:	1e5a      	subs	r2, r3, #1
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800834a:	429a      	cmp	r2, r3
 800834c:	d044      	beq.n	80083d8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008352:	2b00      	cmp	r3, #0
 8008354:	d140      	bne.n	80083d8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	3304      	adds	r3, #4
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe f9e4 	bl	8006728 <uxListRemove>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d115      	bne.n	8008392 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800836a:	491f      	ldr	r1, [pc, #124]	@ (80083e8 <xTaskPriorityDisinherit+0x108>)
 800836c:	4613      	mov	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	440b      	add	r3, r1
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10a      	bne.n	8008392 <xTaskPriorityDisinherit+0xb2>
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008380:	2201      	movs	r2, #1
 8008382:	fa02 f303 	lsl.w	r3, r2, r3
 8008386:	43da      	mvns	r2, r3
 8008388:	4b18      	ldr	r3, [pc, #96]	@ (80083ec <xTaskPriorityDisinherit+0x10c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4013      	ands	r3, r2
 800838e:	4a17      	ldr	r2, [pc, #92]	@ (80083ec <xTaskPriorityDisinherit+0x10c>)
 8008390:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839e:	f1c3 0207 	rsb	r2, r3, #7
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083aa:	2201      	movs	r2, #1
 80083ac:	409a      	lsls	r2, r3
 80083ae:	4b0f      	ldr	r3, [pc, #60]	@ (80083ec <xTaskPriorityDisinherit+0x10c>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	4a0d      	ldr	r2, [pc, #52]	@ (80083ec <xTaskPriorityDisinherit+0x10c>)
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4a08      	ldr	r2, [pc, #32]	@ (80083e8 <xTaskPriorityDisinherit+0x108>)
 80083c6:	441a      	add	r2, r3
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	3304      	adds	r3, #4
 80083cc:	4619      	mov	r1, r3
 80083ce:	4610      	mov	r0, r2
 80083d0:	f7fe f94f 	bl	8006672 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083d4:	2301      	movs	r3, #1
 80083d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083d8:	697b      	ldr	r3, [r7, #20]
	}
 80083da:	4618      	mov	r0, r3
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20000554 	.word	0x20000554
 80083e8:	20000558 	.word	0x20000558
 80083ec:	2000065c 	.word	0x2000065c

080083f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80083fe:	2301      	movs	r3, #1
 8008400:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d079      	beq.n	80084fc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10b      	bne.n	8008428 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	60fb      	str	r3, [r7, #12]
}
 8008422:	bf00      	nop
 8008424:	bf00      	nop
 8008426:	e7fd      	b.n	8008424 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	429a      	cmp	r2, r3
 8008430:	d902      	bls.n	8008438 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	61fb      	str	r3, [r7, #28]
 8008436:	e002      	b.n	800843e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800843c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008442:	69fa      	ldr	r2, [r7, #28]
 8008444:	429a      	cmp	r2, r3
 8008446:	d059      	beq.n	80084fc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	429a      	cmp	r2, r3
 8008450:	d154      	bne.n	80084fc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008452:	4b2c      	ldr	r3, [pc, #176]	@ (8008504 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	429a      	cmp	r2, r3
 800845a:	d10b      	bne.n	8008474 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	60bb      	str	r3, [r7, #8]
}
 800846e:	bf00      	nop
 8008470:	bf00      	nop
 8008472:	e7fd      	b.n	8008470 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008478:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	69fa      	ldr	r2, [r7, #28]
 800847e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	699b      	ldr	r3, [r3, #24]
 8008484:	2b00      	cmp	r3, #0
 8008486:	db04      	blt.n	8008492 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	f1c3 0207 	rsb	r2, r3, #7
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	6959      	ldr	r1, [r3, #20]
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	4613      	mov	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4a19      	ldr	r2, [pc, #100]	@ (8008508 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80084a2:	4413      	add	r3, r2
 80084a4:	4299      	cmp	r1, r3
 80084a6:	d129      	bne.n	80084fc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	3304      	adds	r3, #4
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fe f93b 	bl	8006728 <uxListRemove>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10a      	bne.n	80084ce <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084bc:	2201      	movs	r2, #1
 80084be:	fa02 f303 	lsl.w	r3, r2, r3
 80084c2:	43da      	mvns	r2, r3
 80084c4:	4b11      	ldr	r3, [pc, #68]	@ (800850c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4013      	ands	r3, r2
 80084ca:	4a10      	ldr	r2, [pc, #64]	@ (800850c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80084cc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d2:	2201      	movs	r2, #1
 80084d4:	409a      	lsls	r2, r3
 80084d6:	4b0d      	ldr	r3, [pc, #52]	@ (800850c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4313      	orrs	r3, r2
 80084dc:	4a0b      	ldr	r2, [pc, #44]	@ (800850c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80084de:	6013      	str	r3, [r2, #0]
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084e4:	4613      	mov	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4a06      	ldr	r2, [pc, #24]	@ (8008508 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80084ee:	441a      	add	r2, r3
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	3304      	adds	r3, #4
 80084f4:	4619      	mov	r1, r3
 80084f6:	4610      	mov	r0, r2
 80084f8:	f7fe f8bb 	bl	8006672 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084fc:	bf00      	nop
 80084fe:	3720      	adds	r7, #32
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	20000554 	.word	0x20000554
 8008508:	20000558 	.word	0x20000558
 800850c:	2000065c 	.word	0x2000065c

08008510 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008510:	b480      	push	{r7}
 8008512:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008514:	4b07      	ldr	r3, [pc, #28]	@ (8008534 <pvTaskIncrementMutexHeldCount+0x24>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d004      	beq.n	8008526 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800851c:	4b05      	ldr	r3, [pc, #20]	@ (8008534 <pvTaskIncrementMutexHeldCount+0x24>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008522:	3201      	adds	r2, #1
 8008524:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008526:	4b03      	ldr	r3, [pc, #12]	@ (8008534 <pvTaskIncrementMutexHeldCount+0x24>)
 8008528:	681b      	ldr	r3, [r3, #0]
	}
 800852a:	4618      	mov	r0, r3
 800852c:	46bd      	mov	sp, r7
 800852e:	bc80      	pop	{r7}
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	20000554 	.word	0x20000554

08008538 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008542:	4b29      	ldr	r3, [pc, #164]	@ (80085e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008548:	4b28      	ldr	r3, [pc, #160]	@ (80085ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3304      	adds	r3, #4
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe f8ea 	bl	8006728 <uxListRemove>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10b      	bne.n	8008572 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800855a:	4b24      	ldr	r3, [pc, #144]	@ (80085ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008560:	2201      	movs	r2, #1
 8008562:	fa02 f303 	lsl.w	r3, r2, r3
 8008566:	43da      	mvns	r2, r3
 8008568:	4b21      	ldr	r3, [pc, #132]	@ (80085f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4013      	ands	r3, r2
 800856e:	4a20      	ldr	r2, [pc, #128]	@ (80085f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008570:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008578:	d10a      	bne.n	8008590 <prvAddCurrentTaskToDelayedList+0x58>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d007      	beq.n	8008590 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008580:	4b1a      	ldr	r3, [pc, #104]	@ (80085ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3304      	adds	r3, #4
 8008586:	4619      	mov	r1, r3
 8008588:	481a      	ldr	r0, [pc, #104]	@ (80085f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800858a:	f7fe f872 	bl	8006672 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800858e:	e026      	b.n	80085de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4413      	add	r3, r2
 8008596:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008598:	4b14      	ldr	r3, [pc, #80]	@ (80085ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d209      	bcs.n	80085bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085a8:	4b13      	ldr	r3, [pc, #76]	@ (80085f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	4b0f      	ldr	r3, [pc, #60]	@ (80085ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3304      	adds	r3, #4
 80085b2:	4619      	mov	r1, r3
 80085b4:	4610      	mov	r0, r2
 80085b6:	f7fe f87f 	bl	80066b8 <vListInsert>
}
 80085ba:	e010      	b.n	80085de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085bc:	4b0f      	ldr	r3, [pc, #60]	@ (80085fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	4b0a      	ldr	r3, [pc, #40]	@ (80085ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3304      	adds	r3, #4
 80085c6:	4619      	mov	r1, r3
 80085c8:	4610      	mov	r0, r2
 80085ca:	f7fe f875 	bl	80066b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008600 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d202      	bcs.n	80085de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80085d8:	4a09      	ldr	r2, [pc, #36]	@ (8008600 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	6013      	str	r3, [r2, #0]
}
 80085de:	bf00      	nop
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20000658 	.word	0x20000658
 80085ec:	20000554 	.word	0x20000554
 80085f0:	2000065c 	.word	0x2000065c
 80085f4:	20000640 	.word	0x20000640
 80085f8:	20000610 	.word	0x20000610
 80085fc:	2000060c 	.word	0x2000060c
 8008600:	20000674 	.word	0x20000674

08008604 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	3b04      	subs	r3, #4
 8008614:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800861c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3b04      	subs	r3, #4
 8008622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f023 0201 	bic.w	r2, r3, #1
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3b04      	subs	r3, #4
 8008632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008634:	4a08      	ldr	r2, [pc, #32]	@ (8008658 <pxPortInitialiseStack+0x54>)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3b14      	subs	r3, #20
 800863e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	3b20      	subs	r3, #32
 800864a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800864c:	68fb      	ldr	r3, [r7, #12]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	bc80      	pop	{r7}
 8008656:	4770      	bx	lr
 8008658:	0800865d 	.word	0x0800865d

0800865c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008662:	2300      	movs	r3, #0
 8008664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008666:	4b12      	ldr	r3, [pc, #72]	@ (80086b0 <prvTaskExitError+0x54>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800866e:	d00b      	beq.n	8008688 <prvTaskExitError+0x2c>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	60fb      	str	r3, [r7, #12]
}
 8008682:	bf00      	nop
 8008684:	bf00      	nop
 8008686:	e7fd      	b.n	8008684 <prvTaskExitError+0x28>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	60bb      	str	r3, [r7, #8]
}
 800869a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800869c:	bf00      	nop
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0fc      	beq.n	800869e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bc80      	pop	{r7}
 80086ae:	4770      	bx	lr
 80086b0:	20000084 	.word	0x20000084
	...

080086c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086c0:	4b07      	ldr	r3, [pc, #28]	@ (80086e0 <pxCurrentTCBConst2>)
 80086c2:	6819      	ldr	r1, [r3, #0]
 80086c4:	6808      	ldr	r0, [r1, #0]
 80086c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80086ca:	f380 8809 	msr	PSP, r0
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f04f 0000 	mov.w	r0, #0
 80086d6:	f380 8811 	msr	BASEPRI, r0
 80086da:	f04e 0e0d 	orr.w	lr, lr, #13
 80086de:	4770      	bx	lr

080086e0 <pxCurrentTCBConst2>:
 80086e0:	20000554 	.word	0x20000554
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop

080086e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80086e8:	4806      	ldr	r0, [pc, #24]	@ (8008704 <prvPortStartFirstTask+0x1c>)
 80086ea:	6800      	ldr	r0, [r0, #0]
 80086ec:	6800      	ldr	r0, [r0, #0]
 80086ee:	f380 8808 	msr	MSP, r0
 80086f2:	b662      	cpsie	i
 80086f4:	b661      	cpsie	f
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	df00      	svc	0
 8008700:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008702:	bf00      	nop
 8008704:	e000ed08 	.word	0xe000ed08

08008708 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800870e:	4b32      	ldr	r3, [pc, #200]	@ (80087d8 <xPortStartScheduler+0xd0>)
 8008710:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	b2db      	uxtb	r3, r3
 8008718:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	22ff      	movs	r2, #255	@ 0xff
 800871e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	b2db      	uxtb	r3, r3
 8008726:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	b2db      	uxtb	r3, r3
 800872c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008730:	b2da      	uxtb	r2, r3
 8008732:	4b2a      	ldr	r3, [pc, #168]	@ (80087dc <xPortStartScheduler+0xd4>)
 8008734:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008736:	4b2a      	ldr	r3, [pc, #168]	@ (80087e0 <xPortStartScheduler+0xd8>)
 8008738:	2207      	movs	r2, #7
 800873a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800873c:	e009      	b.n	8008752 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800873e:	4b28      	ldr	r3, [pc, #160]	@ (80087e0 <xPortStartScheduler+0xd8>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3b01      	subs	r3, #1
 8008744:	4a26      	ldr	r2, [pc, #152]	@ (80087e0 <xPortStartScheduler+0xd8>)
 8008746:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008748:	78fb      	ldrb	r3, [r7, #3]
 800874a:	b2db      	uxtb	r3, r3
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	b2db      	uxtb	r3, r3
 8008750:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008752:	78fb      	ldrb	r3, [r7, #3]
 8008754:	b2db      	uxtb	r3, r3
 8008756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800875a:	2b80      	cmp	r3, #128	@ 0x80
 800875c:	d0ef      	beq.n	800873e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800875e:	4b20      	ldr	r3, [pc, #128]	@ (80087e0 <xPortStartScheduler+0xd8>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f1c3 0307 	rsb	r3, r3, #7
 8008766:	2b04      	cmp	r3, #4
 8008768:	d00b      	beq.n	8008782 <xPortStartScheduler+0x7a>
	__asm volatile
 800876a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	60bb      	str	r3, [r7, #8]
}
 800877c:	bf00      	nop
 800877e:	bf00      	nop
 8008780:	e7fd      	b.n	800877e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008782:	4b17      	ldr	r3, [pc, #92]	@ (80087e0 <xPortStartScheduler+0xd8>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	021b      	lsls	r3, r3, #8
 8008788:	4a15      	ldr	r2, [pc, #84]	@ (80087e0 <xPortStartScheduler+0xd8>)
 800878a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800878c:	4b14      	ldr	r3, [pc, #80]	@ (80087e0 <xPortStartScheduler+0xd8>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008794:	4a12      	ldr	r2, [pc, #72]	@ (80087e0 <xPortStartScheduler+0xd8>)
 8008796:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	b2da      	uxtb	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087a0:	4b10      	ldr	r3, [pc, #64]	@ (80087e4 <xPortStartScheduler+0xdc>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a0f      	ldr	r2, [pc, #60]	@ (80087e4 <xPortStartScheduler+0xdc>)
 80087a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80087aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087ac:	4b0d      	ldr	r3, [pc, #52]	@ (80087e4 <xPortStartScheduler+0xdc>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a0c      	ldr	r2, [pc, #48]	@ (80087e4 <xPortStartScheduler+0xdc>)
 80087b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80087b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087b8:	f000 f8b8 	bl	800892c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087bc:	4b0a      	ldr	r3, [pc, #40]	@ (80087e8 <xPortStartScheduler+0xe0>)
 80087be:	2200      	movs	r2, #0
 80087c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087c2:	f7ff ff91 	bl	80086e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087c6:	f7ff fabb 	bl	8007d40 <vTaskSwitchContext>
	prvTaskExitError();
 80087ca:	f7ff ff47 	bl	800865c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	e000e400 	.word	0xe000e400
 80087dc:	20000680 	.word	0x20000680
 80087e0:	20000684 	.word	0x20000684
 80087e4:	e000ed20 	.word	0xe000ed20
 80087e8:	20000084 	.word	0x20000084

080087ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	607b      	str	r3, [r7, #4]
}
 8008804:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008806:	4b0f      	ldr	r3, [pc, #60]	@ (8008844 <vPortEnterCritical+0x58>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	3301      	adds	r3, #1
 800880c:	4a0d      	ldr	r2, [pc, #52]	@ (8008844 <vPortEnterCritical+0x58>)
 800880e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008810:	4b0c      	ldr	r3, [pc, #48]	@ (8008844 <vPortEnterCritical+0x58>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d110      	bne.n	800883a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008818:	4b0b      	ldr	r3, [pc, #44]	@ (8008848 <vPortEnterCritical+0x5c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00b      	beq.n	800883a <vPortEnterCritical+0x4e>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	603b      	str	r3, [r7, #0]
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop
 8008838:	e7fd      	b.n	8008836 <vPortEnterCritical+0x4a>
	}
}
 800883a:	bf00      	nop
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	bc80      	pop	{r7}
 8008842:	4770      	bx	lr
 8008844:	20000084 	.word	0x20000084
 8008848:	e000ed04 	.word	0xe000ed04

0800884c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008852:	4b12      	ldr	r3, [pc, #72]	@ (800889c <vPortExitCritical+0x50>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10b      	bne.n	8008872 <vPortExitCritical+0x26>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	607b      	str	r3, [r7, #4]
}
 800886c:	bf00      	nop
 800886e:	bf00      	nop
 8008870:	e7fd      	b.n	800886e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008872:	4b0a      	ldr	r3, [pc, #40]	@ (800889c <vPortExitCritical+0x50>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	3b01      	subs	r3, #1
 8008878:	4a08      	ldr	r2, [pc, #32]	@ (800889c <vPortExitCritical+0x50>)
 800887a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800887c:	4b07      	ldr	r3, [pc, #28]	@ (800889c <vPortExitCritical+0x50>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d105      	bne.n	8008890 <vPortExitCritical+0x44>
 8008884:	2300      	movs	r3, #0
 8008886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	f383 8811 	msr	BASEPRI, r3
}
 800888e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	bc80      	pop	{r7}
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	20000084 	.word	0x20000084

080088a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088a0:	f3ef 8009 	mrs	r0, PSP
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	4b0d      	ldr	r3, [pc, #52]	@ (80088e0 <pxCurrentTCBConst>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80088b0:	6010      	str	r0, [r2, #0]
 80088b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80088b6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80088ba:	f380 8811 	msr	BASEPRI, r0
 80088be:	f7ff fa3f 	bl	8007d40 <vTaskSwitchContext>
 80088c2:	f04f 0000 	mov.w	r0, #0
 80088c6:	f380 8811 	msr	BASEPRI, r0
 80088ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80088ce:	6819      	ldr	r1, [r3, #0]
 80088d0:	6808      	ldr	r0, [r1, #0]
 80088d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80088d6:	f380 8809 	msr	PSP, r0
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	4770      	bx	lr

080088e0 <pxCurrentTCBConst>:
 80088e0:	20000554 	.word	0x20000554
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop

080088e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	607b      	str	r3, [r7, #4]
}
 8008900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008902:	f7ff f987 	bl	8007c14 <xTaskIncrementTick>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800890c:	4b06      	ldr	r3, [pc, #24]	@ (8008928 <SysTick_Handler+0x40>)
 800890e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	2300      	movs	r3, #0
 8008916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	f383 8811 	msr	BASEPRI, r3
}
 800891e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	e000ed04 	.word	0xe000ed04

0800892c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008930:	4b0a      	ldr	r3, [pc, #40]	@ (800895c <vPortSetupTimerInterrupt+0x30>)
 8008932:	2200      	movs	r2, #0
 8008934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008936:	4b0a      	ldr	r3, [pc, #40]	@ (8008960 <vPortSetupTimerInterrupt+0x34>)
 8008938:	2200      	movs	r2, #0
 800893a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800893c:	4b09      	ldr	r3, [pc, #36]	@ (8008964 <vPortSetupTimerInterrupt+0x38>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a09      	ldr	r2, [pc, #36]	@ (8008968 <vPortSetupTimerInterrupt+0x3c>)
 8008942:	fba2 2303 	umull	r2, r3, r2, r3
 8008946:	099b      	lsrs	r3, r3, #6
 8008948:	4a08      	ldr	r2, [pc, #32]	@ (800896c <vPortSetupTimerInterrupt+0x40>)
 800894a:	3b01      	subs	r3, #1
 800894c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800894e:	4b03      	ldr	r3, [pc, #12]	@ (800895c <vPortSetupTimerInterrupt+0x30>)
 8008950:	2207      	movs	r2, #7
 8008952:	601a      	str	r2, [r3, #0]
}
 8008954:	bf00      	nop
 8008956:	46bd      	mov	sp, r7
 8008958:	bc80      	pop	{r7}
 800895a:	4770      	bx	lr
 800895c:	e000e010 	.word	0xe000e010
 8008960:	e000e018 	.word	0xe000e018
 8008964:	20000078 	.word	0x20000078
 8008968:	10624dd3 	.word	0x10624dd3
 800896c:	e000e014 	.word	0xe000e014

08008970 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008976:	f3ef 8305 	mrs	r3, IPSR
 800897a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2b0f      	cmp	r3, #15
 8008980:	d915      	bls.n	80089ae <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008982:	4a17      	ldr	r2, [pc, #92]	@ (80089e0 <vPortValidateInterruptPriority+0x70>)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4413      	add	r3, r2
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800898c:	4b15      	ldr	r3, [pc, #84]	@ (80089e4 <vPortValidateInterruptPriority+0x74>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	7afa      	ldrb	r2, [r7, #11]
 8008992:	429a      	cmp	r2, r3
 8008994:	d20b      	bcs.n	80089ae <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	607b      	str	r3, [r7, #4]
}
 80089a8:	bf00      	nop
 80089aa:	bf00      	nop
 80089ac:	e7fd      	b.n	80089aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089ae:	4b0e      	ldr	r3, [pc, #56]	@ (80089e8 <vPortValidateInterruptPriority+0x78>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80089b6:	4b0d      	ldr	r3, [pc, #52]	@ (80089ec <vPortValidateInterruptPriority+0x7c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d90b      	bls.n	80089d6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	603b      	str	r3, [r7, #0]
}
 80089d0:	bf00      	nop
 80089d2:	bf00      	nop
 80089d4:	e7fd      	b.n	80089d2 <vPortValidateInterruptPriority+0x62>
	}
 80089d6:	bf00      	nop
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	bc80      	pop	{r7}
 80089de:	4770      	bx	lr
 80089e0:	e000e3f0 	.word	0xe000e3f0
 80089e4:	20000680 	.word	0x20000680
 80089e8:	e000ed0c 	.word	0xe000ed0c
 80089ec:	20000684 	.word	0x20000684

080089f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08a      	sub	sp, #40	@ 0x28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089fc:	f7ff f84c 	bl	8007a98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a00:	4b5c      	ldr	r3, [pc, #368]	@ (8008b74 <pvPortMalloc+0x184>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a08:	f000 f924 	bl	8008c54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a0c:	4b5a      	ldr	r3, [pc, #360]	@ (8008b78 <pvPortMalloc+0x188>)
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4013      	ands	r3, r2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f040 8095 	bne.w	8008b44 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d01e      	beq.n	8008a5e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008a20:	2208      	movs	r2, #8
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4413      	add	r3, r2
 8008a26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f003 0307 	and.w	r3, r3, #7
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d015      	beq.n	8008a5e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f023 0307 	bic.w	r3, r3, #7
 8008a38:	3308      	adds	r3, #8
 8008a3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f003 0307 	and.w	r3, r3, #7
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00b      	beq.n	8008a5e <pvPortMalloc+0x6e>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	617b      	str	r3, [r7, #20]
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	e7fd      	b.n	8008a5a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d06f      	beq.n	8008b44 <pvPortMalloc+0x154>
 8008a64:	4b45      	ldr	r3, [pc, #276]	@ (8008b7c <pvPortMalloc+0x18c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d86a      	bhi.n	8008b44 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a6e:	4b44      	ldr	r3, [pc, #272]	@ (8008b80 <pvPortMalloc+0x190>)
 8008a70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a72:	4b43      	ldr	r3, [pc, #268]	@ (8008b80 <pvPortMalloc+0x190>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a78:	e004      	b.n	8008a84 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d903      	bls.n	8008a96 <pvPortMalloc+0xa6>
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1f1      	bne.n	8008a7a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a96:	4b37      	ldr	r3, [pc, #220]	@ (8008b74 <pvPortMalloc+0x184>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d051      	beq.n	8008b44 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2208      	movs	r2, #8
 8008aa6:	4413      	add	r3, r2
 8008aa8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	1ad2      	subs	r2, r2, r3
 8008aba:	2308      	movs	r3, #8
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d920      	bls.n	8008b04 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	f003 0307 	and.w	r3, r3, #7
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00b      	beq.n	8008aec <pvPortMalloc+0xfc>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	613b      	str	r3, [r7, #16]
}
 8008ae6:	bf00      	nop
 8008ae8:	bf00      	nop
 8008aea:	e7fd      	b.n	8008ae8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	1ad2      	subs	r2, r2, r3
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008afe:	69b8      	ldr	r0, [r7, #24]
 8008b00:	f000 f90a 	bl	8008d18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b04:	4b1d      	ldr	r3, [pc, #116]	@ (8008b7c <pvPortMalloc+0x18c>)
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8008b7c <pvPortMalloc+0x18c>)
 8008b10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b12:	4b1a      	ldr	r3, [pc, #104]	@ (8008b7c <pvPortMalloc+0x18c>)
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	4b1b      	ldr	r3, [pc, #108]	@ (8008b84 <pvPortMalloc+0x194>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d203      	bcs.n	8008b26 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b1e:	4b17      	ldr	r3, [pc, #92]	@ (8008b7c <pvPortMalloc+0x18c>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a18      	ldr	r2, [pc, #96]	@ (8008b84 <pvPortMalloc+0x194>)
 8008b24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	4b13      	ldr	r3, [pc, #76]	@ (8008b78 <pvPortMalloc+0x188>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	431a      	orrs	r2, r3
 8008b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b36:	2200      	movs	r2, #0
 8008b38:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b3a:	4b13      	ldr	r3, [pc, #76]	@ (8008b88 <pvPortMalloc+0x198>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	4a11      	ldr	r2, [pc, #68]	@ (8008b88 <pvPortMalloc+0x198>)
 8008b42:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b44:	f7fe ffb6 	bl	8007ab4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f003 0307 	and.w	r3, r3, #7
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00b      	beq.n	8008b6a <pvPortMalloc+0x17a>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	60fb      	str	r3, [r7, #12]
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop
 8008b68:	e7fd      	b.n	8008b66 <pvPortMalloc+0x176>
	return pvReturn;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3728      	adds	r7, #40	@ 0x28
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	20001950 	.word	0x20001950
 8008b78:	20001964 	.word	0x20001964
 8008b7c:	20001954 	.word	0x20001954
 8008b80:	20001948 	.word	0x20001948
 8008b84:	20001958 	.word	0x20001958
 8008b88:	2000195c 	.word	0x2000195c

08008b8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d04f      	beq.n	8008c3e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b9e:	2308      	movs	r3, #8
 8008ba0:	425b      	negs	r3, r3
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	4b25      	ldr	r3, [pc, #148]	@ (8008c48 <vPortFree+0xbc>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10b      	bne.n	8008bd2 <vPortFree+0x46>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	60fb      	str	r3, [r7, #12]
}
 8008bcc:	bf00      	nop
 8008bce:	bf00      	nop
 8008bd0:	e7fd      	b.n	8008bce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00b      	beq.n	8008bf2 <vPortFree+0x66>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	60bb      	str	r3, [r7, #8]
}
 8008bec:	bf00      	nop
 8008bee:	bf00      	nop
 8008bf0:	e7fd      	b.n	8008bee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	4b14      	ldr	r3, [pc, #80]	@ (8008c48 <vPortFree+0xbc>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d01e      	beq.n	8008c3e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d11a      	bne.n	8008c3e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c48 <vPortFree+0xbc>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	43db      	mvns	r3, r3
 8008c12:	401a      	ands	r2, r3
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c18:	f7fe ff3e 	bl	8007a98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	4b0a      	ldr	r3, [pc, #40]	@ (8008c4c <vPortFree+0xc0>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4413      	add	r3, r2
 8008c26:	4a09      	ldr	r2, [pc, #36]	@ (8008c4c <vPortFree+0xc0>)
 8008c28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c2a:	6938      	ldr	r0, [r7, #16]
 8008c2c:	f000 f874 	bl	8008d18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c30:	4b07      	ldr	r3, [pc, #28]	@ (8008c50 <vPortFree+0xc4>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3301      	adds	r3, #1
 8008c36:	4a06      	ldr	r2, [pc, #24]	@ (8008c50 <vPortFree+0xc4>)
 8008c38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c3a:	f7fe ff3b 	bl	8007ab4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c3e:	bf00      	nop
 8008c40:	3718      	adds	r7, #24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	20001964 	.word	0x20001964
 8008c4c:	20001954 	.word	0x20001954
 8008c50:	20001960 	.word	0x20001960

08008c54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c5a:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8008c5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c60:	4b27      	ldr	r3, [pc, #156]	@ (8008d00 <prvHeapInit+0xac>)
 8008c62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00c      	beq.n	8008c88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	3307      	adds	r3, #7
 8008c72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f023 0307 	bic.w	r3, r3, #7
 8008c7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	4a1f      	ldr	r2, [pc, #124]	@ (8008d00 <prvHeapInit+0xac>)
 8008c84:	4413      	add	r3, r2
 8008c86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8008d04 <prvHeapInit+0xb0>)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c92:	4b1c      	ldr	r3, [pc, #112]	@ (8008d04 <prvHeapInit+0xb0>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ca0:	2208      	movs	r2, #8
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 0307 	bic.w	r3, r3, #7
 8008cae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4a15      	ldr	r2, [pc, #84]	@ (8008d08 <prvHeapInit+0xb4>)
 8008cb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cb6:	4b14      	ldr	r3, [pc, #80]	@ (8008d08 <prvHeapInit+0xb4>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cbe:	4b12      	ldr	r3, [pc, #72]	@ (8008d08 <prvHeapInit+0xb4>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	1ad2      	subs	r2, r2, r3
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008d08 <prvHeapInit+0xb4>)
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8008d0c <prvHeapInit+0xb8>)
 8008ce2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	4a09      	ldr	r2, [pc, #36]	@ (8008d10 <prvHeapInit+0xbc>)
 8008cea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cec:	4b09      	ldr	r3, [pc, #36]	@ (8008d14 <prvHeapInit+0xc0>)
 8008cee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008cf2:	601a      	str	r2, [r3, #0]
}
 8008cf4:	bf00      	nop
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bc80      	pop	{r7}
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	20000688 	.word	0x20000688
 8008d04:	20001948 	.word	0x20001948
 8008d08:	20001950 	.word	0x20001950
 8008d0c:	20001958 	.word	0x20001958
 8008d10:	20001954 	.word	0x20001954
 8008d14:	20001964 	.word	0x20001964

08008d18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d20:	4b27      	ldr	r3, [pc, #156]	@ (8008dc0 <prvInsertBlockIntoFreeList+0xa8>)
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	e002      	b.n	8008d2c <prvInsertBlockIntoFreeList+0x14>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d8f7      	bhi.n	8008d26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	4413      	add	r3, r2
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d108      	bne.n	8008d5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	441a      	add	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	441a      	add	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d118      	bne.n	8008da0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	4b14      	ldr	r3, [pc, #80]	@ (8008dc4 <prvInsertBlockIntoFreeList+0xac>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d00d      	beq.n	8008d96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	441a      	add	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	e008      	b.n	8008da8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d96:	4b0b      	ldr	r3, [pc, #44]	@ (8008dc4 <prvInsertBlockIntoFreeList+0xac>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	601a      	str	r2, [r3, #0]
 8008d9e:	e003      	b.n	8008da8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d002      	beq.n	8008db6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008db6:	bf00      	nop
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bc80      	pop	{r7}
 8008dbe:	4770      	bx	lr
 8008dc0:	20001948 	.word	0x20001948
 8008dc4:	20001950 	.word	0x20001950

08008dc8 <sniprintf>:
 8008dc8:	b40c      	push	{r2, r3}
 8008dca:	b530      	push	{r4, r5, lr}
 8008dcc:	4b17      	ldr	r3, [pc, #92]	@ (8008e2c <sniprintf+0x64>)
 8008dce:	1e0c      	subs	r4, r1, #0
 8008dd0:	681d      	ldr	r5, [r3, #0]
 8008dd2:	b09d      	sub	sp, #116	@ 0x74
 8008dd4:	da08      	bge.n	8008de8 <sniprintf+0x20>
 8008dd6:	238b      	movs	r3, #139	@ 0x8b
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	602b      	str	r3, [r5, #0]
 8008dde:	b01d      	add	sp, #116	@ 0x74
 8008de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008de4:	b002      	add	sp, #8
 8008de6:	4770      	bx	lr
 8008de8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008dec:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008df0:	bf0c      	ite	eq
 8008df2:	4623      	moveq	r3, r4
 8008df4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008df8:	9304      	str	r3, [sp, #16]
 8008dfa:	9307      	str	r3, [sp, #28]
 8008dfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008e00:	9002      	str	r0, [sp, #8]
 8008e02:	9006      	str	r0, [sp, #24]
 8008e04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008e08:	4628      	mov	r0, r5
 8008e0a:	ab21      	add	r3, sp, #132	@ 0x84
 8008e0c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008e0e:	a902      	add	r1, sp, #8
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	f000 f9c1 	bl	8009198 <_svfiprintf_r>
 8008e16:	1c43      	adds	r3, r0, #1
 8008e18:	bfbc      	itt	lt
 8008e1a:	238b      	movlt	r3, #139	@ 0x8b
 8008e1c:	602b      	strlt	r3, [r5, #0]
 8008e1e:	2c00      	cmp	r4, #0
 8008e20:	d0dd      	beq.n	8008dde <sniprintf+0x16>
 8008e22:	2200      	movs	r2, #0
 8008e24:	9b02      	ldr	r3, [sp, #8]
 8008e26:	701a      	strb	r2, [r3, #0]
 8008e28:	e7d9      	b.n	8008dde <sniprintf+0x16>
 8008e2a:	bf00      	nop
 8008e2c:	20000088 	.word	0x20000088

08008e30 <siprintf>:
 8008e30:	b40e      	push	{r1, r2, r3}
 8008e32:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e36:	b500      	push	{lr}
 8008e38:	b09c      	sub	sp, #112	@ 0x70
 8008e3a:	ab1d      	add	r3, sp, #116	@ 0x74
 8008e3c:	9002      	str	r0, [sp, #8]
 8008e3e:	9006      	str	r0, [sp, #24]
 8008e40:	9107      	str	r1, [sp, #28]
 8008e42:	9104      	str	r1, [sp, #16]
 8008e44:	4808      	ldr	r0, [pc, #32]	@ (8008e68 <siprintf+0x38>)
 8008e46:	4909      	ldr	r1, [pc, #36]	@ (8008e6c <siprintf+0x3c>)
 8008e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4c:	9105      	str	r1, [sp, #20]
 8008e4e:	6800      	ldr	r0, [r0, #0]
 8008e50:	a902      	add	r1, sp, #8
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	f000 f9a0 	bl	8009198 <_svfiprintf_r>
 8008e58:	2200      	movs	r2, #0
 8008e5a:	9b02      	ldr	r3, [sp, #8]
 8008e5c:	701a      	strb	r2, [r3, #0]
 8008e5e:	b01c      	add	sp, #112	@ 0x70
 8008e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e64:	b003      	add	sp, #12
 8008e66:	4770      	bx	lr
 8008e68:	20000088 	.word	0x20000088
 8008e6c:	ffff0208 	.word	0xffff0208

08008e70 <memset>:
 8008e70:	4603      	mov	r3, r0
 8008e72:	4402      	add	r2, r0
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d100      	bne.n	8008e7a <memset+0xa>
 8008e78:	4770      	bx	lr
 8008e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e7e:	e7f9      	b.n	8008e74 <memset+0x4>

08008e80 <__errno>:
 8008e80:	4b01      	ldr	r3, [pc, #4]	@ (8008e88 <__errno+0x8>)
 8008e82:	6818      	ldr	r0, [r3, #0]
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	20000088 	.word	0x20000088

08008e8c <__libc_init_array>:
 8008e8c:	b570      	push	{r4, r5, r6, lr}
 8008e8e:	2600      	movs	r6, #0
 8008e90:	4d0c      	ldr	r5, [pc, #48]	@ (8008ec4 <__libc_init_array+0x38>)
 8008e92:	4c0d      	ldr	r4, [pc, #52]	@ (8008ec8 <__libc_init_array+0x3c>)
 8008e94:	1b64      	subs	r4, r4, r5
 8008e96:	10a4      	asrs	r4, r4, #2
 8008e98:	42a6      	cmp	r6, r4
 8008e9a:	d109      	bne.n	8008eb0 <__libc_init_array+0x24>
 8008e9c:	f001 fbcc 	bl	800a638 <_init>
 8008ea0:	2600      	movs	r6, #0
 8008ea2:	4d0a      	ldr	r5, [pc, #40]	@ (8008ecc <__libc_init_array+0x40>)
 8008ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8008ed0 <__libc_init_array+0x44>)
 8008ea6:	1b64      	subs	r4, r4, r5
 8008ea8:	10a4      	asrs	r4, r4, #2
 8008eaa:	42a6      	cmp	r6, r4
 8008eac:	d105      	bne.n	8008eba <__libc_init_array+0x2e>
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
 8008eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eb4:	4798      	blx	r3
 8008eb6:	3601      	adds	r6, #1
 8008eb8:	e7ee      	b.n	8008e98 <__libc_init_array+0xc>
 8008eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ebe:	4798      	blx	r3
 8008ec0:	3601      	adds	r6, #1
 8008ec2:	e7f2      	b.n	8008eaa <__libc_init_array+0x1e>
 8008ec4:	0800a9b8 	.word	0x0800a9b8
 8008ec8:	0800a9b8 	.word	0x0800a9b8
 8008ecc:	0800a9b8 	.word	0x0800a9b8
 8008ed0:	0800a9bc 	.word	0x0800a9bc

08008ed4 <__retarget_lock_acquire_recursive>:
 8008ed4:	4770      	bx	lr

08008ed6 <__retarget_lock_release_recursive>:
 8008ed6:	4770      	bx	lr

08008ed8 <memcpy>:
 8008ed8:	440a      	add	r2, r1
 8008eda:	4291      	cmp	r1, r2
 8008edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ee0:	d100      	bne.n	8008ee4 <memcpy+0xc>
 8008ee2:	4770      	bx	lr
 8008ee4:	b510      	push	{r4, lr}
 8008ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eea:	4291      	cmp	r1, r2
 8008eec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ef0:	d1f9      	bne.n	8008ee6 <memcpy+0xe>
 8008ef2:	bd10      	pop	{r4, pc}

08008ef4 <_free_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	2900      	cmp	r1, #0
 8008efa:	d040      	beq.n	8008f7e <_free_r+0x8a>
 8008efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f00:	1f0c      	subs	r4, r1, #4
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	bfb8      	it	lt
 8008f06:	18e4      	addlt	r4, r4, r3
 8008f08:	f000 f8de 	bl	80090c8 <__malloc_lock>
 8008f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8008f80 <_free_r+0x8c>)
 8008f0e:	6813      	ldr	r3, [r2, #0]
 8008f10:	b933      	cbnz	r3, 8008f20 <_free_r+0x2c>
 8008f12:	6063      	str	r3, [r4, #4]
 8008f14:	6014      	str	r4, [r2, #0]
 8008f16:	4628      	mov	r0, r5
 8008f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f1c:	f000 b8da 	b.w	80090d4 <__malloc_unlock>
 8008f20:	42a3      	cmp	r3, r4
 8008f22:	d908      	bls.n	8008f36 <_free_r+0x42>
 8008f24:	6820      	ldr	r0, [r4, #0]
 8008f26:	1821      	adds	r1, r4, r0
 8008f28:	428b      	cmp	r3, r1
 8008f2a:	bf01      	itttt	eq
 8008f2c:	6819      	ldreq	r1, [r3, #0]
 8008f2e:	685b      	ldreq	r3, [r3, #4]
 8008f30:	1809      	addeq	r1, r1, r0
 8008f32:	6021      	streq	r1, [r4, #0]
 8008f34:	e7ed      	b.n	8008f12 <_free_r+0x1e>
 8008f36:	461a      	mov	r2, r3
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	b10b      	cbz	r3, 8008f40 <_free_r+0x4c>
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	d9fa      	bls.n	8008f36 <_free_r+0x42>
 8008f40:	6811      	ldr	r1, [r2, #0]
 8008f42:	1850      	adds	r0, r2, r1
 8008f44:	42a0      	cmp	r0, r4
 8008f46:	d10b      	bne.n	8008f60 <_free_r+0x6c>
 8008f48:	6820      	ldr	r0, [r4, #0]
 8008f4a:	4401      	add	r1, r0
 8008f4c:	1850      	adds	r0, r2, r1
 8008f4e:	4283      	cmp	r3, r0
 8008f50:	6011      	str	r1, [r2, #0]
 8008f52:	d1e0      	bne.n	8008f16 <_free_r+0x22>
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	4408      	add	r0, r1
 8008f5a:	6010      	str	r0, [r2, #0]
 8008f5c:	6053      	str	r3, [r2, #4]
 8008f5e:	e7da      	b.n	8008f16 <_free_r+0x22>
 8008f60:	d902      	bls.n	8008f68 <_free_r+0x74>
 8008f62:	230c      	movs	r3, #12
 8008f64:	602b      	str	r3, [r5, #0]
 8008f66:	e7d6      	b.n	8008f16 <_free_r+0x22>
 8008f68:	6820      	ldr	r0, [r4, #0]
 8008f6a:	1821      	adds	r1, r4, r0
 8008f6c:	428b      	cmp	r3, r1
 8008f6e:	bf01      	itttt	eq
 8008f70:	6819      	ldreq	r1, [r3, #0]
 8008f72:	685b      	ldreq	r3, [r3, #4]
 8008f74:	1809      	addeq	r1, r1, r0
 8008f76:	6021      	streq	r1, [r4, #0]
 8008f78:	6063      	str	r3, [r4, #4]
 8008f7a:	6054      	str	r4, [r2, #4]
 8008f7c:	e7cb      	b.n	8008f16 <_free_r+0x22>
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	20001aac 	.word	0x20001aac

08008f84 <sbrk_aligned>:
 8008f84:	b570      	push	{r4, r5, r6, lr}
 8008f86:	4e0f      	ldr	r6, [pc, #60]	@ (8008fc4 <sbrk_aligned+0x40>)
 8008f88:	460c      	mov	r4, r1
 8008f8a:	6831      	ldr	r1, [r6, #0]
 8008f8c:	4605      	mov	r5, r0
 8008f8e:	b911      	cbnz	r1, 8008f96 <sbrk_aligned+0x12>
 8008f90:	f000 fbaa 	bl	80096e8 <_sbrk_r>
 8008f94:	6030      	str	r0, [r6, #0]
 8008f96:	4621      	mov	r1, r4
 8008f98:	4628      	mov	r0, r5
 8008f9a:	f000 fba5 	bl	80096e8 <_sbrk_r>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	d103      	bne.n	8008faa <sbrk_aligned+0x26>
 8008fa2:	f04f 34ff 	mov.w	r4, #4294967295
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	bd70      	pop	{r4, r5, r6, pc}
 8008faa:	1cc4      	adds	r4, r0, #3
 8008fac:	f024 0403 	bic.w	r4, r4, #3
 8008fb0:	42a0      	cmp	r0, r4
 8008fb2:	d0f8      	beq.n	8008fa6 <sbrk_aligned+0x22>
 8008fb4:	1a21      	subs	r1, r4, r0
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f000 fb96 	bl	80096e8 <_sbrk_r>
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	d1f2      	bne.n	8008fa6 <sbrk_aligned+0x22>
 8008fc0:	e7ef      	b.n	8008fa2 <sbrk_aligned+0x1e>
 8008fc2:	bf00      	nop
 8008fc4:	20001aa8 	.word	0x20001aa8

08008fc8 <_malloc_r>:
 8008fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fcc:	1ccd      	adds	r5, r1, #3
 8008fce:	f025 0503 	bic.w	r5, r5, #3
 8008fd2:	3508      	adds	r5, #8
 8008fd4:	2d0c      	cmp	r5, #12
 8008fd6:	bf38      	it	cc
 8008fd8:	250c      	movcc	r5, #12
 8008fda:	2d00      	cmp	r5, #0
 8008fdc:	4606      	mov	r6, r0
 8008fde:	db01      	blt.n	8008fe4 <_malloc_r+0x1c>
 8008fe0:	42a9      	cmp	r1, r5
 8008fe2:	d904      	bls.n	8008fee <_malloc_r+0x26>
 8008fe4:	230c      	movs	r3, #12
 8008fe6:	6033      	str	r3, [r6, #0]
 8008fe8:	2000      	movs	r0, #0
 8008fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090c4 <_malloc_r+0xfc>
 8008ff2:	f000 f869 	bl	80090c8 <__malloc_lock>
 8008ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8008ffa:	461c      	mov	r4, r3
 8008ffc:	bb44      	cbnz	r4, 8009050 <_malloc_r+0x88>
 8008ffe:	4629      	mov	r1, r5
 8009000:	4630      	mov	r0, r6
 8009002:	f7ff ffbf 	bl	8008f84 <sbrk_aligned>
 8009006:	1c43      	adds	r3, r0, #1
 8009008:	4604      	mov	r4, r0
 800900a:	d158      	bne.n	80090be <_malloc_r+0xf6>
 800900c:	f8d8 4000 	ldr.w	r4, [r8]
 8009010:	4627      	mov	r7, r4
 8009012:	2f00      	cmp	r7, #0
 8009014:	d143      	bne.n	800909e <_malloc_r+0xd6>
 8009016:	2c00      	cmp	r4, #0
 8009018:	d04b      	beq.n	80090b2 <_malloc_r+0xea>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	4639      	mov	r1, r7
 800901e:	4630      	mov	r0, r6
 8009020:	eb04 0903 	add.w	r9, r4, r3
 8009024:	f000 fb60 	bl	80096e8 <_sbrk_r>
 8009028:	4581      	cmp	r9, r0
 800902a:	d142      	bne.n	80090b2 <_malloc_r+0xea>
 800902c:	6821      	ldr	r1, [r4, #0]
 800902e:	4630      	mov	r0, r6
 8009030:	1a6d      	subs	r5, r5, r1
 8009032:	4629      	mov	r1, r5
 8009034:	f7ff ffa6 	bl	8008f84 <sbrk_aligned>
 8009038:	3001      	adds	r0, #1
 800903a:	d03a      	beq.n	80090b2 <_malloc_r+0xea>
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	442b      	add	r3, r5
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	f8d8 3000 	ldr.w	r3, [r8]
 8009046:	685a      	ldr	r2, [r3, #4]
 8009048:	bb62      	cbnz	r2, 80090a4 <_malloc_r+0xdc>
 800904a:	f8c8 7000 	str.w	r7, [r8]
 800904e:	e00f      	b.n	8009070 <_malloc_r+0xa8>
 8009050:	6822      	ldr	r2, [r4, #0]
 8009052:	1b52      	subs	r2, r2, r5
 8009054:	d420      	bmi.n	8009098 <_malloc_r+0xd0>
 8009056:	2a0b      	cmp	r2, #11
 8009058:	d917      	bls.n	800908a <_malloc_r+0xc2>
 800905a:	1961      	adds	r1, r4, r5
 800905c:	42a3      	cmp	r3, r4
 800905e:	6025      	str	r5, [r4, #0]
 8009060:	bf18      	it	ne
 8009062:	6059      	strne	r1, [r3, #4]
 8009064:	6863      	ldr	r3, [r4, #4]
 8009066:	bf08      	it	eq
 8009068:	f8c8 1000 	streq.w	r1, [r8]
 800906c:	5162      	str	r2, [r4, r5]
 800906e:	604b      	str	r3, [r1, #4]
 8009070:	4630      	mov	r0, r6
 8009072:	f000 f82f 	bl	80090d4 <__malloc_unlock>
 8009076:	f104 000b 	add.w	r0, r4, #11
 800907a:	1d23      	adds	r3, r4, #4
 800907c:	f020 0007 	bic.w	r0, r0, #7
 8009080:	1ac2      	subs	r2, r0, r3
 8009082:	bf1c      	itt	ne
 8009084:	1a1b      	subne	r3, r3, r0
 8009086:	50a3      	strne	r3, [r4, r2]
 8009088:	e7af      	b.n	8008fea <_malloc_r+0x22>
 800908a:	6862      	ldr	r2, [r4, #4]
 800908c:	42a3      	cmp	r3, r4
 800908e:	bf0c      	ite	eq
 8009090:	f8c8 2000 	streq.w	r2, [r8]
 8009094:	605a      	strne	r2, [r3, #4]
 8009096:	e7eb      	b.n	8009070 <_malloc_r+0xa8>
 8009098:	4623      	mov	r3, r4
 800909a:	6864      	ldr	r4, [r4, #4]
 800909c:	e7ae      	b.n	8008ffc <_malloc_r+0x34>
 800909e:	463c      	mov	r4, r7
 80090a0:	687f      	ldr	r7, [r7, #4]
 80090a2:	e7b6      	b.n	8009012 <_malloc_r+0x4a>
 80090a4:	461a      	mov	r2, r3
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	42a3      	cmp	r3, r4
 80090aa:	d1fb      	bne.n	80090a4 <_malloc_r+0xdc>
 80090ac:	2300      	movs	r3, #0
 80090ae:	6053      	str	r3, [r2, #4]
 80090b0:	e7de      	b.n	8009070 <_malloc_r+0xa8>
 80090b2:	230c      	movs	r3, #12
 80090b4:	4630      	mov	r0, r6
 80090b6:	6033      	str	r3, [r6, #0]
 80090b8:	f000 f80c 	bl	80090d4 <__malloc_unlock>
 80090bc:	e794      	b.n	8008fe8 <_malloc_r+0x20>
 80090be:	6005      	str	r5, [r0, #0]
 80090c0:	e7d6      	b.n	8009070 <_malloc_r+0xa8>
 80090c2:	bf00      	nop
 80090c4:	20001aac 	.word	0x20001aac

080090c8 <__malloc_lock>:
 80090c8:	4801      	ldr	r0, [pc, #4]	@ (80090d0 <__malloc_lock+0x8>)
 80090ca:	f7ff bf03 	b.w	8008ed4 <__retarget_lock_acquire_recursive>
 80090ce:	bf00      	nop
 80090d0:	20001aa4 	.word	0x20001aa4

080090d4 <__malloc_unlock>:
 80090d4:	4801      	ldr	r0, [pc, #4]	@ (80090dc <__malloc_unlock+0x8>)
 80090d6:	f7ff befe 	b.w	8008ed6 <__retarget_lock_release_recursive>
 80090da:	bf00      	nop
 80090dc:	20001aa4 	.word	0x20001aa4

080090e0 <__ssputs_r>:
 80090e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e4:	461f      	mov	r7, r3
 80090e6:	688e      	ldr	r6, [r1, #8]
 80090e8:	4682      	mov	sl, r0
 80090ea:	42be      	cmp	r6, r7
 80090ec:	460c      	mov	r4, r1
 80090ee:	4690      	mov	r8, r2
 80090f0:	680b      	ldr	r3, [r1, #0]
 80090f2:	d82d      	bhi.n	8009150 <__ssputs_r+0x70>
 80090f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80090fc:	d026      	beq.n	800914c <__ssputs_r+0x6c>
 80090fe:	6965      	ldr	r5, [r4, #20]
 8009100:	6909      	ldr	r1, [r1, #16]
 8009102:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009106:	eba3 0901 	sub.w	r9, r3, r1
 800910a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800910e:	1c7b      	adds	r3, r7, #1
 8009110:	444b      	add	r3, r9
 8009112:	106d      	asrs	r5, r5, #1
 8009114:	429d      	cmp	r5, r3
 8009116:	bf38      	it	cc
 8009118:	461d      	movcc	r5, r3
 800911a:	0553      	lsls	r3, r2, #21
 800911c:	d527      	bpl.n	800916e <__ssputs_r+0x8e>
 800911e:	4629      	mov	r1, r5
 8009120:	f7ff ff52 	bl	8008fc8 <_malloc_r>
 8009124:	4606      	mov	r6, r0
 8009126:	b360      	cbz	r0, 8009182 <__ssputs_r+0xa2>
 8009128:	464a      	mov	r2, r9
 800912a:	6921      	ldr	r1, [r4, #16]
 800912c:	f7ff fed4 	bl	8008ed8 <memcpy>
 8009130:	89a3      	ldrh	r3, [r4, #12]
 8009132:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800913a:	81a3      	strh	r3, [r4, #12]
 800913c:	6126      	str	r6, [r4, #16]
 800913e:	444e      	add	r6, r9
 8009140:	6026      	str	r6, [r4, #0]
 8009142:	463e      	mov	r6, r7
 8009144:	6165      	str	r5, [r4, #20]
 8009146:	eba5 0509 	sub.w	r5, r5, r9
 800914a:	60a5      	str	r5, [r4, #8]
 800914c:	42be      	cmp	r6, r7
 800914e:	d900      	bls.n	8009152 <__ssputs_r+0x72>
 8009150:	463e      	mov	r6, r7
 8009152:	4632      	mov	r2, r6
 8009154:	4641      	mov	r1, r8
 8009156:	6820      	ldr	r0, [r4, #0]
 8009158:	f000 faac 	bl	80096b4 <memmove>
 800915c:	2000      	movs	r0, #0
 800915e:	68a3      	ldr	r3, [r4, #8]
 8009160:	1b9b      	subs	r3, r3, r6
 8009162:	60a3      	str	r3, [r4, #8]
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	4433      	add	r3, r6
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916e:	462a      	mov	r2, r5
 8009170:	f000 fad8 	bl	8009724 <_realloc_r>
 8009174:	4606      	mov	r6, r0
 8009176:	2800      	cmp	r0, #0
 8009178:	d1e0      	bne.n	800913c <__ssputs_r+0x5c>
 800917a:	4650      	mov	r0, sl
 800917c:	6921      	ldr	r1, [r4, #16]
 800917e:	f7ff feb9 	bl	8008ef4 <_free_r>
 8009182:	230c      	movs	r3, #12
 8009184:	f8ca 3000 	str.w	r3, [sl]
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	f04f 30ff 	mov.w	r0, #4294967295
 800918e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009192:	81a3      	strh	r3, [r4, #12]
 8009194:	e7e9      	b.n	800916a <__ssputs_r+0x8a>
	...

08009198 <_svfiprintf_r>:
 8009198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800919c:	4698      	mov	r8, r3
 800919e:	898b      	ldrh	r3, [r1, #12]
 80091a0:	4607      	mov	r7, r0
 80091a2:	061b      	lsls	r3, r3, #24
 80091a4:	460d      	mov	r5, r1
 80091a6:	4614      	mov	r4, r2
 80091a8:	b09d      	sub	sp, #116	@ 0x74
 80091aa:	d510      	bpl.n	80091ce <_svfiprintf_r+0x36>
 80091ac:	690b      	ldr	r3, [r1, #16]
 80091ae:	b973      	cbnz	r3, 80091ce <_svfiprintf_r+0x36>
 80091b0:	2140      	movs	r1, #64	@ 0x40
 80091b2:	f7ff ff09 	bl	8008fc8 <_malloc_r>
 80091b6:	6028      	str	r0, [r5, #0]
 80091b8:	6128      	str	r0, [r5, #16]
 80091ba:	b930      	cbnz	r0, 80091ca <_svfiprintf_r+0x32>
 80091bc:	230c      	movs	r3, #12
 80091be:	603b      	str	r3, [r7, #0]
 80091c0:	f04f 30ff 	mov.w	r0, #4294967295
 80091c4:	b01d      	add	sp, #116	@ 0x74
 80091c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ca:	2340      	movs	r3, #64	@ 0x40
 80091cc:	616b      	str	r3, [r5, #20]
 80091ce:	2300      	movs	r3, #0
 80091d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80091d2:	2320      	movs	r3, #32
 80091d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091d8:	2330      	movs	r3, #48	@ 0x30
 80091da:	f04f 0901 	mov.w	r9, #1
 80091de:	f8cd 800c 	str.w	r8, [sp, #12]
 80091e2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800937c <_svfiprintf_r+0x1e4>
 80091e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091ea:	4623      	mov	r3, r4
 80091ec:	469a      	mov	sl, r3
 80091ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091f2:	b10a      	cbz	r2, 80091f8 <_svfiprintf_r+0x60>
 80091f4:	2a25      	cmp	r2, #37	@ 0x25
 80091f6:	d1f9      	bne.n	80091ec <_svfiprintf_r+0x54>
 80091f8:	ebba 0b04 	subs.w	fp, sl, r4
 80091fc:	d00b      	beq.n	8009216 <_svfiprintf_r+0x7e>
 80091fe:	465b      	mov	r3, fp
 8009200:	4622      	mov	r2, r4
 8009202:	4629      	mov	r1, r5
 8009204:	4638      	mov	r0, r7
 8009206:	f7ff ff6b 	bl	80090e0 <__ssputs_r>
 800920a:	3001      	adds	r0, #1
 800920c:	f000 80a7 	beq.w	800935e <_svfiprintf_r+0x1c6>
 8009210:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009212:	445a      	add	r2, fp
 8009214:	9209      	str	r2, [sp, #36]	@ 0x24
 8009216:	f89a 3000 	ldrb.w	r3, [sl]
 800921a:	2b00      	cmp	r3, #0
 800921c:	f000 809f 	beq.w	800935e <_svfiprintf_r+0x1c6>
 8009220:	2300      	movs	r3, #0
 8009222:	f04f 32ff 	mov.w	r2, #4294967295
 8009226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800922a:	f10a 0a01 	add.w	sl, sl, #1
 800922e:	9304      	str	r3, [sp, #16]
 8009230:	9307      	str	r3, [sp, #28]
 8009232:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009236:	931a      	str	r3, [sp, #104]	@ 0x68
 8009238:	4654      	mov	r4, sl
 800923a:	2205      	movs	r2, #5
 800923c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009240:	484e      	ldr	r0, [pc, #312]	@ (800937c <_svfiprintf_r+0x1e4>)
 8009242:	f000 fa61 	bl	8009708 <memchr>
 8009246:	9a04      	ldr	r2, [sp, #16]
 8009248:	b9d8      	cbnz	r0, 8009282 <_svfiprintf_r+0xea>
 800924a:	06d0      	lsls	r0, r2, #27
 800924c:	bf44      	itt	mi
 800924e:	2320      	movmi	r3, #32
 8009250:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009254:	0711      	lsls	r1, r2, #28
 8009256:	bf44      	itt	mi
 8009258:	232b      	movmi	r3, #43	@ 0x2b
 800925a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800925e:	f89a 3000 	ldrb.w	r3, [sl]
 8009262:	2b2a      	cmp	r3, #42	@ 0x2a
 8009264:	d015      	beq.n	8009292 <_svfiprintf_r+0xfa>
 8009266:	4654      	mov	r4, sl
 8009268:	2000      	movs	r0, #0
 800926a:	f04f 0c0a 	mov.w	ip, #10
 800926e:	9a07      	ldr	r2, [sp, #28]
 8009270:	4621      	mov	r1, r4
 8009272:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009276:	3b30      	subs	r3, #48	@ 0x30
 8009278:	2b09      	cmp	r3, #9
 800927a:	d94b      	bls.n	8009314 <_svfiprintf_r+0x17c>
 800927c:	b1b0      	cbz	r0, 80092ac <_svfiprintf_r+0x114>
 800927e:	9207      	str	r2, [sp, #28]
 8009280:	e014      	b.n	80092ac <_svfiprintf_r+0x114>
 8009282:	eba0 0308 	sub.w	r3, r0, r8
 8009286:	fa09 f303 	lsl.w	r3, r9, r3
 800928a:	4313      	orrs	r3, r2
 800928c:	46a2      	mov	sl, r4
 800928e:	9304      	str	r3, [sp, #16]
 8009290:	e7d2      	b.n	8009238 <_svfiprintf_r+0xa0>
 8009292:	9b03      	ldr	r3, [sp, #12]
 8009294:	1d19      	adds	r1, r3, #4
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	9103      	str	r1, [sp, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	bfbb      	ittet	lt
 800929e:	425b      	neglt	r3, r3
 80092a0:	f042 0202 	orrlt.w	r2, r2, #2
 80092a4:	9307      	strge	r3, [sp, #28]
 80092a6:	9307      	strlt	r3, [sp, #28]
 80092a8:	bfb8      	it	lt
 80092aa:	9204      	strlt	r2, [sp, #16]
 80092ac:	7823      	ldrb	r3, [r4, #0]
 80092ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80092b0:	d10a      	bne.n	80092c8 <_svfiprintf_r+0x130>
 80092b2:	7863      	ldrb	r3, [r4, #1]
 80092b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80092b6:	d132      	bne.n	800931e <_svfiprintf_r+0x186>
 80092b8:	9b03      	ldr	r3, [sp, #12]
 80092ba:	3402      	adds	r4, #2
 80092bc:	1d1a      	adds	r2, r3, #4
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	9203      	str	r2, [sp, #12]
 80092c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092c6:	9305      	str	r3, [sp, #20]
 80092c8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009380 <_svfiprintf_r+0x1e8>
 80092cc:	2203      	movs	r2, #3
 80092ce:	4650      	mov	r0, sl
 80092d0:	7821      	ldrb	r1, [r4, #0]
 80092d2:	f000 fa19 	bl	8009708 <memchr>
 80092d6:	b138      	cbz	r0, 80092e8 <_svfiprintf_r+0x150>
 80092d8:	2240      	movs	r2, #64	@ 0x40
 80092da:	9b04      	ldr	r3, [sp, #16]
 80092dc:	eba0 000a 	sub.w	r0, r0, sl
 80092e0:	4082      	lsls	r2, r0
 80092e2:	4313      	orrs	r3, r2
 80092e4:	3401      	adds	r4, #1
 80092e6:	9304      	str	r3, [sp, #16]
 80092e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ec:	2206      	movs	r2, #6
 80092ee:	4825      	ldr	r0, [pc, #148]	@ (8009384 <_svfiprintf_r+0x1ec>)
 80092f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092f4:	f000 fa08 	bl	8009708 <memchr>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d036      	beq.n	800936a <_svfiprintf_r+0x1d2>
 80092fc:	4b22      	ldr	r3, [pc, #136]	@ (8009388 <_svfiprintf_r+0x1f0>)
 80092fe:	bb1b      	cbnz	r3, 8009348 <_svfiprintf_r+0x1b0>
 8009300:	9b03      	ldr	r3, [sp, #12]
 8009302:	3307      	adds	r3, #7
 8009304:	f023 0307 	bic.w	r3, r3, #7
 8009308:	3308      	adds	r3, #8
 800930a:	9303      	str	r3, [sp, #12]
 800930c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800930e:	4433      	add	r3, r6
 8009310:	9309      	str	r3, [sp, #36]	@ 0x24
 8009312:	e76a      	b.n	80091ea <_svfiprintf_r+0x52>
 8009314:	460c      	mov	r4, r1
 8009316:	2001      	movs	r0, #1
 8009318:	fb0c 3202 	mla	r2, ip, r2, r3
 800931c:	e7a8      	b.n	8009270 <_svfiprintf_r+0xd8>
 800931e:	2300      	movs	r3, #0
 8009320:	f04f 0c0a 	mov.w	ip, #10
 8009324:	4619      	mov	r1, r3
 8009326:	3401      	adds	r4, #1
 8009328:	9305      	str	r3, [sp, #20]
 800932a:	4620      	mov	r0, r4
 800932c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009330:	3a30      	subs	r2, #48	@ 0x30
 8009332:	2a09      	cmp	r2, #9
 8009334:	d903      	bls.n	800933e <_svfiprintf_r+0x1a6>
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0c6      	beq.n	80092c8 <_svfiprintf_r+0x130>
 800933a:	9105      	str	r1, [sp, #20]
 800933c:	e7c4      	b.n	80092c8 <_svfiprintf_r+0x130>
 800933e:	4604      	mov	r4, r0
 8009340:	2301      	movs	r3, #1
 8009342:	fb0c 2101 	mla	r1, ip, r1, r2
 8009346:	e7f0      	b.n	800932a <_svfiprintf_r+0x192>
 8009348:	ab03      	add	r3, sp, #12
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	462a      	mov	r2, r5
 800934e:	4638      	mov	r0, r7
 8009350:	4b0e      	ldr	r3, [pc, #56]	@ (800938c <_svfiprintf_r+0x1f4>)
 8009352:	a904      	add	r1, sp, #16
 8009354:	f3af 8000 	nop.w
 8009358:	1c42      	adds	r2, r0, #1
 800935a:	4606      	mov	r6, r0
 800935c:	d1d6      	bne.n	800930c <_svfiprintf_r+0x174>
 800935e:	89ab      	ldrh	r3, [r5, #12]
 8009360:	065b      	lsls	r3, r3, #25
 8009362:	f53f af2d 	bmi.w	80091c0 <_svfiprintf_r+0x28>
 8009366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009368:	e72c      	b.n	80091c4 <_svfiprintf_r+0x2c>
 800936a:	ab03      	add	r3, sp, #12
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	462a      	mov	r2, r5
 8009370:	4638      	mov	r0, r7
 8009372:	4b06      	ldr	r3, [pc, #24]	@ (800938c <_svfiprintf_r+0x1f4>)
 8009374:	a904      	add	r1, sp, #16
 8009376:	f000 f87d 	bl	8009474 <_printf_i>
 800937a:	e7ed      	b.n	8009358 <_svfiprintf_r+0x1c0>
 800937c:	0800a94a 	.word	0x0800a94a
 8009380:	0800a950 	.word	0x0800a950
 8009384:	0800a954 	.word	0x0800a954
 8009388:	00000000 	.word	0x00000000
 800938c:	080090e1 	.word	0x080090e1

08009390 <_printf_common>:
 8009390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009394:	4616      	mov	r6, r2
 8009396:	4698      	mov	r8, r3
 8009398:	688a      	ldr	r2, [r1, #8]
 800939a:	690b      	ldr	r3, [r1, #16]
 800939c:	4607      	mov	r7, r0
 800939e:	4293      	cmp	r3, r2
 80093a0:	bfb8      	it	lt
 80093a2:	4613      	movlt	r3, r2
 80093a4:	6033      	str	r3, [r6, #0]
 80093a6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80093aa:	460c      	mov	r4, r1
 80093ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093b0:	b10a      	cbz	r2, 80093b6 <_printf_common+0x26>
 80093b2:	3301      	adds	r3, #1
 80093b4:	6033      	str	r3, [r6, #0]
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	0699      	lsls	r1, r3, #26
 80093ba:	bf42      	ittt	mi
 80093bc:	6833      	ldrmi	r3, [r6, #0]
 80093be:	3302      	addmi	r3, #2
 80093c0:	6033      	strmi	r3, [r6, #0]
 80093c2:	6825      	ldr	r5, [r4, #0]
 80093c4:	f015 0506 	ands.w	r5, r5, #6
 80093c8:	d106      	bne.n	80093d8 <_printf_common+0x48>
 80093ca:	f104 0a19 	add.w	sl, r4, #25
 80093ce:	68e3      	ldr	r3, [r4, #12]
 80093d0:	6832      	ldr	r2, [r6, #0]
 80093d2:	1a9b      	subs	r3, r3, r2
 80093d4:	42ab      	cmp	r3, r5
 80093d6:	dc2b      	bgt.n	8009430 <_printf_common+0xa0>
 80093d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093dc:	6822      	ldr	r2, [r4, #0]
 80093de:	3b00      	subs	r3, #0
 80093e0:	bf18      	it	ne
 80093e2:	2301      	movne	r3, #1
 80093e4:	0692      	lsls	r2, r2, #26
 80093e6:	d430      	bmi.n	800944a <_printf_common+0xba>
 80093e8:	4641      	mov	r1, r8
 80093ea:	4638      	mov	r0, r7
 80093ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80093f0:	47c8      	blx	r9
 80093f2:	3001      	adds	r0, #1
 80093f4:	d023      	beq.n	800943e <_printf_common+0xae>
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	6922      	ldr	r2, [r4, #16]
 80093fa:	f003 0306 	and.w	r3, r3, #6
 80093fe:	2b04      	cmp	r3, #4
 8009400:	bf14      	ite	ne
 8009402:	2500      	movne	r5, #0
 8009404:	6833      	ldreq	r3, [r6, #0]
 8009406:	f04f 0600 	mov.w	r6, #0
 800940a:	bf08      	it	eq
 800940c:	68e5      	ldreq	r5, [r4, #12]
 800940e:	f104 041a 	add.w	r4, r4, #26
 8009412:	bf08      	it	eq
 8009414:	1aed      	subeq	r5, r5, r3
 8009416:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800941a:	bf08      	it	eq
 800941c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009420:	4293      	cmp	r3, r2
 8009422:	bfc4      	itt	gt
 8009424:	1a9b      	subgt	r3, r3, r2
 8009426:	18ed      	addgt	r5, r5, r3
 8009428:	42b5      	cmp	r5, r6
 800942a:	d11a      	bne.n	8009462 <_printf_common+0xd2>
 800942c:	2000      	movs	r0, #0
 800942e:	e008      	b.n	8009442 <_printf_common+0xb2>
 8009430:	2301      	movs	r3, #1
 8009432:	4652      	mov	r2, sl
 8009434:	4641      	mov	r1, r8
 8009436:	4638      	mov	r0, r7
 8009438:	47c8      	blx	r9
 800943a:	3001      	adds	r0, #1
 800943c:	d103      	bne.n	8009446 <_printf_common+0xb6>
 800943e:	f04f 30ff 	mov.w	r0, #4294967295
 8009442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009446:	3501      	adds	r5, #1
 8009448:	e7c1      	b.n	80093ce <_printf_common+0x3e>
 800944a:	2030      	movs	r0, #48	@ 0x30
 800944c:	18e1      	adds	r1, r4, r3
 800944e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009452:	1c5a      	adds	r2, r3, #1
 8009454:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009458:	4422      	add	r2, r4
 800945a:	3302      	adds	r3, #2
 800945c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009460:	e7c2      	b.n	80093e8 <_printf_common+0x58>
 8009462:	2301      	movs	r3, #1
 8009464:	4622      	mov	r2, r4
 8009466:	4641      	mov	r1, r8
 8009468:	4638      	mov	r0, r7
 800946a:	47c8      	blx	r9
 800946c:	3001      	adds	r0, #1
 800946e:	d0e6      	beq.n	800943e <_printf_common+0xae>
 8009470:	3601      	adds	r6, #1
 8009472:	e7d9      	b.n	8009428 <_printf_common+0x98>

08009474 <_printf_i>:
 8009474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009478:	7e0f      	ldrb	r7, [r1, #24]
 800947a:	4691      	mov	r9, r2
 800947c:	2f78      	cmp	r7, #120	@ 0x78
 800947e:	4680      	mov	r8, r0
 8009480:	460c      	mov	r4, r1
 8009482:	469a      	mov	sl, r3
 8009484:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009486:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800948a:	d807      	bhi.n	800949c <_printf_i+0x28>
 800948c:	2f62      	cmp	r7, #98	@ 0x62
 800948e:	d80a      	bhi.n	80094a6 <_printf_i+0x32>
 8009490:	2f00      	cmp	r7, #0
 8009492:	f000 80d3 	beq.w	800963c <_printf_i+0x1c8>
 8009496:	2f58      	cmp	r7, #88	@ 0x58
 8009498:	f000 80ba 	beq.w	8009610 <_printf_i+0x19c>
 800949c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094a4:	e03a      	b.n	800951c <_printf_i+0xa8>
 80094a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094aa:	2b15      	cmp	r3, #21
 80094ac:	d8f6      	bhi.n	800949c <_printf_i+0x28>
 80094ae:	a101      	add	r1, pc, #4	@ (adr r1, 80094b4 <_printf_i+0x40>)
 80094b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094b4:	0800950d 	.word	0x0800950d
 80094b8:	08009521 	.word	0x08009521
 80094bc:	0800949d 	.word	0x0800949d
 80094c0:	0800949d 	.word	0x0800949d
 80094c4:	0800949d 	.word	0x0800949d
 80094c8:	0800949d 	.word	0x0800949d
 80094cc:	08009521 	.word	0x08009521
 80094d0:	0800949d 	.word	0x0800949d
 80094d4:	0800949d 	.word	0x0800949d
 80094d8:	0800949d 	.word	0x0800949d
 80094dc:	0800949d 	.word	0x0800949d
 80094e0:	08009623 	.word	0x08009623
 80094e4:	0800954b 	.word	0x0800954b
 80094e8:	080095dd 	.word	0x080095dd
 80094ec:	0800949d 	.word	0x0800949d
 80094f0:	0800949d 	.word	0x0800949d
 80094f4:	08009645 	.word	0x08009645
 80094f8:	0800949d 	.word	0x0800949d
 80094fc:	0800954b 	.word	0x0800954b
 8009500:	0800949d 	.word	0x0800949d
 8009504:	0800949d 	.word	0x0800949d
 8009508:	080095e5 	.word	0x080095e5
 800950c:	6833      	ldr	r3, [r6, #0]
 800950e:	1d1a      	adds	r2, r3, #4
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6032      	str	r2, [r6, #0]
 8009514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009518:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800951c:	2301      	movs	r3, #1
 800951e:	e09e      	b.n	800965e <_printf_i+0x1ea>
 8009520:	6833      	ldr	r3, [r6, #0]
 8009522:	6820      	ldr	r0, [r4, #0]
 8009524:	1d19      	adds	r1, r3, #4
 8009526:	6031      	str	r1, [r6, #0]
 8009528:	0606      	lsls	r6, r0, #24
 800952a:	d501      	bpl.n	8009530 <_printf_i+0xbc>
 800952c:	681d      	ldr	r5, [r3, #0]
 800952e:	e003      	b.n	8009538 <_printf_i+0xc4>
 8009530:	0645      	lsls	r5, r0, #25
 8009532:	d5fb      	bpl.n	800952c <_printf_i+0xb8>
 8009534:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009538:	2d00      	cmp	r5, #0
 800953a:	da03      	bge.n	8009544 <_printf_i+0xd0>
 800953c:	232d      	movs	r3, #45	@ 0x2d
 800953e:	426d      	negs	r5, r5
 8009540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009544:	230a      	movs	r3, #10
 8009546:	4859      	ldr	r0, [pc, #356]	@ (80096ac <_printf_i+0x238>)
 8009548:	e011      	b.n	800956e <_printf_i+0xfa>
 800954a:	6821      	ldr	r1, [r4, #0]
 800954c:	6833      	ldr	r3, [r6, #0]
 800954e:	0608      	lsls	r0, r1, #24
 8009550:	f853 5b04 	ldr.w	r5, [r3], #4
 8009554:	d402      	bmi.n	800955c <_printf_i+0xe8>
 8009556:	0649      	lsls	r1, r1, #25
 8009558:	bf48      	it	mi
 800955a:	b2ad      	uxthmi	r5, r5
 800955c:	2f6f      	cmp	r7, #111	@ 0x6f
 800955e:	6033      	str	r3, [r6, #0]
 8009560:	bf14      	ite	ne
 8009562:	230a      	movne	r3, #10
 8009564:	2308      	moveq	r3, #8
 8009566:	4851      	ldr	r0, [pc, #324]	@ (80096ac <_printf_i+0x238>)
 8009568:	2100      	movs	r1, #0
 800956a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800956e:	6866      	ldr	r6, [r4, #4]
 8009570:	2e00      	cmp	r6, #0
 8009572:	bfa8      	it	ge
 8009574:	6821      	ldrge	r1, [r4, #0]
 8009576:	60a6      	str	r6, [r4, #8]
 8009578:	bfa4      	itt	ge
 800957a:	f021 0104 	bicge.w	r1, r1, #4
 800957e:	6021      	strge	r1, [r4, #0]
 8009580:	b90d      	cbnz	r5, 8009586 <_printf_i+0x112>
 8009582:	2e00      	cmp	r6, #0
 8009584:	d04b      	beq.n	800961e <_printf_i+0x1aa>
 8009586:	4616      	mov	r6, r2
 8009588:	fbb5 f1f3 	udiv	r1, r5, r3
 800958c:	fb03 5711 	mls	r7, r3, r1, r5
 8009590:	5dc7      	ldrb	r7, [r0, r7]
 8009592:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009596:	462f      	mov	r7, r5
 8009598:	42bb      	cmp	r3, r7
 800959a:	460d      	mov	r5, r1
 800959c:	d9f4      	bls.n	8009588 <_printf_i+0x114>
 800959e:	2b08      	cmp	r3, #8
 80095a0:	d10b      	bne.n	80095ba <_printf_i+0x146>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	07df      	lsls	r7, r3, #31
 80095a6:	d508      	bpl.n	80095ba <_printf_i+0x146>
 80095a8:	6923      	ldr	r3, [r4, #16]
 80095aa:	6861      	ldr	r1, [r4, #4]
 80095ac:	4299      	cmp	r1, r3
 80095ae:	bfde      	ittt	le
 80095b0:	2330      	movle	r3, #48	@ 0x30
 80095b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095ba:	1b92      	subs	r2, r2, r6
 80095bc:	6122      	str	r2, [r4, #16]
 80095be:	464b      	mov	r3, r9
 80095c0:	4621      	mov	r1, r4
 80095c2:	4640      	mov	r0, r8
 80095c4:	f8cd a000 	str.w	sl, [sp]
 80095c8:	aa03      	add	r2, sp, #12
 80095ca:	f7ff fee1 	bl	8009390 <_printf_common>
 80095ce:	3001      	adds	r0, #1
 80095d0:	d14a      	bne.n	8009668 <_printf_i+0x1f4>
 80095d2:	f04f 30ff 	mov.w	r0, #4294967295
 80095d6:	b004      	add	sp, #16
 80095d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	f043 0320 	orr.w	r3, r3, #32
 80095e2:	6023      	str	r3, [r4, #0]
 80095e4:	2778      	movs	r7, #120	@ 0x78
 80095e6:	4832      	ldr	r0, [pc, #200]	@ (80096b0 <_printf_i+0x23c>)
 80095e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	6831      	ldr	r1, [r6, #0]
 80095f0:	061f      	lsls	r7, r3, #24
 80095f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80095f6:	d402      	bmi.n	80095fe <_printf_i+0x18a>
 80095f8:	065f      	lsls	r7, r3, #25
 80095fa:	bf48      	it	mi
 80095fc:	b2ad      	uxthmi	r5, r5
 80095fe:	6031      	str	r1, [r6, #0]
 8009600:	07d9      	lsls	r1, r3, #31
 8009602:	bf44      	itt	mi
 8009604:	f043 0320 	orrmi.w	r3, r3, #32
 8009608:	6023      	strmi	r3, [r4, #0]
 800960a:	b11d      	cbz	r5, 8009614 <_printf_i+0x1a0>
 800960c:	2310      	movs	r3, #16
 800960e:	e7ab      	b.n	8009568 <_printf_i+0xf4>
 8009610:	4826      	ldr	r0, [pc, #152]	@ (80096ac <_printf_i+0x238>)
 8009612:	e7e9      	b.n	80095e8 <_printf_i+0x174>
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	f023 0320 	bic.w	r3, r3, #32
 800961a:	6023      	str	r3, [r4, #0]
 800961c:	e7f6      	b.n	800960c <_printf_i+0x198>
 800961e:	4616      	mov	r6, r2
 8009620:	e7bd      	b.n	800959e <_printf_i+0x12a>
 8009622:	6833      	ldr	r3, [r6, #0]
 8009624:	6825      	ldr	r5, [r4, #0]
 8009626:	1d18      	adds	r0, r3, #4
 8009628:	6961      	ldr	r1, [r4, #20]
 800962a:	6030      	str	r0, [r6, #0]
 800962c:	062e      	lsls	r6, r5, #24
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	d501      	bpl.n	8009636 <_printf_i+0x1c2>
 8009632:	6019      	str	r1, [r3, #0]
 8009634:	e002      	b.n	800963c <_printf_i+0x1c8>
 8009636:	0668      	lsls	r0, r5, #25
 8009638:	d5fb      	bpl.n	8009632 <_printf_i+0x1be>
 800963a:	8019      	strh	r1, [r3, #0]
 800963c:	2300      	movs	r3, #0
 800963e:	4616      	mov	r6, r2
 8009640:	6123      	str	r3, [r4, #16]
 8009642:	e7bc      	b.n	80095be <_printf_i+0x14a>
 8009644:	6833      	ldr	r3, [r6, #0]
 8009646:	2100      	movs	r1, #0
 8009648:	1d1a      	adds	r2, r3, #4
 800964a:	6032      	str	r2, [r6, #0]
 800964c:	681e      	ldr	r6, [r3, #0]
 800964e:	6862      	ldr	r2, [r4, #4]
 8009650:	4630      	mov	r0, r6
 8009652:	f000 f859 	bl	8009708 <memchr>
 8009656:	b108      	cbz	r0, 800965c <_printf_i+0x1e8>
 8009658:	1b80      	subs	r0, r0, r6
 800965a:	6060      	str	r0, [r4, #4]
 800965c:	6863      	ldr	r3, [r4, #4]
 800965e:	6123      	str	r3, [r4, #16]
 8009660:	2300      	movs	r3, #0
 8009662:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009666:	e7aa      	b.n	80095be <_printf_i+0x14a>
 8009668:	4632      	mov	r2, r6
 800966a:	4649      	mov	r1, r9
 800966c:	4640      	mov	r0, r8
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	47d0      	blx	sl
 8009672:	3001      	adds	r0, #1
 8009674:	d0ad      	beq.n	80095d2 <_printf_i+0x15e>
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	079b      	lsls	r3, r3, #30
 800967a:	d413      	bmi.n	80096a4 <_printf_i+0x230>
 800967c:	68e0      	ldr	r0, [r4, #12]
 800967e:	9b03      	ldr	r3, [sp, #12]
 8009680:	4298      	cmp	r0, r3
 8009682:	bfb8      	it	lt
 8009684:	4618      	movlt	r0, r3
 8009686:	e7a6      	b.n	80095d6 <_printf_i+0x162>
 8009688:	2301      	movs	r3, #1
 800968a:	4632      	mov	r2, r6
 800968c:	4649      	mov	r1, r9
 800968e:	4640      	mov	r0, r8
 8009690:	47d0      	blx	sl
 8009692:	3001      	adds	r0, #1
 8009694:	d09d      	beq.n	80095d2 <_printf_i+0x15e>
 8009696:	3501      	adds	r5, #1
 8009698:	68e3      	ldr	r3, [r4, #12]
 800969a:	9903      	ldr	r1, [sp, #12]
 800969c:	1a5b      	subs	r3, r3, r1
 800969e:	42ab      	cmp	r3, r5
 80096a0:	dcf2      	bgt.n	8009688 <_printf_i+0x214>
 80096a2:	e7eb      	b.n	800967c <_printf_i+0x208>
 80096a4:	2500      	movs	r5, #0
 80096a6:	f104 0619 	add.w	r6, r4, #25
 80096aa:	e7f5      	b.n	8009698 <_printf_i+0x224>
 80096ac:	0800a95b 	.word	0x0800a95b
 80096b0:	0800a96c 	.word	0x0800a96c

080096b4 <memmove>:
 80096b4:	4288      	cmp	r0, r1
 80096b6:	b510      	push	{r4, lr}
 80096b8:	eb01 0402 	add.w	r4, r1, r2
 80096bc:	d902      	bls.n	80096c4 <memmove+0x10>
 80096be:	4284      	cmp	r4, r0
 80096c0:	4623      	mov	r3, r4
 80096c2:	d807      	bhi.n	80096d4 <memmove+0x20>
 80096c4:	1e43      	subs	r3, r0, #1
 80096c6:	42a1      	cmp	r1, r4
 80096c8:	d008      	beq.n	80096dc <memmove+0x28>
 80096ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096d2:	e7f8      	b.n	80096c6 <memmove+0x12>
 80096d4:	4601      	mov	r1, r0
 80096d6:	4402      	add	r2, r0
 80096d8:	428a      	cmp	r2, r1
 80096da:	d100      	bne.n	80096de <memmove+0x2a>
 80096dc:	bd10      	pop	{r4, pc}
 80096de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096e6:	e7f7      	b.n	80096d8 <memmove+0x24>

080096e8 <_sbrk_r>:
 80096e8:	b538      	push	{r3, r4, r5, lr}
 80096ea:	2300      	movs	r3, #0
 80096ec:	4d05      	ldr	r5, [pc, #20]	@ (8009704 <_sbrk_r+0x1c>)
 80096ee:	4604      	mov	r4, r0
 80096f0:	4608      	mov	r0, r1
 80096f2:	602b      	str	r3, [r5, #0]
 80096f4:	f7f8 fe44 	bl	8002380 <_sbrk>
 80096f8:	1c43      	adds	r3, r0, #1
 80096fa:	d102      	bne.n	8009702 <_sbrk_r+0x1a>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	b103      	cbz	r3, 8009702 <_sbrk_r+0x1a>
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	20001aa0 	.word	0x20001aa0

08009708 <memchr>:
 8009708:	4603      	mov	r3, r0
 800970a:	b510      	push	{r4, lr}
 800970c:	b2c9      	uxtb	r1, r1
 800970e:	4402      	add	r2, r0
 8009710:	4293      	cmp	r3, r2
 8009712:	4618      	mov	r0, r3
 8009714:	d101      	bne.n	800971a <memchr+0x12>
 8009716:	2000      	movs	r0, #0
 8009718:	e003      	b.n	8009722 <memchr+0x1a>
 800971a:	7804      	ldrb	r4, [r0, #0]
 800971c:	3301      	adds	r3, #1
 800971e:	428c      	cmp	r4, r1
 8009720:	d1f6      	bne.n	8009710 <memchr+0x8>
 8009722:	bd10      	pop	{r4, pc}

08009724 <_realloc_r>:
 8009724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009728:	4680      	mov	r8, r0
 800972a:	4615      	mov	r5, r2
 800972c:	460c      	mov	r4, r1
 800972e:	b921      	cbnz	r1, 800973a <_realloc_r+0x16>
 8009730:	4611      	mov	r1, r2
 8009732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009736:	f7ff bc47 	b.w	8008fc8 <_malloc_r>
 800973a:	b92a      	cbnz	r2, 8009748 <_realloc_r+0x24>
 800973c:	f7ff fbda 	bl	8008ef4 <_free_r>
 8009740:	2400      	movs	r4, #0
 8009742:	4620      	mov	r0, r4
 8009744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009748:	f000 f81a 	bl	8009780 <_malloc_usable_size_r>
 800974c:	4285      	cmp	r5, r0
 800974e:	4606      	mov	r6, r0
 8009750:	d802      	bhi.n	8009758 <_realloc_r+0x34>
 8009752:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009756:	d8f4      	bhi.n	8009742 <_realloc_r+0x1e>
 8009758:	4629      	mov	r1, r5
 800975a:	4640      	mov	r0, r8
 800975c:	f7ff fc34 	bl	8008fc8 <_malloc_r>
 8009760:	4607      	mov	r7, r0
 8009762:	2800      	cmp	r0, #0
 8009764:	d0ec      	beq.n	8009740 <_realloc_r+0x1c>
 8009766:	42b5      	cmp	r5, r6
 8009768:	462a      	mov	r2, r5
 800976a:	4621      	mov	r1, r4
 800976c:	bf28      	it	cs
 800976e:	4632      	movcs	r2, r6
 8009770:	f7ff fbb2 	bl	8008ed8 <memcpy>
 8009774:	4621      	mov	r1, r4
 8009776:	4640      	mov	r0, r8
 8009778:	f7ff fbbc 	bl	8008ef4 <_free_r>
 800977c:	463c      	mov	r4, r7
 800977e:	e7e0      	b.n	8009742 <_realloc_r+0x1e>

08009780 <_malloc_usable_size_r>:
 8009780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009784:	1f18      	subs	r0, r3, #4
 8009786:	2b00      	cmp	r3, #0
 8009788:	bfbc      	itt	lt
 800978a:	580b      	ldrlt	r3, [r1, r0]
 800978c:	18c0      	addlt	r0, r0, r3
 800978e:	4770      	bx	lr

08009790 <pow>:
 8009790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009794:	4614      	mov	r4, r2
 8009796:	461d      	mov	r5, r3
 8009798:	4680      	mov	r8, r0
 800979a:	4689      	mov	r9, r1
 800979c:	f000 f8ac 	bl	80098f8 <__ieee754_pow>
 80097a0:	4622      	mov	r2, r4
 80097a2:	4606      	mov	r6, r0
 80097a4:	460f      	mov	r7, r1
 80097a6:	462b      	mov	r3, r5
 80097a8:	4620      	mov	r0, r4
 80097aa:	4629      	mov	r1, r5
 80097ac:	f7f7 f92e 	bl	8000a0c <__aeabi_dcmpun>
 80097b0:	bbc8      	cbnz	r0, 8009826 <pow+0x96>
 80097b2:	2200      	movs	r2, #0
 80097b4:	2300      	movs	r3, #0
 80097b6:	4640      	mov	r0, r8
 80097b8:	4649      	mov	r1, r9
 80097ba:	f7f7 f8f5 	bl	80009a8 <__aeabi_dcmpeq>
 80097be:	b1b8      	cbz	r0, 80097f0 <pow+0x60>
 80097c0:	2200      	movs	r2, #0
 80097c2:	2300      	movs	r3, #0
 80097c4:	4620      	mov	r0, r4
 80097c6:	4629      	mov	r1, r5
 80097c8:	f7f7 f8ee 	bl	80009a8 <__aeabi_dcmpeq>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d141      	bne.n	8009854 <pow+0xc4>
 80097d0:	4620      	mov	r0, r4
 80097d2:	4629      	mov	r1, r5
 80097d4:	f000 f844 	bl	8009860 <finite>
 80097d8:	b328      	cbz	r0, 8009826 <pow+0x96>
 80097da:	2200      	movs	r2, #0
 80097dc:	2300      	movs	r3, #0
 80097de:	4620      	mov	r0, r4
 80097e0:	4629      	mov	r1, r5
 80097e2:	f7f7 f8eb 	bl	80009bc <__aeabi_dcmplt>
 80097e6:	b1f0      	cbz	r0, 8009826 <pow+0x96>
 80097e8:	f7ff fb4a 	bl	8008e80 <__errno>
 80097ec:	2322      	movs	r3, #34	@ 0x22
 80097ee:	e019      	b.n	8009824 <pow+0x94>
 80097f0:	4630      	mov	r0, r6
 80097f2:	4639      	mov	r1, r7
 80097f4:	f000 f834 	bl	8009860 <finite>
 80097f8:	b9c8      	cbnz	r0, 800982e <pow+0x9e>
 80097fa:	4640      	mov	r0, r8
 80097fc:	4649      	mov	r1, r9
 80097fe:	f000 f82f 	bl	8009860 <finite>
 8009802:	b1a0      	cbz	r0, 800982e <pow+0x9e>
 8009804:	4620      	mov	r0, r4
 8009806:	4629      	mov	r1, r5
 8009808:	f000 f82a 	bl	8009860 <finite>
 800980c:	b178      	cbz	r0, 800982e <pow+0x9e>
 800980e:	4632      	mov	r2, r6
 8009810:	463b      	mov	r3, r7
 8009812:	4630      	mov	r0, r6
 8009814:	4639      	mov	r1, r7
 8009816:	f7f7 f8f9 	bl	8000a0c <__aeabi_dcmpun>
 800981a:	2800      	cmp	r0, #0
 800981c:	d0e4      	beq.n	80097e8 <pow+0x58>
 800981e:	f7ff fb2f 	bl	8008e80 <__errno>
 8009822:	2321      	movs	r3, #33	@ 0x21
 8009824:	6003      	str	r3, [r0, #0]
 8009826:	4630      	mov	r0, r6
 8009828:	4639      	mov	r1, r7
 800982a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800982e:	2200      	movs	r2, #0
 8009830:	2300      	movs	r3, #0
 8009832:	4630      	mov	r0, r6
 8009834:	4639      	mov	r1, r7
 8009836:	f7f7 f8b7 	bl	80009a8 <__aeabi_dcmpeq>
 800983a:	2800      	cmp	r0, #0
 800983c:	d0f3      	beq.n	8009826 <pow+0x96>
 800983e:	4640      	mov	r0, r8
 8009840:	4649      	mov	r1, r9
 8009842:	f000 f80d 	bl	8009860 <finite>
 8009846:	2800      	cmp	r0, #0
 8009848:	d0ed      	beq.n	8009826 <pow+0x96>
 800984a:	4620      	mov	r0, r4
 800984c:	4629      	mov	r1, r5
 800984e:	f000 f807 	bl	8009860 <finite>
 8009852:	e7c8      	b.n	80097e6 <pow+0x56>
 8009854:	2600      	movs	r6, #0
 8009856:	4f01      	ldr	r7, [pc, #4]	@ (800985c <pow+0xcc>)
 8009858:	e7e5      	b.n	8009826 <pow+0x96>
 800985a:	bf00      	nop
 800985c:	3ff00000 	.word	0x3ff00000

08009860 <finite>:
 8009860:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8009864:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009868:	0fc0      	lsrs	r0, r0, #31
 800986a:	4770      	bx	lr

0800986c <round>:
 800986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009872:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8009876:	2a13      	cmp	r2, #19
 8009878:	4604      	mov	r4, r0
 800987a:	460d      	mov	r5, r1
 800987c:	460b      	mov	r3, r1
 800987e:	dc1a      	bgt.n	80098b6 <round+0x4a>
 8009880:	2a00      	cmp	r2, #0
 8009882:	da0b      	bge.n	800989c <round+0x30>
 8009884:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8009888:	3201      	adds	r2, #1
 800988a:	bf04      	itt	eq
 800988c:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8009890:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8009894:	2200      	movs	r2, #0
 8009896:	461d      	mov	r5, r3
 8009898:	4614      	mov	r4, r2
 800989a:	e016      	b.n	80098ca <round+0x5e>
 800989c:	4815      	ldr	r0, [pc, #84]	@ (80098f4 <round+0x88>)
 800989e:	4110      	asrs	r0, r2
 80098a0:	4001      	ands	r1, r0
 80098a2:	4321      	orrs	r1, r4
 80098a4:	d011      	beq.n	80098ca <round+0x5e>
 80098a6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80098aa:	fa41 f202 	asr.w	r2, r1, r2
 80098ae:	4413      	add	r3, r2
 80098b0:	ea23 0300 	bic.w	r3, r3, r0
 80098b4:	e7ee      	b.n	8009894 <round+0x28>
 80098b6:	2a33      	cmp	r2, #51	@ 0x33
 80098b8:	dd0a      	ble.n	80098d0 <round+0x64>
 80098ba:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80098be:	d104      	bne.n	80098ca <round+0x5e>
 80098c0:	4602      	mov	r2, r0
 80098c2:	f7f6 fc53 	bl	800016c <__adddf3>
 80098c6:	4604      	mov	r4, r0
 80098c8:	460d      	mov	r5, r1
 80098ca:	4620      	mov	r0, r4
 80098cc:	4629      	mov	r1, r5
 80098ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098d0:	f04f 30ff 	mov.w	r0, #4294967295
 80098d4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 80098d8:	40f8      	lsrs	r0, r7
 80098da:	4220      	tst	r0, r4
 80098dc:	d0f5      	beq.n	80098ca <round+0x5e>
 80098de:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80098e2:	2201      	movs	r2, #1
 80098e4:	408a      	lsls	r2, r1
 80098e6:	1912      	adds	r2, r2, r4
 80098e8:	bf28      	it	cs
 80098ea:	3301      	addcs	r3, #1
 80098ec:	ea22 0200 	bic.w	r2, r2, r0
 80098f0:	e7d1      	b.n	8009896 <round+0x2a>
 80098f2:	bf00      	nop
 80098f4:	000fffff 	.word	0x000fffff

080098f8 <__ieee754_pow>:
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	b091      	sub	sp, #68	@ 0x44
 80098fe:	e9cd 2300 	strd	r2, r3, [sp]
 8009902:	468b      	mov	fp, r1
 8009904:	e9dd 1800 	ldrd	r1, r8, [sp]
 8009908:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800990c:	4682      	mov	sl, r0
 800990e:	ea57 0001 	orrs.w	r0, r7, r1
 8009912:	d112      	bne.n	800993a <__ieee754_pow+0x42>
 8009914:	4653      	mov	r3, sl
 8009916:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800991a:	18db      	adds	r3, r3, r3
 800991c:	4152      	adcs	r2, r2
 800991e:	4298      	cmp	r0, r3
 8009920:	4b91      	ldr	r3, [pc, #580]	@ (8009b68 <__ieee754_pow+0x270>)
 8009922:	4193      	sbcs	r3, r2
 8009924:	f080 84ce 	bcs.w	800a2c4 <__ieee754_pow+0x9cc>
 8009928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800992c:	4650      	mov	r0, sl
 800992e:	4659      	mov	r1, fp
 8009930:	f7f6 fc1c 	bl	800016c <__adddf3>
 8009934:	b011      	add	sp, #68	@ 0x44
 8009936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993a:	4b8c      	ldr	r3, [pc, #560]	@ (8009b6c <__ieee754_pow+0x274>)
 800993c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8009940:	429e      	cmp	r6, r3
 8009942:	465d      	mov	r5, fp
 8009944:	46d1      	mov	r9, sl
 8009946:	d807      	bhi.n	8009958 <__ieee754_pow+0x60>
 8009948:	d102      	bne.n	8009950 <__ieee754_pow+0x58>
 800994a:	f1ba 0f00 	cmp.w	sl, #0
 800994e:	d1eb      	bne.n	8009928 <__ieee754_pow+0x30>
 8009950:	429f      	cmp	r7, r3
 8009952:	d801      	bhi.n	8009958 <__ieee754_pow+0x60>
 8009954:	d10f      	bne.n	8009976 <__ieee754_pow+0x7e>
 8009956:	b171      	cbz	r1, 8009976 <__ieee754_pow+0x7e>
 8009958:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800995c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009960:	ea55 0509 	orrs.w	r5, r5, r9
 8009964:	d1e0      	bne.n	8009928 <__ieee754_pow+0x30>
 8009966:	e9dd 3200 	ldrd	r3, r2, [sp]
 800996a:	18db      	adds	r3, r3, r3
 800996c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009970:	4152      	adcs	r2, r2
 8009972:	429d      	cmp	r5, r3
 8009974:	e7d4      	b.n	8009920 <__ieee754_pow+0x28>
 8009976:	2d00      	cmp	r5, #0
 8009978:	4633      	mov	r3, r6
 800997a:	da39      	bge.n	80099f0 <__ieee754_pow+0xf8>
 800997c:	4a7c      	ldr	r2, [pc, #496]	@ (8009b70 <__ieee754_pow+0x278>)
 800997e:	4297      	cmp	r7, r2
 8009980:	d84e      	bhi.n	8009a20 <__ieee754_pow+0x128>
 8009982:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009986:	4297      	cmp	r7, r2
 8009988:	f240 84ab 	bls.w	800a2e2 <__ieee754_pow+0x9ea>
 800998c:	153a      	asrs	r2, r7, #20
 800998e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009992:	2a14      	cmp	r2, #20
 8009994:	dd0f      	ble.n	80099b6 <__ieee754_pow+0xbe>
 8009996:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800999a:	fa21 f402 	lsr.w	r4, r1, r2
 800999e:	fa04 f202 	lsl.w	r2, r4, r2
 80099a2:	428a      	cmp	r2, r1
 80099a4:	f040 849d 	bne.w	800a2e2 <__ieee754_pow+0x9ea>
 80099a8:	f004 0401 	and.w	r4, r4, #1
 80099ac:	f1c4 0402 	rsb	r4, r4, #2
 80099b0:	2900      	cmp	r1, #0
 80099b2:	d15a      	bne.n	8009a6a <__ieee754_pow+0x172>
 80099b4:	e00e      	b.n	80099d4 <__ieee754_pow+0xdc>
 80099b6:	2900      	cmp	r1, #0
 80099b8:	d156      	bne.n	8009a68 <__ieee754_pow+0x170>
 80099ba:	f1c2 0214 	rsb	r2, r2, #20
 80099be:	fa47 f402 	asr.w	r4, r7, r2
 80099c2:	fa04 f202 	lsl.w	r2, r4, r2
 80099c6:	42ba      	cmp	r2, r7
 80099c8:	f040 8488 	bne.w	800a2dc <__ieee754_pow+0x9e4>
 80099cc:	f004 0401 	and.w	r4, r4, #1
 80099d0:	f1c4 0402 	rsb	r4, r4, #2
 80099d4:	4a67      	ldr	r2, [pc, #412]	@ (8009b74 <__ieee754_pow+0x27c>)
 80099d6:	4297      	cmp	r7, r2
 80099d8:	d130      	bne.n	8009a3c <__ieee754_pow+0x144>
 80099da:	f1b8 0f00 	cmp.w	r8, #0
 80099de:	f280 8479 	bge.w	800a2d4 <__ieee754_pow+0x9dc>
 80099e2:	4652      	mov	r2, sl
 80099e4:	465b      	mov	r3, fp
 80099e6:	2000      	movs	r0, #0
 80099e8:	4962      	ldr	r1, [pc, #392]	@ (8009b74 <__ieee754_pow+0x27c>)
 80099ea:	f7f6 fe9f 	bl	800072c <__aeabi_ddiv>
 80099ee:	e7a1      	b.n	8009934 <__ieee754_pow+0x3c>
 80099f0:	2400      	movs	r4, #0
 80099f2:	2900      	cmp	r1, #0
 80099f4:	d139      	bne.n	8009a6a <__ieee754_pow+0x172>
 80099f6:	4a5d      	ldr	r2, [pc, #372]	@ (8009b6c <__ieee754_pow+0x274>)
 80099f8:	4297      	cmp	r7, r2
 80099fa:	d1eb      	bne.n	80099d4 <__ieee754_pow+0xdc>
 80099fc:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8009a00:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8009a04:	ea53 0309 	orrs.w	r3, r3, r9
 8009a08:	f000 845c 	beq.w	800a2c4 <__ieee754_pow+0x9cc>
 8009a0c:	4b5a      	ldr	r3, [pc, #360]	@ (8009b78 <__ieee754_pow+0x280>)
 8009a0e:	429e      	cmp	r6, r3
 8009a10:	d908      	bls.n	8009a24 <__ieee754_pow+0x12c>
 8009a12:	f1b8 0f00 	cmp.w	r8, #0
 8009a16:	f2c0 8459 	blt.w	800a2cc <__ieee754_pow+0x9d4>
 8009a1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a1e:	e789      	b.n	8009934 <__ieee754_pow+0x3c>
 8009a20:	2402      	movs	r4, #2
 8009a22:	e7e6      	b.n	80099f2 <__ieee754_pow+0xfa>
 8009a24:	f1b8 0f00 	cmp.w	r8, #0
 8009a28:	f04f 0000 	mov.w	r0, #0
 8009a2c:	f04f 0100 	mov.w	r1, #0
 8009a30:	da80      	bge.n	8009934 <__ieee754_pow+0x3c>
 8009a32:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009a36:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009a3a:	e77b      	b.n	8009934 <__ieee754_pow+0x3c>
 8009a3c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8009a40:	d106      	bne.n	8009a50 <__ieee754_pow+0x158>
 8009a42:	4652      	mov	r2, sl
 8009a44:	465b      	mov	r3, fp
 8009a46:	4650      	mov	r0, sl
 8009a48:	4659      	mov	r1, fp
 8009a4a:	f7f6 fd45 	bl	80004d8 <__aeabi_dmul>
 8009a4e:	e771      	b.n	8009934 <__ieee754_pow+0x3c>
 8009a50:	4a4a      	ldr	r2, [pc, #296]	@ (8009b7c <__ieee754_pow+0x284>)
 8009a52:	4590      	cmp	r8, r2
 8009a54:	d109      	bne.n	8009a6a <__ieee754_pow+0x172>
 8009a56:	2d00      	cmp	r5, #0
 8009a58:	db07      	blt.n	8009a6a <__ieee754_pow+0x172>
 8009a5a:	4650      	mov	r0, sl
 8009a5c:	4659      	mov	r1, fp
 8009a5e:	b011      	add	sp, #68	@ 0x44
 8009a60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	f000 bd12 	b.w	800a48c <__ieee754_sqrt>
 8009a68:	2400      	movs	r4, #0
 8009a6a:	4650      	mov	r0, sl
 8009a6c:	4659      	mov	r1, fp
 8009a6e:	9302      	str	r3, [sp, #8]
 8009a70:	f000 fc6a 	bl	800a348 <fabs>
 8009a74:	9b02      	ldr	r3, [sp, #8]
 8009a76:	f1b9 0f00 	cmp.w	r9, #0
 8009a7a:	d127      	bne.n	8009acc <__ieee754_pow+0x1d4>
 8009a7c:	4a3d      	ldr	r2, [pc, #244]	@ (8009b74 <__ieee754_pow+0x27c>)
 8009a7e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8009a82:	4594      	cmp	ip, r2
 8009a84:	d000      	beq.n	8009a88 <__ieee754_pow+0x190>
 8009a86:	bb0e      	cbnz	r6, 8009acc <__ieee754_pow+0x1d4>
 8009a88:	f1b8 0f00 	cmp.w	r8, #0
 8009a8c:	da05      	bge.n	8009a9a <__ieee754_pow+0x1a2>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	2000      	movs	r0, #0
 8009a94:	4937      	ldr	r1, [pc, #220]	@ (8009b74 <__ieee754_pow+0x27c>)
 8009a96:	f7f6 fe49 	bl	800072c <__aeabi_ddiv>
 8009a9a:	2d00      	cmp	r5, #0
 8009a9c:	f6bf af4a 	bge.w	8009934 <__ieee754_pow+0x3c>
 8009aa0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8009aa4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009aa8:	4326      	orrs	r6, r4
 8009aaa:	d108      	bne.n	8009abe <__ieee754_pow+0x1c6>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4610      	mov	r0, r2
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	f7f6 fb58 	bl	8000168 <__aeabi_dsub>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	e795      	b.n	80099ea <__ieee754_pow+0xf2>
 8009abe:	2c01      	cmp	r4, #1
 8009ac0:	f47f af38 	bne.w	8009934 <__ieee754_pow+0x3c>
 8009ac4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ac8:	4619      	mov	r1, r3
 8009aca:	e733      	b.n	8009934 <__ieee754_pow+0x3c>
 8009acc:	0fea      	lsrs	r2, r5, #31
 8009ace:	3a01      	subs	r2, #1
 8009ad0:	ea52 0c04 	orrs.w	ip, r2, r4
 8009ad4:	d102      	bne.n	8009adc <__ieee754_pow+0x1e4>
 8009ad6:	4652      	mov	r2, sl
 8009ad8:	465b      	mov	r3, fp
 8009ada:	e7e9      	b.n	8009ab0 <__ieee754_pow+0x1b8>
 8009adc:	f04f 0900 	mov.w	r9, #0
 8009ae0:	3c01      	subs	r4, #1
 8009ae2:	4314      	orrs	r4, r2
 8009ae4:	bf14      	ite	ne
 8009ae6:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8009b74 <__ieee754_pow+0x27c>
 8009aea:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8009b80 <__ieee754_pow+0x288>
 8009aee:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8009af2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8009af6:	f240 8107 	bls.w	8009d08 <__ieee754_pow+0x410>
 8009afa:	4b22      	ldr	r3, [pc, #136]	@ (8009b84 <__ieee754_pow+0x28c>)
 8009afc:	429f      	cmp	r7, r3
 8009afe:	4b1e      	ldr	r3, [pc, #120]	@ (8009b78 <__ieee754_pow+0x280>)
 8009b00:	d913      	bls.n	8009b2a <__ieee754_pow+0x232>
 8009b02:	429e      	cmp	r6, r3
 8009b04:	d808      	bhi.n	8009b18 <__ieee754_pow+0x220>
 8009b06:	f1b8 0f00 	cmp.w	r8, #0
 8009b0a:	da08      	bge.n	8009b1e <__ieee754_pow+0x226>
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	b011      	add	sp, #68	@ 0x44
 8009b10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	f000 bcb4 	b.w	800a480 <__math_oflow>
 8009b18:	f1b8 0f00 	cmp.w	r8, #0
 8009b1c:	dcf6      	bgt.n	8009b0c <__ieee754_pow+0x214>
 8009b1e:	2000      	movs	r0, #0
 8009b20:	b011      	add	sp, #68	@ 0x44
 8009b22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b26:	f000 bca6 	b.w	800a476 <__math_uflow>
 8009b2a:	429e      	cmp	r6, r3
 8009b2c:	d20c      	bcs.n	8009b48 <__ieee754_pow+0x250>
 8009b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b32:	2200      	movs	r2, #0
 8009b34:	2300      	movs	r3, #0
 8009b36:	f7f6 ff41 	bl	80009bc <__aeabi_dcmplt>
 8009b3a:	3800      	subs	r0, #0
 8009b3c:	bf18      	it	ne
 8009b3e:	2001      	movne	r0, #1
 8009b40:	f1b8 0f00 	cmp.w	r8, #0
 8009b44:	daec      	bge.n	8009b20 <__ieee754_pow+0x228>
 8009b46:	e7e2      	b.n	8009b0e <__ieee754_pow+0x216>
 8009b48:	4b0a      	ldr	r3, [pc, #40]	@ (8009b74 <__ieee754_pow+0x27c>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	429e      	cmp	r6, r3
 8009b4e:	d91b      	bls.n	8009b88 <__ieee754_pow+0x290>
 8009b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b54:	2300      	movs	r3, #0
 8009b56:	f7f6 ff31 	bl	80009bc <__aeabi_dcmplt>
 8009b5a:	3800      	subs	r0, #0
 8009b5c:	bf18      	it	ne
 8009b5e:	2001      	movne	r0, #1
 8009b60:	f1b8 0f00 	cmp.w	r8, #0
 8009b64:	dcd3      	bgt.n	8009b0e <__ieee754_pow+0x216>
 8009b66:	e7db      	b.n	8009b20 <__ieee754_pow+0x228>
 8009b68:	fff00000 	.word	0xfff00000
 8009b6c:	7ff00000 	.word	0x7ff00000
 8009b70:	433fffff 	.word	0x433fffff
 8009b74:	3ff00000 	.word	0x3ff00000
 8009b78:	3fefffff 	.word	0x3fefffff
 8009b7c:	3fe00000 	.word	0x3fe00000
 8009b80:	bff00000 	.word	0xbff00000
 8009b84:	43f00000 	.word	0x43f00000
 8009b88:	4b5b      	ldr	r3, [pc, #364]	@ (8009cf8 <__ieee754_pow+0x400>)
 8009b8a:	f7f6 faed 	bl	8000168 <__aeabi_dsub>
 8009b8e:	a352      	add	r3, pc, #328	@ (adr r3, 8009cd8 <__ieee754_pow+0x3e0>)
 8009b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b94:	4604      	mov	r4, r0
 8009b96:	460d      	mov	r5, r1
 8009b98:	f7f6 fc9e 	bl	80004d8 <__aeabi_dmul>
 8009b9c:	a350      	add	r3, pc, #320	@ (adr r3, 8009ce0 <__ieee754_pow+0x3e8>)
 8009b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460f      	mov	r7, r1
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	4629      	mov	r1, r5
 8009baa:	f7f6 fc95 	bl	80004d8 <__aeabi_dmul>
 8009bae:	2200      	movs	r2, #0
 8009bb0:	4682      	mov	sl, r0
 8009bb2:	468b      	mov	fp, r1
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4b50      	ldr	r3, [pc, #320]	@ (8009cfc <__ieee754_pow+0x404>)
 8009bba:	f7f6 fc8d 	bl	80004d8 <__aeabi_dmul>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	a149      	add	r1, pc, #292	@ (adr r1, 8009ce8 <__ieee754_pow+0x3f0>)
 8009bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bc8:	f7f6 face 	bl	8000168 <__aeabi_dsub>
 8009bcc:	4622      	mov	r2, r4
 8009bce:	462b      	mov	r3, r5
 8009bd0:	f7f6 fc82 	bl	80004d8 <__aeabi_dmul>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	2000      	movs	r0, #0
 8009bda:	4949      	ldr	r1, [pc, #292]	@ (8009d00 <__ieee754_pow+0x408>)
 8009bdc:	f7f6 fac4 	bl	8000168 <__aeabi_dsub>
 8009be0:	4622      	mov	r2, r4
 8009be2:	4680      	mov	r8, r0
 8009be4:	4689      	mov	r9, r1
 8009be6:	462b      	mov	r3, r5
 8009be8:	4620      	mov	r0, r4
 8009bea:	4629      	mov	r1, r5
 8009bec:	f7f6 fc74 	bl	80004d8 <__aeabi_dmul>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4640      	mov	r0, r8
 8009bf6:	4649      	mov	r1, r9
 8009bf8:	f7f6 fc6e 	bl	80004d8 <__aeabi_dmul>
 8009bfc:	a33c      	add	r3, pc, #240	@ (adr r3, 8009cf0 <__ieee754_pow+0x3f8>)
 8009bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c02:	f7f6 fc69 	bl	80004d8 <__aeabi_dmul>
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4650      	mov	r0, sl
 8009c0c:	4659      	mov	r1, fp
 8009c0e:	f7f6 faab 	bl	8000168 <__aeabi_dsub>
 8009c12:	2400      	movs	r4, #0
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4680      	mov	r8, r0
 8009c1a:	4689      	mov	r9, r1
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	4639      	mov	r1, r7
 8009c20:	f7f6 faa4 	bl	800016c <__adddf3>
 8009c24:	4632      	mov	r2, r6
 8009c26:	463b      	mov	r3, r7
 8009c28:	4620      	mov	r0, r4
 8009c2a:	460d      	mov	r5, r1
 8009c2c:	f7f6 fa9c 	bl	8000168 <__aeabi_dsub>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	4640      	mov	r0, r8
 8009c36:	4649      	mov	r1, r9
 8009c38:	f7f6 fa96 	bl	8000168 <__aeabi_dsub>
 8009c3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c44:	2300      	movs	r3, #0
 8009c46:	9304      	str	r3, [sp, #16]
 8009c48:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	460f      	mov	r7, r1
 8009c50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c54:	4652      	mov	r2, sl
 8009c56:	465b      	mov	r3, fp
 8009c58:	f7f6 fa86 	bl	8000168 <__aeabi_dsub>
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	462b      	mov	r3, r5
 8009c60:	f7f6 fc3a 	bl	80004d8 <__aeabi_dmul>
 8009c64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c68:	4680      	mov	r8, r0
 8009c6a:	4689      	mov	r9, r1
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	4639      	mov	r1, r7
 8009c70:	f7f6 fc32 	bl	80004d8 <__aeabi_dmul>
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	4640      	mov	r0, r8
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	f7f6 fa76 	bl	800016c <__adddf3>
 8009c80:	4652      	mov	r2, sl
 8009c82:	465b      	mov	r3, fp
 8009c84:	4606      	mov	r6, r0
 8009c86:	460f      	mov	r7, r1
 8009c88:	4620      	mov	r0, r4
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	f7f6 fc24 	bl	80004d8 <__aeabi_dmul>
 8009c90:	460b      	mov	r3, r1
 8009c92:	4602      	mov	r2, r0
 8009c94:	4680      	mov	r8, r0
 8009c96:	4689      	mov	r9, r1
 8009c98:	4630      	mov	r0, r6
 8009c9a:	4639      	mov	r1, r7
 8009c9c:	f7f6 fa66 	bl	800016c <__adddf3>
 8009ca0:	4b18      	ldr	r3, [pc, #96]	@ (8009d04 <__ieee754_pow+0x40c>)
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	4299      	cmp	r1, r3
 8009ca6:	460d      	mov	r5, r1
 8009ca8:	468a      	mov	sl, r1
 8009caa:	468b      	mov	fp, r1
 8009cac:	f340 82e0 	ble.w	800a270 <__ieee754_pow+0x978>
 8009cb0:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009cb4:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009cb8:	4303      	orrs	r3, r0
 8009cba:	f000 81df 	beq.w	800a07c <__ieee754_pow+0x784>
 8009cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f7f6 fe79 	bl	80009bc <__aeabi_dcmplt>
 8009cca:	3800      	subs	r0, #0
 8009ccc:	bf18      	it	ne
 8009cce:	2001      	movne	r0, #1
 8009cd0:	e71d      	b.n	8009b0e <__ieee754_pow+0x216>
 8009cd2:	bf00      	nop
 8009cd4:	f3af 8000 	nop.w
 8009cd8:	60000000 	.word	0x60000000
 8009cdc:	3ff71547 	.word	0x3ff71547
 8009ce0:	f85ddf44 	.word	0xf85ddf44
 8009ce4:	3e54ae0b 	.word	0x3e54ae0b
 8009ce8:	55555555 	.word	0x55555555
 8009cec:	3fd55555 	.word	0x3fd55555
 8009cf0:	652b82fe 	.word	0x652b82fe
 8009cf4:	3ff71547 	.word	0x3ff71547
 8009cf8:	3ff00000 	.word	0x3ff00000
 8009cfc:	3fd00000 	.word	0x3fd00000
 8009d00:	3fe00000 	.word	0x3fe00000
 8009d04:	408fffff 	.word	0x408fffff
 8009d08:	4ad3      	ldr	r2, [pc, #844]	@ (800a058 <__ieee754_pow+0x760>)
 8009d0a:	402a      	ands	r2, r5
 8009d0c:	2a00      	cmp	r2, #0
 8009d0e:	f040 817a 	bne.w	800a006 <__ieee754_pow+0x70e>
 8009d12:	4bd2      	ldr	r3, [pc, #840]	@ (800a05c <__ieee754_pow+0x764>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	f7f6 fbdf 	bl	80004d8 <__aeabi_dmul>
 8009d1a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8009d1e:	460b      	mov	r3, r1
 8009d20:	151a      	asrs	r2, r3, #20
 8009d22:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009d26:	4422      	add	r2, r4
 8009d28:	920a      	str	r2, [sp, #40]	@ 0x28
 8009d2a:	4acd      	ldr	r2, [pc, #820]	@ (800a060 <__ieee754_pow+0x768>)
 8009d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d30:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8009d34:	4293      	cmp	r3, r2
 8009d36:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009d3a:	dd08      	ble.n	8009d4e <__ieee754_pow+0x456>
 8009d3c:	4ac9      	ldr	r2, [pc, #804]	@ (800a064 <__ieee754_pow+0x76c>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	f340 8163 	ble.w	800a00a <__ieee754_pow+0x712>
 8009d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d46:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d4e:	2600      	movs	r6, #0
 8009d50:	00f3      	lsls	r3, r6, #3
 8009d52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d54:	4bc4      	ldr	r3, [pc, #784]	@ (800a068 <__ieee754_pow+0x770>)
 8009d56:	4629      	mov	r1, r5
 8009d58:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d60:	461a      	mov	r2, r3
 8009d62:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009d66:	4623      	mov	r3, r4
 8009d68:	4682      	mov	sl, r0
 8009d6a:	f7f6 f9fd 	bl	8000168 <__aeabi_dsub>
 8009d6e:	4652      	mov	r2, sl
 8009d70:	462b      	mov	r3, r5
 8009d72:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009d76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d7a:	f7f6 f9f7 	bl	800016c <__adddf3>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	2000      	movs	r0, #0
 8009d84:	49b9      	ldr	r1, [pc, #740]	@ (800a06c <__ieee754_pow+0x774>)
 8009d86:	f7f6 fcd1 	bl	800072c <__aeabi_ddiv>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009d92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d96:	f7f6 fb9f 	bl	80004d8 <__aeabi_dmul>
 8009d9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d9e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009da2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009da6:	2300      	movs	r3, #0
 8009da8:	2200      	movs	r2, #0
 8009daa:	46ab      	mov	fp, r5
 8009dac:	106d      	asrs	r5, r5, #1
 8009dae:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009db2:	9304      	str	r3, [sp, #16]
 8009db4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009db8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009dbc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009dc0:	4640      	mov	r0, r8
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	4614      	mov	r4, r2
 8009dc6:	461d      	mov	r5, r3
 8009dc8:	f7f6 fb86 	bl	80004d8 <__aeabi_dmul>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009dd4:	f7f6 f9c8 	bl	8000168 <__aeabi_dsub>
 8009dd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ddc:	4606      	mov	r6, r0
 8009dde:	460f      	mov	r7, r1
 8009de0:	4620      	mov	r0, r4
 8009de2:	4629      	mov	r1, r5
 8009de4:	f7f6 f9c0 	bl	8000168 <__aeabi_dsub>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	4650      	mov	r0, sl
 8009dee:	4659      	mov	r1, fp
 8009df0:	f7f6 f9ba 	bl	8000168 <__aeabi_dsub>
 8009df4:	4642      	mov	r2, r8
 8009df6:	464b      	mov	r3, r9
 8009df8:	f7f6 fb6e 	bl	80004d8 <__aeabi_dmul>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4630      	mov	r0, r6
 8009e02:	4639      	mov	r1, r7
 8009e04:	f7f6 f9b0 	bl	8000168 <__aeabi_dsub>
 8009e08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009e0c:	f7f6 fb64 	bl	80004d8 <__aeabi_dmul>
 8009e10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e14:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e18:	4610      	mov	r0, r2
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	f7f6 fb5c 	bl	80004d8 <__aeabi_dmul>
 8009e20:	a37b      	add	r3, pc, #492	@ (adr r3, 800a010 <__ieee754_pow+0x718>)
 8009e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e26:	4604      	mov	r4, r0
 8009e28:	460d      	mov	r5, r1
 8009e2a:	f7f6 fb55 	bl	80004d8 <__aeabi_dmul>
 8009e2e:	a37a      	add	r3, pc, #488	@ (adr r3, 800a018 <__ieee754_pow+0x720>)
 8009e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e34:	f7f6 f99a 	bl	800016c <__adddf3>
 8009e38:	4622      	mov	r2, r4
 8009e3a:	462b      	mov	r3, r5
 8009e3c:	f7f6 fb4c 	bl	80004d8 <__aeabi_dmul>
 8009e40:	a377      	add	r3, pc, #476	@ (adr r3, 800a020 <__ieee754_pow+0x728>)
 8009e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e46:	f7f6 f991 	bl	800016c <__adddf3>
 8009e4a:	4622      	mov	r2, r4
 8009e4c:	462b      	mov	r3, r5
 8009e4e:	f7f6 fb43 	bl	80004d8 <__aeabi_dmul>
 8009e52:	a375      	add	r3, pc, #468	@ (adr r3, 800a028 <__ieee754_pow+0x730>)
 8009e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e58:	f7f6 f988 	bl	800016c <__adddf3>
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	462b      	mov	r3, r5
 8009e60:	f7f6 fb3a 	bl	80004d8 <__aeabi_dmul>
 8009e64:	a372      	add	r3, pc, #456	@ (adr r3, 800a030 <__ieee754_pow+0x738>)
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	f7f6 f97f 	bl	800016c <__adddf3>
 8009e6e:	4622      	mov	r2, r4
 8009e70:	462b      	mov	r3, r5
 8009e72:	f7f6 fb31 	bl	80004d8 <__aeabi_dmul>
 8009e76:	a370      	add	r3, pc, #448	@ (adr r3, 800a038 <__ieee754_pow+0x740>)
 8009e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7c:	f7f6 f976 	bl	800016c <__adddf3>
 8009e80:	4622      	mov	r2, r4
 8009e82:	4606      	mov	r6, r0
 8009e84:	460f      	mov	r7, r1
 8009e86:	462b      	mov	r3, r5
 8009e88:	4620      	mov	r0, r4
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	f7f6 fb24 	bl	80004d8 <__aeabi_dmul>
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	4630      	mov	r0, r6
 8009e96:	4639      	mov	r1, r7
 8009e98:	f7f6 fb1e 	bl	80004d8 <__aeabi_dmul>
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	460d      	mov	r5, r1
 8009ea0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ea4:	4642      	mov	r2, r8
 8009ea6:	464b      	mov	r3, r9
 8009ea8:	f7f6 f960 	bl	800016c <__adddf3>
 8009eac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009eb0:	f7f6 fb12 	bl	80004d8 <__aeabi_dmul>
 8009eb4:	4622      	mov	r2, r4
 8009eb6:	462b      	mov	r3, r5
 8009eb8:	f7f6 f958 	bl	800016c <__adddf3>
 8009ebc:	4642      	mov	r2, r8
 8009ebe:	4682      	mov	sl, r0
 8009ec0:	468b      	mov	fp, r1
 8009ec2:	464b      	mov	r3, r9
 8009ec4:	4640      	mov	r0, r8
 8009ec6:	4649      	mov	r1, r9
 8009ec8:	f7f6 fb06 	bl	80004d8 <__aeabi_dmul>
 8009ecc:	2200      	movs	r2, #0
 8009ece:	4b68      	ldr	r3, [pc, #416]	@ (800a070 <__ieee754_pow+0x778>)
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	460f      	mov	r7, r1
 8009ed4:	f7f6 f94a 	bl	800016c <__adddf3>
 8009ed8:	4652      	mov	r2, sl
 8009eda:	465b      	mov	r3, fp
 8009edc:	f7f6 f946 	bl	800016c <__adddf3>
 8009ee0:	2400      	movs	r4, #0
 8009ee2:	460d      	mov	r5, r1
 8009ee4:	4622      	mov	r2, r4
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4640      	mov	r0, r8
 8009eea:	4649      	mov	r1, r9
 8009eec:	f7f6 faf4 	bl	80004d8 <__aeabi_dmul>
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	4680      	mov	r8, r0
 8009ef4:	4689      	mov	r9, r1
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	4629      	mov	r1, r5
 8009efa:	4b5d      	ldr	r3, [pc, #372]	@ (800a070 <__ieee754_pow+0x778>)
 8009efc:	f7f6 f934 	bl	8000168 <__aeabi_dsub>
 8009f00:	4632      	mov	r2, r6
 8009f02:	463b      	mov	r3, r7
 8009f04:	f7f6 f930 	bl	8000168 <__aeabi_dsub>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4650      	mov	r0, sl
 8009f0e:	4659      	mov	r1, fp
 8009f10:	f7f6 f92a 	bl	8000168 <__aeabi_dsub>
 8009f14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f18:	f7f6 fade 	bl	80004d8 <__aeabi_dmul>
 8009f1c:	4622      	mov	r2, r4
 8009f1e:	4606      	mov	r6, r0
 8009f20:	460f      	mov	r7, r1
 8009f22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f26:	462b      	mov	r3, r5
 8009f28:	f7f6 fad6 	bl	80004d8 <__aeabi_dmul>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4630      	mov	r0, r6
 8009f32:	4639      	mov	r1, r7
 8009f34:	f7f6 f91a 	bl	800016c <__adddf3>
 8009f38:	2400      	movs	r4, #0
 8009f3a:	4606      	mov	r6, r0
 8009f3c:	460f      	mov	r7, r1
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	4640      	mov	r0, r8
 8009f44:	4649      	mov	r1, r9
 8009f46:	f7f6 f911 	bl	800016c <__adddf3>
 8009f4a:	a33d      	add	r3, pc, #244	@ (adr r3, 800a040 <__ieee754_pow+0x748>)
 8009f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f50:	4620      	mov	r0, r4
 8009f52:	460d      	mov	r5, r1
 8009f54:	f7f6 fac0 	bl	80004d8 <__aeabi_dmul>
 8009f58:	4642      	mov	r2, r8
 8009f5a:	464b      	mov	r3, r9
 8009f5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009f60:	4620      	mov	r0, r4
 8009f62:	4629      	mov	r1, r5
 8009f64:	f7f6 f900 	bl	8000168 <__aeabi_dsub>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	4639      	mov	r1, r7
 8009f70:	f7f6 f8fa 	bl	8000168 <__aeabi_dsub>
 8009f74:	a334      	add	r3, pc, #208	@ (adr r3, 800a048 <__ieee754_pow+0x750>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f7f6 faad 	bl	80004d8 <__aeabi_dmul>
 8009f7e:	a334      	add	r3, pc, #208	@ (adr r3, 800a050 <__ieee754_pow+0x758>)
 8009f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f84:	4606      	mov	r6, r0
 8009f86:	460f      	mov	r7, r1
 8009f88:	4620      	mov	r0, r4
 8009f8a:	4629      	mov	r1, r5
 8009f8c:	f7f6 faa4 	bl	80004d8 <__aeabi_dmul>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4630      	mov	r0, r6
 8009f96:	4639      	mov	r1, r7
 8009f98:	f7f6 f8e8 	bl	800016c <__adddf3>
 8009f9c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009f9e:	4b35      	ldr	r3, [pc, #212]	@ (800a074 <__ieee754_pow+0x77c>)
 8009fa0:	2400      	movs	r4, #0
 8009fa2:	4413      	add	r3, r2
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	f7f6 f8e0 	bl	800016c <__adddf3>
 8009fac:	4682      	mov	sl, r0
 8009fae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009fb0:	468b      	mov	fp, r1
 8009fb2:	f7f6 fa27 	bl	8000404 <__aeabi_i2d>
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	460f      	mov	r7, r1
 8009fba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009fbc:	4b2e      	ldr	r3, [pc, #184]	@ (800a078 <__ieee754_pow+0x780>)
 8009fbe:	4413      	add	r3, r2
 8009fc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fc4:	4652      	mov	r2, sl
 8009fc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fca:	465b      	mov	r3, fp
 8009fcc:	f7f6 f8ce 	bl	800016c <__adddf3>
 8009fd0:	4642      	mov	r2, r8
 8009fd2:	464b      	mov	r3, r9
 8009fd4:	f7f6 f8ca 	bl	800016c <__adddf3>
 8009fd8:	4632      	mov	r2, r6
 8009fda:	463b      	mov	r3, r7
 8009fdc:	f7f6 f8c6 	bl	800016c <__adddf3>
 8009fe0:	4632      	mov	r2, r6
 8009fe2:	463b      	mov	r3, r7
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	460d      	mov	r5, r1
 8009fe8:	f7f6 f8be 	bl	8000168 <__aeabi_dsub>
 8009fec:	4642      	mov	r2, r8
 8009fee:	464b      	mov	r3, r9
 8009ff0:	f7f6 f8ba 	bl	8000168 <__aeabi_dsub>
 8009ff4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ff8:	f7f6 f8b6 	bl	8000168 <__aeabi_dsub>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	4650      	mov	r0, sl
 800a002:	4659      	mov	r1, fp
 800a004:	e618      	b.n	8009c38 <__ieee754_pow+0x340>
 800a006:	2400      	movs	r4, #0
 800a008:	e68a      	b.n	8009d20 <__ieee754_pow+0x428>
 800a00a:	2601      	movs	r6, #1
 800a00c:	e6a0      	b.n	8009d50 <__ieee754_pow+0x458>
 800a00e:	bf00      	nop
 800a010:	4a454eef 	.word	0x4a454eef
 800a014:	3fca7e28 	.word	0x3fca7e28
 800a018:	93c9db65 	.word	0x93c9db65
 800a01c:	3fcd864a 	.word	0x3fcd864a
 800a020:	a91d4101 	.word	0xa91d4101
 800a024:	3fd17460 	.word	0x3fd17460
 800a028:	518f264d 	.word	0x518f264d
 800a02c:	3fd55555 	.word	0x3fd55555
 800a030:	db6fabff 	.word	0xdb6fabff
 800a034:	3fdb6db6 	.word	0x3fdb6db6
 800a038:	33333303 	.word	0x33333303
 800a03c:	3fe33333 	.word	0x3fe33333
 800a040:	e0000000 	.word	0xe0000000
 800a044:	3feec709 	.word	0x3feec709
 800a048:	dc3a03fd 	.word	0xdc3a03fd
 800a04c:	3feec709 	.word	0x3feec709
 800a050:	145b01f5 	.word	0x145b01f5
 800a054:	be3e2fe0 	.word	0xbe3e2fe0
 800a058:	7ff00000 	.word	0x7ff00000
 800a05c:	43400000 	.word	0x43400000
 800a060:	0003988e 	.word	0x0003988e
 800a064:	000bb679 	.word	0x000bb679
 800a068:	0800a9a0 	.word	0x0800a9a0
 800a06c:	3ff00000 	.word	0x3ff00000
 800a070:	40080000 	.word	0x40080000
 800a074:	0800a980 	.word	0x0800a980
 800a078:	0800a990 	.word	0x0800a990
 800a07c:	a39a      	add	r3, pc, #616	@ (adr r3, 800a2e8 <__ieee754_pow+0x9f0>)
 800a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a082:	4630      	mov	r0, r6
 800a084:	4639      	mov	r1, r7
 800a086:	f7f6 f871 	bl	800016c <__adddf3>
 800a08a:	4642      	mov	r2, r8
 800a08c:	e9cd 0100 	strd	r0, r1, [sp]
 800a090:	464b      	mov	r3, r9
 800a092:	4620      	mov	r0, r4
 800a094:	4629      	mov	r1, r5
 800a096:	f7f6 f867 	bl	8000168 <__aeabi_dsub>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0a2:	f7f6 fca9 	bl	80009f8 <__aeabi_dcmpgt>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	f47f ae09 	bne.w	8009cbe <__ieee754_pow+0x3c6>
 800a0ac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a0b0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a0b4:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a0b8:	fa43 fa0a 	asr.w	sl, r3, sl
 800a0bc:	44da      	add	sl, fp
 800a0be:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a0c2:	489b      	ldr	r0, [pc, #620]	@ (800a330 <__ieee754_pow+0xa38>)
 800a0c4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a0c8:	4108      	asrs	r0, r1
 800a0ca:	ea00 030a 	and.w	r3, r0, sl
 800a0ce:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a0d2:	f1c1 0114 	rsb	r1, r1, #20
 800a0d6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a0da:	4640      	mov	r0, r8
 800a0dc:	fa4a fa01 	asr.w	sl, sl, r1
 800a0e0:	f1bb 0f00 	cmp.w	fp, #0
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	f04f 0200 	mov.w	r2, #0
 800a0ea:	bfb8      	it	lt
 800a0ec:	f1ca 0a00 	rsblt	sl, sl, #0
 800a0f0:	f7f6 f83a 	bl	8000168 <__aeabi_dsub>
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	4689      	mov	r9, r1
 800a0f8:	2400      	movs	r4, #0
 800a0fa:	4632      	mov	r2, r6
 800a0fc:	463b      	mov	r3, r7
 800a0fe:	4640      	mov	r0, r8
 800a100:	4649      	mov	r1, r9
 800a102:	f7f6 f833 	bl	800016c <__adddf3>
 800a106:	a37a      	add	r3, pc, #488	@ (adr r3, 800a2f0 <__ieee754_pow+0x9f8>)
 800a108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10c:	4620      	mov	r0, r4
 800a10e:	460d      	mov	r5, r1
 800a110:	f7f6 f9e2 	bl	80004d8 <__aeabi_dmul>
 800a114:	4642      	mov	r2, r8
 800a116:	464b      	mov	r3, r9
 800a118:	e9cd 0100 	strd	r0, r1, [sp]
 800a11c:	4620      	mov	r0, r4
 800a11e:	4629      	mov	r1, r5
 800a120:	f7f6 f822 	bl	8000168 <__aeabi_dsub>
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	4630      	mov	r0, r6
 800a12a:	4639      	mov	r1, r7
 800a12c:	f7f6 f81c 	bl	8000168 <__aeabi_dsub>
 800a130:	a371      	add	r3, pc, #452	@ (adr r3, 800a2f8 <__ieee754_pow+0xa00>)
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f7f6 f9cf 	bl	80004d8 <__aeabi_dmul>
 800a13a:	a371      	add	r3, pc, #452	@ (adr r3, 800a300 <__ieee754_pow+0xa08>)
 800a13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a140:	4680      	mov	r8, r0
 800a142:	4689      	mov	r9, r1
 800a144:	4620      	mov	r0, r4
 800a146:	4629      	mov	r1, r5
 800a148:	f7f6 f9c6 	bl	80004d8 <__aeabi_dmul>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	4640      	mov	r0, r8
 800a152:	4649      	mov	r1, r9
 800a154:	f7f6 f80a 	bl	800016c <__adddf3>
 800a158:	4604      	mov	r4, r0
 800a15a:	460d      	mov	r5, r1
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a164:	f7f6 f802 	bl	800016c <__adddf3>
 800a168:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a16c:	4680      	mov	r8, r0
 800a16e:	4689      	mov	r9, r1
 800a170:	f7f5 fffa 	bl	8000168 <__aeabi_dsub>
 800a174:	4602      	mov	r2, r0
 800a176:	460b      	mov	r3, r1
 800a178:	4620      	mov	r0, r4
 800a17a:	4629      	mov	r1, r5
 800a17c:	f7f5 fff4 	bl	8000168 <__aeabi_dsub>
 800a180:	4642      	mov	r2, r8
 800a182:	4606      	mov	r6, r0
 800a184:	460f      	mov	r7, r1
 800a186:	464b      	mov	r3, r9
 800a188:	4640      	mov	r0, r8
 800a18a:	4649      	mov	r1, r9
 800a18c:	f7f6 f9a4 	bl	80004d8 <__aeabi_dmul>
 800a190:	a35d      	add	r3, pc, #372	@ (adr r3, 800a308 <__ieee754_pow+0xa10>)
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	4604      	mov	r4, r0
 800a198:	460d      	mov	r5, r1
 800a19a:	f7f6 f99d 	bl	80004d8 <__aeabi_dmul>
 800a19e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a310 <__ieee754_pow+0xa18>)
 800a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a4:	f7f5 ffe0 	bl	8000168 <__aeabi_dsub>
 800a1a8:	4622      	mov	r2, r4
 800a1aa:	462b      	mov	r3, r5
 800a1ac:	f7f6 f994 	bl	80004d8 <__aeabi_dmul>
 800a1b0:	a359      	add	r3, pc, #356	@ (adr r3, 800a318 <__ieee754_pow+0xa20>)
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	f7f5 ffd9 	bl	800016c <__adddf3>
 800a1ba:	4622      	mov	r2, r4
 800a1bc:	462b      	mov	r3, r5
 800a1be:	f7f6 f98b 	bl	80004d8 <__aeabi_dmul>
 800a1c2:	a357      	add	r3, pc, #348	@ (adr r3, 800a320 <__ieee754_pow+0xa28>)
 800a1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c8:	f7f5 ffce 	bl	8000168 <__aeabi_dsub>
 800a1cc:	4622      	mov	r2, r4
 800a1ce:	462b      	mov	r3, r5
 800a1d0:	f7f6 f982 	bl	80004d8 <__aeabi_dmul>
 800a1d4:	a354      	add	r3, pc, #336	@ (adr r3, 800a328 <__ieee754_pow+0xa30>)
 800a1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1da:	f7f5 ffc7 	bl	800016c <__adddf3>
 800a1de:	4622      	mov	r2, r4
 800a1e0:	462b      	mov	r3, r5
 800a1e2:	f7f6 f979 	bl	80004d8 <__aeabi_dmul>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4640      	mov	r0, r8
 800a1ec:	4649      	mov	r1, r9
 800a1ee:	f7f5 ffbb 	bl	8000168 <__aeabi_dsub>
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	460d      	mov	r5, r1
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4640      	mov	r0, r8
 800a1fc:	4649      	mov	r1, r9
 800a1fe:	f7f6 f96b 	bl	80004d8 <__aeabi_dmul>
 800a202:	2200      	movs	r2, #0
 800a204:	e9cd 0100 	strd	r0, r1, [sp]
 800a208:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a20c:	4620      	mov	r0, r4
 800a20e:	4629      	mov	r1, r5
 800a210:	f7f5 ffaa 	bl	8000168 <__aeabi_dsub>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a21c:	f7f6 fa86 	bl	800072c <__aeabi_ddiv>
 800a220:	4632      	mov	r2, r6
 800a222:	4604      	mov	r4, r0
 800a224:	460d      	mov	r5, r1
 800a226:	463b      	mov	r3, r7
 800a228:	4640      	mov	r0, r8
 800a22a:	4649      	mov	r1, r9
 800a22c:	f7f6 f954 	bl	80004d8 <__aeabi_dmul>
 800a230:	4632      	mov	r2, r6
 800a232:	463b      	mov	r3, r7
 800a234:	f7f5 ff9a 	bl	800016c <__adddf3>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4620      	mov	r0, r4
 800a23e:	4629      	mov	r1, r5
 800a240:	f7f5 ff92 	bl	8000168 <__aeabi_dsub>
 800a244:	4642      	mov	r2, r8
 800a246:	464b      	mov	r3, r9
 800a248:	f7f5 ff8e 	bl	8000168 <__aeabi_dsub>
 800a24c:	4602      	mov	r2, r0
 800a24e:	460b      	mov	r3, r1
 800a250:	2000      	movs	r0, #0
 800a252:	4938      	ldr	r1, [pc, #224]	@ (800a334 <__ieee754_pow+0xa3c>)
 800a254:	f7f5 ff88 	bl	8000168 <__aeabi_dsub>
 800a258:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a25c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800a260:	da2e      	bge.n	800a2c0 <__ieee754_pow+0x9c8>
 800a262:	4652      	mov	r2, sl
 800a264:	f000 f874 	bl	800a350 <scalbn>
 800a268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a26c:	f7ff bbed 	b.w	8009a4a <__ieee754_pow+0x152>
 800a270:	4c31      	ldr	r4, [pc, #196]	@ (800a338 <__ieee754_pow+0xa40>)
 800a272:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a276:	42a3      	cmp	r3, r4
 800a278:	d91a      	bls.n	800a2b0 <__ieee754_pow+0x9b8>
 800a27a:	4b30      	ldr	r3, [pc, #192]	@ (800a33c <__ieee754_pow+0xa44>)
 800a27c:	440b      	add	r3, r1
 800a27e:	4303      	orrs	r3, r0
 800a280:	d009      	beq.n	800a296 <__ieee754_pow+0x99e>
 800a282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a286:	2200      	movs	r2, #0
 800a288:	2300      	movs	r3, #0
 800a28a:	f7f6 fb97 	bl	80009bc <__aeabi_dcmplt>
 800a28e:	3800      	subs	r0, #0
 800a290:	bf18      	it	ne
 800a292:	2001      	movne	r0, #1
 800a294:	e444      	b.n	8009b20 <__ieee754_pow+0x228>
 800a296:	4642      	mov	r2, r8
 800a298:	464b      	mov	r3, r9
 800a29a:	f7f5 ff65 	bl	8000168 <__aeabi_dsub>
 800a29e:	4632      	mov	r2, r6
 800a2a0:	463b      	mov	r3, r7
 800a2a2:	f7f6 fb9f 	bl	80009e4 <__aeabi_dcmpge>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d1eb      	bne.n	800a282 <__ieee754_pow+0x98a>
 800a2aa:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800a340 <__ieee754_pow+0xa48>
 800a2ae:	e6fd      	b.n	800a0ac <__ieee754_pow+0x7b4>
 800a2b0:	469a      	mov	sl, r3
 800a2b2:	4b24      	ldr	r3, [pc, #144]	@ (800a344 <__ieee754_pow+0xa4c>)
 800a2b4:	459a      	cmp	sl, r3
 800a2b6:	f63f aef9 	bhi.w	800a0ac <__ieee754_pow+0x7b4>
 800a2ba:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a2be:	e71b      	b.n	800a0f8 <__ieee754_pow+0x800>
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	e7d1      	b.n	800a268 <__ieee754_pow+0x970>
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	491b      	ldr	r1, [pc, #108]	@ (800a334 <__ieee754_pow+0xa3c>)
 800a2c8:	f7ff bb34 	b.w	8009934 <__ieee754_pow+0x3c>
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	f7ff bb30 	b.w	8009934 <__ieee754_pow+0x3c>
 800a2d4:	4650      	mov	r0, sl
 800a2d6:	4659      	mov	r1, fp
 800a2d8:	f7ff bb2c 	b.w	8009934 <__ieee754_pow+0x3c>
 800a2dc:	460c      	mov	r4, r1
 800a2de:	f7ff bb79 	b.w	80099d4 <__ieee754_pow+0xdc>
 800a2e2:	2400      	movs	r4, #0
 800a2e4:	f7ff bb64 	b.w	80099b0 <__ieee754_pow+0xb8>
 800a2e8:	652b82fe 	.word	0x652b82fe
 800a2ec:	3c971547 	.word	0x3c971547
 800a2f0:	00000000 	.word	0x00000000
 800a2f4:	3fe62e43 	.word	0x3fe62e43
 800a2f8:	fefa39ef 	.word	0xfefa39ef
 800a2fc:	3fe62e42 	.word	0x3fe62e42
 800a300:	0ca86c39 	.word	0x0ca86c39
 800a304:	be205c61 	.word	0xbe205c61
 800a308:	72bea4d0 	.word	0x72bea4d0
 800a30c:	3e663769 	.word	0x3e663769
 800a310:	c5d26bf1 	.word	0xc5d26bf1
 800a314:	3ebbbd41 	.word	0x3ebbbd41
 800a318:	af25de2c 	.word	0xaf25de2c
 800a31c:	3f11566a 	.word	0x3f11566a
 800a320:	16bebd93 	.word	0x16bebd93
 800a324:	3f66c16c 	.word	0x3f66c16c
 800a328:	5555553e 	.word	0x5555553e
 800a32c:	3fc55555 	.word	0x3fc55555
 800a330:	fff00000 	.word	0xfff00000
 800a334:	3ff00000 	.word	0x3ff00000
 800a338:	4090cbff 	.word	0x4090cbff
 800a33c:	3f6f3400 	.word	0x3f6f3400
 800a340:	4090cc00 	.word	0x4090cc00
 800a344:	3fe00000 	.word	0x3fe00000

0800a348 <fabs>:
 800a348:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a34c:	4619      	mov	r1, r3
 800a34e:	4770      	bx	lr

0800a350 <scalbn>:
 800a350:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a354:	4616      	mov	r6, r2
 800a356:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a35a:	4683      	mov	fp, r0
 800a35c:	468c      	mov	ip, r1
 800a35e:	460b      	mov	r3, r1
 800a360:	b982      	cbnz	r2, 800a384 <scalbn+0x34>
 800a362:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a366:	4303      	orrs	r3, r0
 800a368:	d039      	beq.n	800a3de <scalbn+0x8e>
 800a36a:	4b2f      	ldr	r3, [pc, #188]	@ (800a428 <scalbn+0xd8>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	f7f6 f8b3 	bl	80004d8 <__aeabi_dmul>
 800a372:	4b2e      	ldr	r3, [pc, #184]	@ (800a42c <scalbn+0xdc>)
 800a374:	4683      	mov	fp, r0
 800a376:	429e      	cmp	r6, r3
 800a378:	468c      	mov	ip, r1
 800a37a:	da0d      	bge.n	800a398 <scalbn+0x48>
 800a37c:	a326      	add	r3, pc, #152	@ (adr r3, 800a418 <scalbn+0xc8>)
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	e01b      	b.n	800a3bc <scalbn+0x6c>
 800a384:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a388:	42ba      	cmp	r2, r7
 800a38a:	d109      	bne.n	800a3a0 <scalbn+0x50>
 800a38c:	4602      	mov	r2, r0
 800a38e:	f7f5 feed 	bl	800016c <__adddf3>
 800a392:	4683      	mov	fp, r0
 800a394:	468c      	mov	ip, r1
 800a396:	e022      	b.n	800a3de <scalbn+0x8e>
 800a398:	460b      	mov	r3, r1
 800a39a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a39e:	3a36      	subs	r2, #54	@ 0x36
 800a3a0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a3a4:	428e      	cmp	r6, r1
 800a3a6:	dd0c      	ble.n	800a3c2 <scalbn+0x72>
 800a3a8:	a31d      	add	r3, pc, #116	@ (adr r3, 800a420 <scalbn+0xd0>)
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	461c      	mov	r4, r3
 800a3b0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800a3b4:	f361 74df 	bfi	r4, r1, #31, #1
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	481d      	ldr	r0, [pc, #116]	@ (800a430 <scalbn+0xe0>)
 800a3bc:	f7f6 f88c 	bl	80004d8 <__aeabi_dmul>
 800a3c0:	e7e7      	b.n	800a392 <scalbn+0x42>
 800a3c2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a3c6:	4432      	add	r2, r6
 800a3c8:	428a      	cmp	r2, r1
 800a3ca:	dced      	bgt.n	800a3a8 <scalbn+0x58>
 800a3cc:	2a00      	cmp	r2, #0
 800a3ce:	dd0a      	ble.n	800a3e6 <scalbn+0x96>
 800a3d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a3d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a3d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a3dc:	46ac      	mov	ip, r5
 800a3de:	4658      	mov	r0, fp
 800a3e0:	4661      	mov	r1, ip
 800a3e2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a3e6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a3ea:	da09      	bge.n	800a400 <scalbn+0xb0>
 800a3ec:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a3f0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a3f4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a3f8:	480e      	ldr	r0, [pc, #56]	@ (800a434 <scalbn+0xe4>)
 800a3fa:	f041 011f 	orr.w	r1, r1, #31
 800a3fe:	e7bd      	b.n	800a37c <scalbn+0x2c>
 800a400:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a404:	3236      	adds	r2, #54	@ 0x36
 800a406:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a40a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a40e:	4658      	mov	r0, fp
 800a410:	4629      	mov	r1, r5
 800a412:	2200      	movs	r2, #0
 800a414:	4b08      	ldr	r3, [pc, #32]	@ (800a438 <scalbn+0xe8>)
 800a416:	e7d1      	b.n	800a3bc <scalbn+0x6c>
 800a418:	c2f8f359 	.word	0xc2f8f359
 800a41c:	01a56e1f 	.word	0x01a56e1f
 800a420:	8800759c 	.word	0x8800759c
 800a424:	7e37e43c 	.word	0x7e37e43c
 800a428:	43500000 	.word	0x43500000
 800a42c:	ffff3cb0 	.word	0xffff3cb0
 800a430:	8800759c 	.word	0x8800759c
 800a434:	c2f8f359 	.word	0xc2f8f359
 800a438:	3c900000 	.word	0x3c900000

0800a43c <with_errno>:
 800a43c:	b570      	push	{r4, r5, r6, lr}
 800a43e:	4604      	mov	r4, r0
 800a440:	460d      	mov	r5, r1
 800a442:	4616      	mov	r6, r2
 800a444:	f7fe fd1c 	bl	8008e80 <__errno>
 800a448:	4629      	mov	r1, r5
 800a44a:	6006      	str	r6, [r0, #0]
 800a44c:	4620      	mov	r0, r4
 800a44e:	bd70      	pop	{r4, r5, r6, pc}

0800a450 <xflow>:
 800a450:	b513      	push	{r0, r1, r4, lr}
 800a452:	4604      	mov	r4, r0
 800a454:	4619      	mov	r1, r3
 800a456:	4610      	mov	r0, r2
 800a458:	b10c      	cbz	r4, 800a45e <xflow+0xe>
 800a45a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a45e:	e9cd 2300 	strd	r2, r3, [sp]
 800a462:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a466:	f7f6 f837 	bl	80004d8 <__aeabi_dmul>
 800a46a:	2222      	movs	r2, #34	@ 0x22
 800a46c:	b002      	add	sp, #8
 800a46e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a472:	f7ff bfe3 	b.w	800a43c <with_errno>

0800a476 <__math_uflow>:
 800a476:	2200      	movs	r2, #0
 800a478:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a47c:	f7ff bfe8 	b.w	800a450 <xflow>

0800a480 <__math_oflow>:
 800a480:	2200      	movs	r2, #0
 800a482:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800a486:	f7ff bfe3 	b.w	800a450 <xflow>
	...

0800a48c <__ieee754_sqrt>:
 800a48c:	4a67      	ldr	r2, [pc, #412]	@ (800a62c <__ieee754_sqrt+0x1a0>)
 800a48e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a492:	438a      	bics	r2, r1
 800a494:	4606      	mov	r6, r0
 800a496:	460f      	mov	r7, r1
 800a498:	460b      	mov	r3, r1
 800a49a:	4604      	mov	r4, r0
 800a49c:	d10e      	bne.n	800a4bc <__ieee754_sqrt+0x30>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	f7f6 f81a 	bl	80004d8 <__aeabi_dmul>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	4639      	mov	r1, r7
 800a4ac:	f7f5 fe5e 	bl	800016c <__adddf3>
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	460f      	mov	r7, r1
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4bc:	2900      	cmp	r1, #0
 800a4be:	dc0c      	bgt.n	800a4da <__ieee754_sqrt+0x4e>
 800a4c0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800a4c4:	4302      	orrs	r2, r0
 800a4c6:	d0f5      	beq.n	800a4b4 <__ieee754_sqrt+0x28>
 800a4c8:	b189      	cbz	r1, 800a4ee <__ieee754_sqrt+0x62>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	f7f5 fe4c 	bl	8000168 <__aeabi_dsub>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	f7f6 f92a 	bl	800072c <__aeabi_ddiv>
 800a4d8:	e7ea      	b.n	800a4b0 <__ieee754_sqrt+0x24>
 800a4da:	150a      	asrs	r2, r1, #20
 800a4dc:	d115      	bne.n	800a50a <__ieee754_sqrt+0x7e>
 800a4de:	2100      	movs	r1, #0
 800a4e0:	e009      	b.n	800a4f6 <__ieee754_sqrt+0x6a>
 800a4e2:	0ae3      	lsrs	r3, r4, #11
 800a4e4:	3a15      	subs	r2, #21
 800a4e6:	0564      	lsls	r4, r4, #21
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d0fa      	beq.n	800a4e2 <__ieee754_sqrt+0x56>
 800a4ec:	e7f7      	b.n	800a4de <__ieee754_sqrt+0x52>
 800a4ee:	460a      	mov	r2, r1
 800a4f0:	e7fa      	b.n	800a4e8 <__ieee754_sqrt+0x5c>
 800a4f2:	005b      	lsls	r3, r3, #1
 800a4f4:	3101      	adds	r1, #1
 800a4f6:	02d8      	lsls	r0, r3, #11
 800a4f8:	d5fb      	bpl.n	800a4f2 <__ieee754_sqrt+0x66>
 800a4fa:	1e48      	subs	r0, r1, #1
 800a4fc:	1a12      	subs	r2, r2, r0
 800a4fe:	f1c1 0020 	rsb	r0, r1, #32
 800a502:	fa24 f000 	lsr.w	r0, r4, r0
 800a506:	4303      	orrs	r3, r0
 800a508:	408c      	lsls	r4, r1
 800a50a:	2600      	movs	r6, #0
 800a50c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a510:	2116      	movs	r1, #22
 800a512:	07d2      	lsls	r2, r2, #31
 800a514:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a518:	4632      	mov	r2, r6
 800a51a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a51e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a522:	bf5c      	itt	pl
 800a524:	005b      	lslpl	r3, r3, #1
 800a526:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a52a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a52e:	bf58      	it	pl
 800a530:	0064      	lslpl	r4, r4, #1
 800a532:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a536:	107f      	asrs	r7, r7, #1
 800a538:	0064      	lsls	r4, r4, #1
 800a53a:	1815      	adds	r5, r2, r0
 800a53c:	429d      	cmp	r5, r3
 800a53e:	bfde      	ittt	le
 800a540:	182a      	addle	r2, r5, r0
 800a542:	1b5b      	suble	r3, r3, r5
 800a544:	1836      	addle	r6, r6, r0
 800a546:	0fe5      	lsrs	r5, r4, #31
 800a548:	3901      	subs	r1, #1
 800a54a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a54e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a552:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a556:	d1f0      	bne.n	800a53a <__ieee754_sqrt+0xae>
 800a558:	460d      	mov	r5, r1
 800a55a:	f04f 0a20 	mov.w	sl, #32
 800a55e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a562:	429a      	cmp	r2, r3
 800a564:	eb01 0c00 	add.w	ip, r1, r0
 800a568:	db02      	blt.n	800a570 <__ieee754_sqrt+0xe4>
 800a56a:	d113      	bne.n	800a594 <__ieee754_sqrt+0x108>
 800a56c:	45a4      	cmp	ip, r4
 800a56e:	d811      	bhi.n	800a594 <__ieee754_sqrt+0x108>
 800a570:	f1bc 0f00 	cmp.w	ip, #0
 800a574:	eb0c 0100 	add.w	r1, ip, r0
 800a578:	da42      	bge.n	800a600 <__ieee754_sqrt+0x174>
 800a57a:	2900      	cmp	r1, #0
 800a57c:	db40      	blt.n	800a600 <__ieee754_sqrt+0x174>
 800a57e:	f102 0e01 	add.w	lr, r2, #1
 800a582:	1a9b      	subs	r3, r3, r2
 800a584:	4672      	mov	r2, lr
 800a586:	45a4      	cmp	ip, r4
 800a588:	bf88      	it	hi
 800a58a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a58e:	eba4 040c 	sub.w	r4, r4, ip
 800a592:	4405      	add	r5, r0
 800a594:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800a598:	f1ba 0a01 	subs.w	sl, sl, #1
 800a59c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800a5a0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a5a4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a5a8:	d1db      	bne.n	800a562 <__ieee754_sqrt+0xd6>
 800a5aa:	431c      	orrs	r4, r3
 800a5ac:	d01a      	beq.n	800a5e4 <__ieee754_sqrt+0x158>
 800a5ae:	4c20      	ldr	r4, [pc, #128]	@ (800a630 <__ieee754_sqrt+0x1a4>)
 800a5b0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800a634 <__ieee754_sqrt+0x1a8>
 800a5b4:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a5b8:	e9db 2300 	ldrd	r2, r3, [fp]
 800a5bc:	f7f5 fdd4 	bl	8000168 <__aeabi_dsub>
 800a5c0:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	4649      	mov	r1, r9
 800a5cc:	f7f6 fa00 	bl	80009d0 <__aeabi_dcmple>
 800a5d0:	b140      	cbz	r0, 800a5e4 <__ieee754_sqrt+0x158>
 800a5d2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a5d6:	e9db 2300 	ldrd	r2, r3, [fp]
 800a5da:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a5de:	d111      	bne.n	800a604 <__ieee754_sqrt+0x178>
 800a5e0:	4655      	mov	r5, sl
 800a5e2:	3601      	adds	r6, #1
 800a5e4:	1072      	asrs	r2, r6, #1
 800a5e6:	086b      	lsrs	r3, r5, #1
 800a5e8:	07f1      	lsls	r1, r6, #31
 800a5ea:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a5ee:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a5f2:	bf48      	it	mi
 800a5f4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800a5fe:	e757      	b.n	800a4b0 <__ieee754_sqrt+0x24>
 800a600:	4696      	mov	lr, r2
 800a602:	e7be      	b.n	800a582 <__ieee754_sqrt+0xf6>
 800a604:	f7f5 fdb2 	bl	800016c <__adddf3>
 800a608:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	4640      	mov	r0, r8
 800a612:	4649      	mov	r1, r9
 800a614:	f7f6 f9d2 	bl	80009bc <__aeabi_dcmplt>
 800a618:	b120      	cbz	r0, 800a624 <__ieee754_sqrt+0x198>
 800a61a:	1ca8      	adds	r0, r5, #2
 800a61c:	bf08      	it	eq
 800a61e:	3601      	addeq	r6, #1
 800a620:	3502      	adds	r5, #2
 800a622:	e7df      	b.n	800a5e4 <__ieee754_sqrt+0x158>
 800a624:	1c6b      	adds	r3, r5, #1
 800a626:	f023 0501 	bic.w	r5, r3, #1
 800a62a:	e7db      	b.n	800a5e4 <__ieee754_sqrt+0x158>
 800a62c:	7ff00000 	.word	0x7ff00000
 800a630:	200000e0 	.word	0x200000e0
 800a634:	200000d8 	.word	0x200000d8

0800a638 <_init>:
 800a638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63a:	bf00      	nop
 800a63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a63e:	bc08      	pop	{r3}
 800a640:	469e      	mov	lr, r3
 800a642:	4770      	bx	lr

0800a644 <_fini>:
 800a644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a646:	bf00      	nop
 800a648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a64a:	bc08      	pop	{r3}
 800a64c:	469e      	mov	lr, r3
 800a64e:	4770      	bx	lr
