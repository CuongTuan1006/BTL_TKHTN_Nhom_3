
BTL_Danhiem_RMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009de0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08009ef0  08009ef0  0000aef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a120  0800a120  0000c0a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a120  0800a120  0000b120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a128  0800a128  0000c0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a128  0800a128  0000b128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a12c  0800a12c  0000b12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0800a130  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e08  200000a0  0800a1d0  0000c0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ea8  0800a1d0  0000cea8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f56  00000000  00000000  0000c0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b5e  00000000  00000000  0002401f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  00027b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000122b  00000000  00000000  000292c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b19c  00000000  00000000  0002a4f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b7ac  00000000  00000000  0004568f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b98f  00000000  00000000  00060e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc7ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b90  00000000  00000000  000fc810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001033a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009ed8 	.word	0x08009ed8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	08009ed8 	.word	0x08009ed8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <CCS811_ReadReg>:
extern I2C_HandleTypeDef hi2c2;

#define hi2cxc hi2c2
// Hàm đọc từ 1 thanh ghi (1byte)
uint8_t CCS811_ReadReg(uint8_t addr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af04      	add	r7, sp, #16
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, &result, 1, 100);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	2364      	movs	r3, #100	@ 0x64
 8000d58:	9302      	str	r3, [sp, #8]
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	f107 030f 	add.w	r3, r7, #15
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	2301      	movs	r3, #1
 8000d66:	21b4      	movs	r1, #180	@ 0xb4
 8000d68:	4803      	ldr	r0, [pc, #12]	@ (8000d78 <CCS811_ReadReg+0x34>)
 8000d6a:	f002 fbeb 	bl	8003544 <HAL_I2C_Mem_Read>
    return result;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000394 	.word	0x20000394

08000d7c <CCS811_ReadRegMulti>:
// hàm đọc nhiều byte từ thanh ghi
void CCS811_ReadRegMulti(uint8_t addr, uint8_t * val,uint8_t size)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af04      	add	r7, sp, #16
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read( &hi2cxc, CCS811_ADDR, ( uint8_t )addr, I2C_MEMADD_SIZE_8BIT, val, size,100 );
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	79bb      	ldrb	r3, [r7, #6]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	2164      	movs	r1, #100	@ 0x64
 8000d96:	9102      	str	r1, [sp, #8]
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	21b4      	movs	r1, #180	@ 0xb4
 8000da2:	4803      	ldr	r0, [pc, #12]	@ (8000db0 <CCS811_ReadRegMulti+0x34>)
 8000da4:	f002 fbce 	bl	8003544 <HAL_I2C_Mem_Read>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000394 	.word	0x20000394

08000db4 <CCS811_WriteReg>:

// Hàm viết vào 1 thanh ghi 1byte
void CCS811_WriteReg(uint8_t addr, uint8_t val)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af04      	add	r7, sp, #16
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	71fb      	strb	r3, [r7, #7]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	2364      	movs	r3, #100	@ 0x64
 8000dca:	9302      	str	r3, [sp, #8]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	1dbb      	adds	r3, r7, #6
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	21b4      	movs	r1, #180	@ 0xb4
 8000dd8:	4803      	ldr	r0, [pc, #12]	@ (8000de8 <CCS811_WriteReg+0x34>)
 8000dda:	f002 fab9 	bl	8003350 <HAL_I2C_Mem_Write>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000394 	.word	0x20000394

08000dec <CCS811_Init>:
void CCS811_WriteRegMulti(uint8_t addr, uint8_t *data, uint8_t length)
{
    HAL_I2C_Mem_Write(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, data, length, 100);
}
// Hàm khởi tạo CCS811
void CCS811_Init() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af02      	add	r7, sp, #8
    uint8_t status[1] = {0};
 8000df2:	2300      	movs	r3, #0
 8000df4:	723b      	strb	r3, [r7, #8]
    int Init_OK = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
    while(!Init_OK)
 8000dfa:	e026      	b.n	8000e4a <CCS811_Init+0x5e>
    {
		// Kiểm tra trạng thái cảm biến
    	status[0]=CCS811_ReadReg(CCS811_STATUS);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ffa1 	bl	8000d44 <CCS811_ReadReg>
 8000e02:	4603      	mov	r3, r0
 8000e04:	723b      	strb	r3, [r7, #8]
		if ((status[0] & 0x10) == 0)
 8000e06:	7a3b      	ldrb	r3, [r7, #8]
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <CCS811_Init+0x2a>
		{  // Kiểm tra nếu chưa sẵn sàng (bit 4 là 0)
			Init_OK = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	e019      	b.n	8000e4a <CCS811_Init+0x5e>
		}
		else
		{
			// Gửi lệnh bắt đầu ứng dụng
			uint8_t app_start = CCS811_APP_START;
 8000e16:	23f4      	movs	r3, #244	@ 0xf4
 8000e18:	71fb      	strb	r3, [r7, #7]
			HAL_I2C_Master_Transmit(&hi2cxc, CCS811_ADDR, &app_start, 1, HAL_MAX_DELAY);
 8000e1a:	1dfa      	adds	r2, r7, #7
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	21b4      	movs	r1, #180	@ 0xb4
 8000e26:	480d      	ldr	r0, [pc, #52]	@ (8000e5c <CCS811_Init+0x70>)
 8000e28:	f002 f994 	bl	8003154 <HAL_I2C_Master_Transmit>
			// Kiểm tra lại trạng thái
			status[0]=CCS811_ReadReg(CCS811_STATUS);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff89 	bl	8000d44 <CCS811_ReadReg>
 8000e32:	4603      	mov	r3, r0
 8000e34:	723b      	strb	r3, [r7, #8]
			if ((status[0] & 0x90) != 0x90) //bit 7 và 4=1
 8000e36:	7a3b      	ldrb	r3, [r7, #8]
 8000e38:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 8000e3c:	2b90      	cmp	r3, #144	@ 0x90
 8000e3e:	d002      	beq.n	8000e46 <CCS811_Init+0x5a>
			{  // Kiểm tra nếu sẵn sàng và không có lỗi
				Init_OK = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	e001      	b.n	8000e4a <CCS811_Init+0x5e>
			}
			else
			{
				Init_OK = 1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
    while(!Init_OK)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0d5      	beq.n	8000dfc <CCS811_Init+0x10>
			}

		}
    }
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000394 	.word	0x20000394

08000e60 <CCS811_Set_Mode>:
void CCS811_Set_Mode(uint8_t mode)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
   // Chế độ đo
	mode = mode <<4;
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	71fb      	strb	r3, [r7, #7]
    CCS811_WriteReg(CCS811_MEAS_MODE, mode);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	4619      	mov	r1, r3
 8000e74:	2001      	movs	r0, #1
 8000e76:	f7ff ff9d 	bl	8000db4 <CCS811_WriteReg>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <CCS811_Read_Co2>:
	    //Mode 4 = RAW mode.
 */

//Hàm đọc giá trị Co2
void CCS811_Read_Co2(uint16_t *eCO2)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
    uint8_t buf[8]={0};
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
    CCS811_ReadRegMulti(CCS811_ALG_RESULT_DATA, buf, 8);
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	2208      	movs	r2, #8
 8000e98:	4619      	mov	r1, r3
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f7ff ff6e 	bl	8000d7c <CCS811_ReadRegMulti>
    // Ghép hai byte đầu để lấy giá trị eCO2
    *eCO2 = (buf[0] << 8) | buf[1];
 8000ea0:	7a3b      	ldrb	r3, [r7, #8]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	7a7b      	ldrb	r3, [r7, #9]
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	801a      	strh	r2, [r3, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <CCS811_Read_TVOC>:

void CCS811_Read_TVOC(uint16_t *Tvoc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    uint8_t buf[8]={0};
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
    CCS811_ReadRegMulti(CCS811_ALG_RESULT_DATA, buf, 8);
 8000ecc:	f107 0308 	add.w	r3, r7, #8
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f7ff ff51 	bl	8000d7c <CCS811_ReadRegMulti>
    // Ghép hai byte đầu để lấy giá trị eCO2
    *Tvoc = (buf[2] << 8) | buf[3];
 8000eda:	7abb      	ldrb	r3, [r7, #10]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	7afb      	ldrb	r3, [r7, #11]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	801a      	strh	r2, [r3, #0]
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <CCS811_Reset>:
void CCS811_Reset(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <CCS811_Reset+0x20>)
 8000f04:	f001 ffca 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f0e:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <CCS811_Reset+0x20>)
 8000f10:	f001 ffc4 	bl	8002e9c <HAL_GPIO_WritePin>
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40011000 	.word	0x40011000

08000f1c <CCS811_EnableInt>:
    }
}

//Enable the nINT signal
void CCS811_EnableInt(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
	uint8_t setting = CCS811_ReadReg(CCS811_MEAS_MODE); //đọc giá trị lúc trước
 8000f22:	2001      	movs	r0, #1
 8000f24:	f7ff ff0e 	bl	8000d44 <CCS811_ReadReg>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	71fb      	strb	r3, [r7, #7]
	setting |= (1 << 3); //Set INTERRUPT bit ( chế độ khi có giá trị mới sẽ ngắt)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f043 0308 	orr.w	r3, r3, #8
 8000f32:	71fb      	strb	r3, [r7, #7]
	CCS811_WriteReg(CCS811_MEAS_MODE, setting);
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	4619      	mov	r1, r3
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ff3b 	bl	8000db4 <CCS811_WriteReg>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4a06      	ldr	r2, [pc, #24]	@ (8000f70 <vApplicationGetIdleTaskMemory+0x28>)
 8000f58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4a05      	ldr	r2, [pc, #20]	@ (8000f74 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2280      	movs	r2, #128	@ 0x80
 8000f64:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	200000bc 	.word	0x200000bc
 8000f74:	20000110 	.word	0x20000110

08000f78 <lcd_send_cmd>:
/* vì chỉ dùng 4 bit cao làm 4 bit truyền dữ liệu nên phải truyền mỗi byte thành 2 lần */
/* 3 bit thấp là các chân En, RW, RS nên cũng cần phải đặt luôn trong mỗi lần truyền */

// hàm truyền lệnh, rs=0 để truyền lệnh
void lcd_send_cmd (char cmd)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f023 030f 	bic.w	r3, r3, #15
 8000f88:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  // en=1, rs=0
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	f043 030c 	orr.w	r3, r3, #12
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  // en=0, rs=0
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  // en=1, rs=0
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	f043 030c 	orr.w	r3, r3, #12
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  // en=0, rs=0
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000fb8:	f107 0208 	add.w	r2, r7, #8
 8000fbc:	2364      	movs	r3, #100	@ 0x64
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	214e      	movs	r1, #78	@ 0x4e
 8000fc4:	4803      	ldr	r0, [pc, #12]	@ (8000fd4 <lcd_send_cmd+0x5c>)
 8000fc6:	f002 f8c5 	bl	8003154 <HAL_I2C_Master_Transmit>
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000340 	.word	0x20000340

08000fd8 <lcd_send_data>:

// hàm truyền dữ liệu, 1 byte, rs=1 để truyền dữ liệu
void lcd_send_data (char data)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f023 030f 	bic.w	r3, r3, #15
 8000fe8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  // en=1, rs=1
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	f043 030d 	orr.w	r3, r3, #13
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  // en=0, rs=1
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f043 0309 	orr.w	r3, r3, #9
 8001000:	b2db      	uxtb	r3, r3
 8001002:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  // en=1, rs=1
 8001004:	7bbb      	ldrb	r3, [r7, #14]
 8001006:	f043 030d 	orr.w	r3, r3, #13
 800100a:	b2db      	uxtb	r3, r3
 800100c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  // en=0, rs=1
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	f043 0309 	orr.w	r3, r3, #9
 8001014:	b2db      	uxtb	r3, r3
 8001016:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8001018:	f107 0208 	add.w	r2, r7, #8
 800101c:	2364      	movs	r3, #100	@ 0x64
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2304      	movs	r3, #4
 8001022:	214e      	movs	r1, #78	@ 0x4e
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <lcd_send_data+0x5c>)
 8001026:	f002 f895 	bl	8003154 <HAL_I2C_Master_Transmit>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000340 	.word	0x20000340

08001038 <lcd_clear>:

void lcd_clear (void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 800103e:	2080      	movs	r0, #128	@ 0x80
 8001040:	f7ff ff9a 	bl	8000f78 <lcd_send_cmd>
	for (int i = 0; i < 70; i++)
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	e005      	b.n	8001056 <lcd_clear+0x1e>
	{
		lcd_send_data(' ');
 800104a:	2020      	movs	r0, #32
 800104c:	f7ff ffc4 	bl	8000fd8 <lcd_send_data>
	for (int i = 0; i < 70; i++)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3301      	adds	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b45      	cmp	r3, #69	@ 0x45
 800105a:	ddf6      	ble.n	800104a <lcd_clear+0x12>
	}
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
    switch (row)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <lcd_put_cur+0x18>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d005      	beq.n	8001088 <lcd_put_cur+0x22>
 800107c:	e009      	b.n	8001092 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001084:	603b      	str	r3, [r7, #0]
            break;
 8001086:	e004      	b.n	8001092 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800108e:	603b      	str	r3, [r7, #0]
            break;
 8001090:	bf00      	nop
    }

    lcd_send_cmd(col);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff6e 	bl	8000f78 <lcd_send_cmd>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <lcd_init>:

void lcd_init (void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	// khởi tạo 4 bit
	HAL_Delay(50);  // đợi >40ms
 80010a8:	2032      	movs	r0, #50	@ 0x32
 80010aa:	f001 f897 	bl	80021dc <HAL_Delay>
	lcd_send_cmd(0x30);
 80010ae:	2030      	movs	r0, #48	@ 0x30
 80010b0:	f7ff ff62 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(5);  // đợi >4.1ms
 80010b4:	2005      	movs	r0, #5
 80010b6:	f001 f891 	bl	80021dc <HAL_Delay>
	lcd_send_cmd(0x30);
 80010ba:	2030      	movs	r0, #48	@ 0x30
 80010bc:	f7ff ff5c 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(1);  // đợi >100us
 80010c0:	2001      	movs	r0, #1
 80010c2:	f001 f88b 	bl	80021dc <HAL_Delay>
	lcd_send_cmd(0x30);
 80010c6:	2030      	movs	r0, #48	@ 0x30
 80010c8:	f7ff ff56 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(10);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f001 f885 	bl	80021dc <HAL_Delay>
	lcd_send_cmd(0x20);  // chế độ 4 bit
 80010d2:	2020      	movs	r0, #32
 80010d4:	f7ff ff50 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(10);
 80010d8:	200a      	movs	r0, #10
 80010da:	f001 f87f 	bl	80021dc <HAL_Delay>

  // khởi tạo hiển thị
	lcd_send_cmd(0x28); // Cài đặt chức năng --> DL=0 (chế độ 4 bit), N=1 (hiển thị 2 dòng), F=0 (ký tự 5x8)
 80010de:	2028      	movs	r0, #40	@ 0x28
 80010e0:	f7ff ff4a 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f001 f879 	bl	80021dc <HAL_Delay>
	lcd_send_cmd(0x08); // Điều khiển bật/tắt hiển thị --> D=0, C=0, B=0 ---> tắt hiển thị
 80010ea:	2008      	movs	r0, #8
 80010ec:	f7ff ff44 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f001 f873 	bl	80021dc <HAL_Delay>
	lcd_send_cmd(0x01);  // xóa màn hình
 80010f6:	2001      	movs	r0, #1
 80010f8:	f7ff ff3e 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f001 f86d 	bl	80021dc <HAL_Delay>
	HAL_Delay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f001 f86a 	bl	80021dc <HAL_Delay>
	lcd_send_cmd(0x06); // Cài đặt chế độ nhập --> I/D=1 (tăng con trỏ) & S=0 (không dịch chuyển)
 8001108:	2006      	movs	r0, #6
 800110a:	f7ff ff35 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f001 f864 	bl	80021dc <HAL_Delay>
	lcd_send_cmd(0x0C); // Điều khiển bật/tắt hiển thị --> D=1, C và B=0. (Con trỏ và nhấp nháy, hai bit cuối)
 8001114:	200c      	movs	r0, #12
 8001116:	f7ff ff2f 	bl	8000f78 <lcd_send_cmd>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}

0800111e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 8001126:	e006      	b.n	8001136 <lcd_send_string+0x18>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff51 	bl	8000fd8 <lcd_send_data>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f4      	bne.n	8001128 <lcd_send_string+0xa>
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <CO_ppm_convert>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int CO_ppm_convert(float CO_vol) {
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    float a = ((5.0 - CO_vol) / CO_vol) * (10/10);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f969 	bl	8000428 <__aeabi_f2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	491e      	ldr	r1, [pc, #120]	@ (80011d8 <CO_ppm_convert+0x90>)
 8001160:	f7ff f802 	bl	8000168 <__aeabi_dsub>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4614      	mov	r4, r2
 800116a:	461d      	mov	r5, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff f95b 	bl	8000428 <__aeabi_f2d>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4620      	mov	r0, r4
 8001178:	4629      	mov	r1, r5
 800117a:	f7ff fad7 	bl	800072c <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fc7f 	bl	8000a88 <__aeabi_d2f>
 800118a:	4603      	mov	r3, r0
 800118c:	60fb      	str	r3, [r7, #12]
    return (int)round(100 * pow(a, -1.559));
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f7ff f94a 	bl	8000428 <__aeabi_f2d>
 8001194:	a30e      	add	r3, pc, #56	@ (adr r3, 80011d0 <CO_ppm_convert+0x88>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	f007 ff49 	bl	8009030 <pow>
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <CO_ppm_convert+0x94>)
 80011a4:	f7ff f998 	bl	80004d8 <__aeabi_dmul>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f007 ffac 	bl	800910c <round>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fc3c 	bl	8000a38 <__aeabi_d2iz>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	f3af 8000 	nop.w
 80011d0:	fbe76c8b 	.word	0xfbe76c8b
 80011d4:	bff8f1a9 	.word	0xbff8f1a9
 80011d8:	40140000 	.word	0x40140000
 80011dc:	40590000 	.word	0x40590000

080011e0 <CO_measure>:
void CO_measure()
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	CO_adc_val = HAL_ADC_GetValue(&hadc1);
 80011e4:	481a      	ldr	r0, [pc, #104]	@ (8001250 <CO_measure+0x70>)
 80011e6:	f001 f9a3 	bl	8002530 <HAL_ADC_GetValue>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a19      	ldr	r2, [pc, #100]	@ (8001254 <CO_measure+0x74>)
 80011ee:	6013      	str	r3, [r2, #0]
	CO_vol = ((float)CO_adc_val / 4095.0) * 5;
 80011f0:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <CO_measure+0x74>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fd4d 	bl	8000c94 <__aeabi_ui2f>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f913 	bl	8000428 <__aeabi_f2d>
 8001202:	a311      	add	r3, pc, #68	@ (adr r3, 8001248 <CO_measure+0x68>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff fa90 	bl	800072c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <CO_measure+0x78>)
 800121a:	f7ff f95d 	bl	80004d8 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fc2f 	bl	8000a88 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	4a0b      	ldr	r2, [pc, #44]	@ (800125c <CO_measure+0x7c>)
 800122e:	6013      	str	r3, [r2, #0]
	CO_ppm = (uint16_t)(CO_ppm_convert(CO_vol));
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <CO_measure+0x7c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff87 	bl	8001148 <CO_ppm_convert>
 800123a:	4603      	mov	r3, r0
 800123c:	b29a      	uxth	r2, r3
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <CO_measure+0x80>)
 8001240:	801a      	strh	r2, [r3, #0]
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	00000000 	.word	0x00000000
 800124c:	40affe00 	.word	0x40affe00
 8001250:	20000310 	.word	0x20000310
 8001254:	20000464 	.word	0x20000464
 8001258:	40140000 	.word	0x40140000
 800125c:	2000046c 	.word	0x2000046c
 8001260:	20000470 	.word	0x20000470

08001264 <TVOC_measure>:
void TVOC_measure()
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	CCS811_Read_TVOC(&Tvoc);
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <TVOC_measure+0x18>)
 800126a:	f7ff fe27 	bl	8000ebc <CCS811_Read_TVOC>
	Tvoc_ppb=Tvoc;
 800126e:	4b03      	ldr	r3, [pc, #12]	@ (800127c <TVOC_measure+0x18>)
 8001270:	881a      	ldrh	r2, [r3, #0]
 8001272:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <TVOC_measure+0x1c>)
 8001274:	801a      	strh	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000460 	.word	0x20000460
 8001280:	20000462 	.word	0x20000462

08001284 <CO2_measure>:
void CO2_measure()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	CCS811_Read_Co2(&eCO2);
 8001288:	4804      	ldr	r0, [pc, #16]	@ (800129c <CO2_measure+0x18>)
 800128a:	f7ff fdfa 	bl	8000e82 <CCS811_Read_Co2>
	CO2_ppm=eCO2;
 800128e:	4b03      	ldr	r3, [pc, #12]	@ (800129c <CO2_measure+0x18>)
 8001290:	881a      	ldrh	r2, [r3, #0]
 8001292:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <CO2_measure+0x1c>)
 8001294:	801a      	strh	r2, [r3, #0]
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000468 	.word	0x20000468
 80012a0:	2000046a 	.word	0x2000046a

080012a4 <LCD_Display>:
void LCD_Display(SensorData data)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	463c      	mov	r4, r7
 80012ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	lcd_clear();
 80012b0:	f7ff fec2 	bl	8001038 <lcd_clear>
	lcd_put_cur(0,0);
 80012b4:	2100      	movs	r1, #0
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff fed5 	bl	8001066 <lcd_put_cur>
	snprintf(Lcd_buf, sizeof(Lcd_buf), "%s:", data.sensorName);
 80012bc:	463b      	mov	r3, r7
 80012be:	3304      	adds	r3, #4
 80012c0:	4a0e      	ldr	r2, [pc, #56]	@ (80012fc <LCD_Display+0x58>)
 80012c2:	2110      	movs	r1, #16
 80012c4:	480e      	ldr	r0, [pc, #56]	@ (8001300 <LCD_Display+0x5c>)
 80012c6:	f007 f9cf 	bl	8008668 <sniprintf>
	lcd_send_string (Lcd_buf);
 80012ca:	480d      	ldr	r0, [pc, #52]	@ (8001300 <LCD_Display+0x5c>)
 80012cc:	f7ff ff27 	bl	800111e <lcd_send_string>
	lcd_put_cur(1,0);
 80012d0:	2100      	movs	r1, #0
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff fec7 	bl	8001066 <lcd_put_cur>
	snprintf(Lcd_buf, sizeof(Lcd_buf), "%d %s", (int)data.value, data.unit);
 80012d8:	89fb      	ldrh	r3, [r7, #14]
 80012da:	461a      	mov	r2, r3
 80012dc:	463b      	mov	r3, r7
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4613      	mov	r3, r2
 80012e2:	4a08      	ldr	r2, [pc, #32]	@ (8001304 <LCD_Display+0x60>)
 80012e4:	2110      	movs	r1, #16
 80012e6:	4806      	ldr	r0, [pc, #24]	@ (8001300 <LCD_Display+0x5c>)
 80012e8:	f007 f9be 	bl	8008668 <sniprintf>
	lcd_send_string (Lcd_buf);
 80012ec:	4804      	ldr	r0, [pc, #16]	@ (8001300 <LCD_Display+0x5c>)
 80012ee:	f7ff ff16 	bl	800111e <lcd_send_string>
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd90      	pop	{r4, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	08009ef0 	.word	0x08009ef0
 8001300:	20000474 	.word	0x20000474
 8001304:	08009ef4 	.word	0x08009ef4

08001308 <Uart_Send>:

void Uart_Send()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	sprintf((char*)Uart_TX_Buf, "TVOC:%d ppb\r\n",(int)Tvoc_ppb);
 800130c:	4b23      	ldr	r3, [pc, #140]	@ (800139c <Uart_Send+0x94>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4923      	ldr	r1, [pc, #140]	@ (80013a0 <Uart_Send+0x98>)
 8001314:	4823      	ldr	r0, [pc, #140]	@ (80013a4 <Uart_Send+0x9c>)
 8001316:	f007 f9db 	bl	80086d0 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*) Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
 800131a:	4822      	ldr	r0, [pc, #136]	@ (80013a4 <Uart_Send+0x9c>)
 800131c:	f7fe ff18 	bl	8000150 <strlen>
 8001320:	4603      	mov	r3, r0
 8001322:	b29a      	uxth	r2, r3
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	491e      	ldr	r1, [pc, #120]	@ (80013a4 <Uart_Send+0x9c>)
 800132a:	481f      	ldr	r0, [pc, #124]	@ (80013a8 <Uart_Send+0xa0>)
 800132c:	f003 ff38 	bl	80051a0 <HAL_UART_Transmit>
	sprintf((char*)Uart_TX_Buf, "CO:%d ppm\r\n",(int)CO_ppm);
 8001330:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <Uart_Send+0xa4>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	491e      	ldr	r1, [pc, #120]	@ (80013b0 <Uart_Send+0xa8>)
 8001338:	481a      	ldr	r0, [pc, #104]	@ (80013a4 <Uart_Send+0x9c>)
 800133a:	f007 f9c9 	bl	80086d0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
 800133e:	4819      	ldr	r0, [pc, #100]	@ (80013a4 <Uart_Send+0x9c>)
 8001340:	f7fe ff06 	bl	8000150 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	b29a      	uxth	r2, r3
 8001348:	f04f 33ff 	mov.w	r3, #4294967295
 800134c:	4915      	ldr	r1, [pc, #84]	@ (80013a4 <Uart_Send+0x9c>)
 800134e:	4816      	ldr	r0, [pc, #88]	@ (80013a8 <Uart_Send+0xa0>)
 8001350:	f003 ff26 	bl	80051a0 <HAL_UART_Transmit>
	sprintf((char*)Uart_TX_Buf, "CO2:%d ppm\r\n",(int)CO2_ppm);
 8001354:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <Uart_Send+0xac>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4917      	ldr	r1, [pc, #92]	@ (80013b8 <Uart_Send+0xb0>)
 800135c:	4811      	ldr	r0, [pc, #68]	@ (80013a4 <Uart_Send+0x9c>)
 800135e:	f007 f9b7 	bl	80086d0 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
 8001362:	4810      	ldr	r0, [pc, #64]	@ (80013a4 <Uart_Send+0x9c>)
 8001364:	f7fe fef4 	bl	8000150 <strlen>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	490c      	ldr	r1, [pc, #48]	@ (80013a4 <Uart_Send+0x9c>)
 8001372:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <Uart_Send+0xa0>)
 8001374:	f003 ff14 	bl	80051a0 <HAL_UART_Transmit>
	sprintf((char*)Uart_TX_Buf, "--------\r\n");
 8001378:	4910      	ldr	r1, [pc, #64]	@ (80013bc <Uart_Send+0xb4>)
 800137a:	480a      	ldr	r0, [pc, #40]	@ (80013a4 <Uart_Send+0x9c>)
 800137c:	f007 f9a8 	bl	80086d0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)Uart_TX_Buf, strlen((char*)Uart_TX_Buf), HAL_MAX_DELAY);
 8001380:	4808      	ldr	r0, [pc, #32]	@ (80013a4 <Uart_Send+0x9c>)
 8001382:	f7fe fee5 	bl	8000150 <strlen>
 8001386:	4603      	mov	r3, r0
 8001388:	b29a      	uxth	r2, r3
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	4905      	ldr	r1, [pc, #20]	@ (80013a4 <Uart_Send+0x9c>)
 8001390:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <Uart_Send+0xa0>)
 8001392:	f003 ff05 	bl	80051a0 <HAL_UART_Transmit>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000462 	.word	0x20000462
 80013a0:	08009efc 	.word	0x08009efc
 80013a4:	20000484 	.word	0x20000484
 80013a8:	200003e8 	.word	0x200003e8
 80013ac:	20000470 	.word	0x20000470
 80013b0:	08009f0c 	.word	0x08009f0c
 80013b4:	2000046a 	.word	0x2000046a
 80013b8:	08009f18 	.word	0x08009f18
 80013bc:	08009f28 	.word	0x08009f28

080013c0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a08      	ldr	r2, [pc, #32]	@ (80013f0 <HAL_UART_RxCpltCallback+0x30>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d104      	bne.n	80013dc <HAL_UART_RxCpltCallback+0x1c>
    {
    	osSemaphoreRelease(BinarySem_ISRHandle);
 80013d2:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <HAL_UART_RxCpltCallback+0x34>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 fea8 	bl	800612c <osSemaphoreRelease>
    }
    HAL_UART_Receive_IT(&huart1, Uart_RX_Buf, 1);
 80013dc:	2201      	movs	r2, #1
 80013de:	4906      	ldr	r1, [pc, #24]	@ (80013f8 <HAL_UART_RxCpltCallback+0x38>)
 80013e0:	4806      	ldr	r0, [pc, #24]	@ (80013fc <HAL_UART_RxCpltCallback+0x3c>)
 80013e2:	f003 ff68 	bl	80052b6 <HAL_UART_Receive_IT>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40013800 	.word	0x40013800
 80013f4:	2000045c 	.word	0x2000045c
 80013f8:	200004ac 	.word	0x200004ac
 80013fc:	200003e8 	.word	0x200003e8

08001400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001400:	b5b0      	push	{r4, r5, r7, lr}
 8001402:	b0c6      	sub	sp, #280	@ 0x118
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001406:	f000 feb7 	bl	8002178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140a:	f000 f929 	bl	8001660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140e:	f000 fa3b 	bl	8001888 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001412:	f000 f975 	bl	8001700 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001416:	f000 f9b1 	bl	800177c <MX_I2C1_Init>
  MX_I2C2_Init();
 800141a:	f000 f9dd 	bl	80017d8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800141e:	f000 fa09 	bl	8001834 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CCS811_Init();
 8001422:	f7ff fce3 	bl	8000dec <CCS811_Init>
  CCS811_Reset();
 8001426:	f7ff fd67 	bl	8000ef8 <CCS811_Reset>
  CCS811_Set_Mode(CCS811_MODE_1SEC);
 800142a:	2001      	movs	r0, #1
 800142c:	f7ff fd18 	bl	8000e60 <CCS811_Set_Mode>
  CCS811_EnableInt();
 8001430:	f7ff fd74 	bl	8000f1c <CCS811_EnableInt>
  HAL_ADC_Start(&hadc1);
 8001434:	4872      	ldr	r0, [pc, #456]	@ (8001600 <main+0x200>)
 8001436:	f000 ffcd 	bl	80023d4 <HAL_ADC_Start>
  lcd_init();
 800143a:	f7ff fe33 	bl	80010a4 <lcd_init>
  HAL_UART_Receive_IT(&huart1, Uart_RX_Buf, 1);
 800143e:	2201      	movs	r2, #1
 8001440:	4970      	ldr	r1, [pc, #448]	@ (8001604 <main+0x204>)
 8001442:	4871      	ldr	r0, [pc, #452]	@ (8001608 <main+0x208>)
 8001444:	f003 ff37 	bl	80052b6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexMeasure */
  osMutexDef(MutexMeasure);
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  MutexMeasureHandle = osMutexCreate(osMutex(MutexMeasure));
 8001454:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001458:	4618      	mov	r0, r3
 800145a:	f004 fd4a 	bl	8005ef2 <osMutexCreate>
 800145e:	4603      	mov	r3, r0
 8001460:	4a6a      	ldr	r2, [pc, #424]	@ (800160c <main+0x20c>)
 8001462:	6013      	str	r3, [r2, #0]

  /* definition and creation of MutexLCD */
  osMutexDef(MutexLCD);
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  MutexLCDHandle = osMutexCreate(osMutex(MutexLCD));
 8001470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001474:	4618      	mov	r0, r3
 8001476:	f004 fd3c 	bl	8005ef2 <osMutexCreate>
 800147a:	4603      	mov	r3, r0
 800147c:	4a64      	ldr	r2, [pc, #400]	@ (8001610 <main+0x210>)
 800147e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinarySem_ISR */
  osSemaphoreDef(BinarySem_ISR);
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  BinarySem_ISRHandle = osSemaphoreCreate(osSemaphore(BinarySem_ISR), 1);
 800148c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001490:	2101      	movs	r1, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f004 fdca 	bl	800602c <osSemaphoreCreate>
 8001498:	4603      	mov	r3, r0
 800149a:	4a5e      	ldr	r2, [pc, #376]	@ (8001614 <main+0x214>)
 800149c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TVOC_mea */
  osThreadDef(TVOC_mea, StartTVOC_mea, osPriorityAboveNormal, 0, 128);
 800149e:	4b5e      	ldr	r3, [pc, #376]	@ (8001618 <main+0x218>)
 80014a0:	f107 04e4 	add.w	r4, r7, #228	@ 0xe4
 80014a4:	461d      	mov	r5, r3
 80014a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TVOC_meaHandle = osThreadCreate(osThread(TVOC_mea), NULL);
 80014b2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f004 fcba 	bl	8005e32 <osThreadCreate>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a56      	ldr	r2, [pc, #344]	@ (800161c <main+0x21c>)
 80014c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of CO2_mea */
  osThreadDef(CO2_mea, StartCO2_mea, osPriorityAboveNormal, 0, 128);
 80014c4:	4b56      	ldr	r3, [pc, #344]	@ (8001620 <main+0x220>)
 80014c6:	f107 04c8 	add.w	r4, r7, #200	@ 0xc8
 80014ca:	461d      	mov	r5, r3
 80014cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CO2_meaHandle = osThreadCreate(osThread(CO2_mea), NULL);
 80014d8:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f004 fca7 	bl	8005e32 <osThreadCreate>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a4f      	ldr	r2, [pc, #316]	@ (8001624 <main+0x224>)
 80014e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of CO_mea */
  osThreadDef(CO_mea, StartCO_mea, osPriorityHigh, 0, 128);
 80014ea:	4b4f      	ldr	r3, [pc, #316]	@ (8001628 <main+0x228>)
 80014ec:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 80014f0:	461d      	mov	r5, r3
 80014f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CO_meaHandle = osThreadCreate(osThread(CO_mea), NULL);
 80014fe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f004 fc94 	bl	8005e32 <osThreadCreate>
 800150a:	4603      	mov	r3, r0
 800150c:	4a47      	ldr	r2, [pc, #284]	@ (800162c <main+0x22c>)
 800150e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_ISR */
  osThreadDef(Task_ISR, StartTask_ISR, osPriorityRealtime, 0, 128);
 8001510:	4b47      	ldr	r3, [pc, #284]	@ (8001630 <main+0x230>)
 8001512:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001516:	461d      	mov	r5, r3
 8001518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_ISRHandle = osThreadCreate(osThread(Task_ISR), NULL);
 8001524:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f004 fc81 	bl	8005e32 <osThreadCreate>
 8001530:	4603      	mov	r3, r0
 8001532:	4a40      	ldr	r2, [pc, #256]	@ (8001634 <main+0x234>)
 8001534:	6013      	str	r3, [r2, #0]

  /* definition and creation of Uart_Send */
  osThreadDef(Uart_Send, StartUart_Send, osPriorityAboveNormal, 0, 128);
 8001536:	4b40      	ldr	r3, [pc, #256]	@ (8001638 <main+0x238>)
 8001538:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800153c:	461d      	mov	r5, r3
 800153e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001542:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Uart_SendHandle = osThreadCreate(osThread(Uart_Send), NULL);
 800154a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f004 fc6e 	bl	8005e32 <osThreadCreate>
 8001556:	4603      	mov	r3, r0
 8001558:	4a38      	ldr	r2, [pc, #224]	@ (800163c <main+0x23c>)
 800155a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD_TVOC */
  osThreadDef(LCD_TVOC, StartLCD_TVOC, osPriorityNormal, 0, 128);
 800155c:	4b38      	ldr	r3, [pc, #224]	@ (8001640 <main+0x240>)
 800155e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001562:	461d      	mov	r5, r3
 8001564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001568:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800156c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCD_TVOCHandle = osThreadCreate(osThread(LCD_TVOC), NULL);
 8001570:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f004 fc5b 	bl	8005e32 <osThreadCreate>
 800157c:	4603      	mov	r3, r0
 800157e:	4a31      	ldr	r2, [pc, #196]	@ (8001644 <main+0x244>)
 8001580:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD_CO */
  osThreadDef(LCD_CO, StartLCD_CO, osPriorityAboveNormal, 0, 128);
 8001582:	4b31      	ldr	r3, [pc, #196]	@ (8001648 <main+0x248>)
 8001584:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001588:	461d      	mov	r5, r3
 800158a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800158c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800158e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCD_COHandle = osThreadCreate(osThread(LCD_CO), NULL);
 8001596:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f004 fc48 	bl	8005e32 <osThreadCreate>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4a29      	ldr	r2, [pc, #164]	@ (800164c <main+0x24c>)
 80015a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD_CO2 */
  osThreadDef(LCD_CO2, StartLCD_CO2, osPriorityAboveNormal, 0, 128);
 80015a8:	4b29      	ldr	r3, [pc, #164]	@ (8001650 <main+0x250>)
 80015aa:	f107 0420 	add.w	r4, r7, #32
 80015ae:	461d      	mov	r5, r3
 80015b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCD_CO2Handle = osThreadCreate(osThread(LCD_CO2), NULL);
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f004 fc35 	bl	8005e32 <osThreadCreate>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4a22      	ldr	r2, [pc, #136]	@ (8001654 <main+0x254>)
 80015cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Warning */
  osThreadDef(Warning, StartWarning, osPriorityRealtime, 0, 128);
 80015ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015d6:	4a20      	ldr	r2, [pc, #128]	@ (8001658 <main+0x258>)
 80015d8:	461c      	mov	r4, r3
 80015da:	4615      	mov	r5, r2
 80015dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WarningHandle = osThreadCreate(osThread(Warning), NULL);
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f004 fc20 	bl	8005e32 <osThreadCreate>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a19      	ldr	r2, [pc, #100]	@ (800165c <main+0x25c>)
 80015f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80015f8:	f004 fc14 	bl	8005e24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <main+0x1fc>
 8001600:	20000310 	.word	0x20000310
 8001604:	200004ac 	.word	0x200004ac
 8001608:	200003e8 	.word	0x200003e8
 800160c:	20000454 	.word	0x20000454
 8001610:	20000458 	.word	0x20000458
 8001614:	2000045c 	.word	0x2000045c
 8001618:	08009f40 	.word	0x08009f40
 800161c:	20000430 	.word	0x20000430
 8001620:	08009f64 	.word	0x08009f64
 8001624:	20000434 	.word	0x20000434
 8001628:	08009f88 	.word	0x08009f88
 800162c:	20000438 	.word	0x20000438
 8001630:	08009fb0 	.word	0x08009fb0
 8001634:	2000043c 	.word	0x2000043c
 8001638:	08009fd8 	.word	0x08009fd8
 800163c:	20000440 	.word	0x20000440
 8001640:	0800a000 	.word	0x0800a000
 8001644:	20000444 	.word	0x20000444
 8001648:	0800a024 	.word	0x0800a024
 800164c:	20000448 	.word	0x20000448
 8001650:	0800a048 	.word	0x0800a048
 8001654:	2000044c 	.word	0x2000044c
 8001658:	0800a06c 	.word	0x0800a06c
 800165c:	20000450 	.word	0x20000450

08001660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b094      	sub	sp, #80	@ 0x50
 8001664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001666:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800166a:	2228      	movs	r2, #40	@ 0x28
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f007 f84e 	bl	8008710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001690:	2302      	movs	r3, #2
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001694:	2301      	movs	r3, #1
 8001696:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001698:	2310      	movs	r3, #16
 800169a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800169c:	2300      	movs	r3, #0
 800169e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 fdf7 	bl	8004298 <HAL_RCC_OscConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80016b0:	f000 faa3 	bl	8001bfa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b4:	230f      	movs	r3, #15
 80016b6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 f864 	bl	800479c <HAL_RCC_ClockConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80016da:	f000 fa8e 	bl	8001bfa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016de:	2302      	movs	r3, #2
 80016e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 fa15 	bl	8004b18 <HAL_RCCEx_PeriphCLKConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016f4:	f000 fa81 	bl	8001bfa <Error_Handler>
  }
}
 80016f8:	bf00      	nop
 80016fa:	3750      	adds	r7, #80	@ 0x50
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001710:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <MX_ADC1_Init+0x74>)
 8001712:	4a19      	ldr	r2, [pc, #100]	@ (8001778 <MX_ADC1_Init+0x78>)
 8001714:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001716:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <MX_ADC1_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800171c:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <MX_ADC1_Init+0x74>)
 800171e:	2201      	movs	r2, #1
 8001720:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001722:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <MX_ADC1_Init+0x74>)
 8001724:	2200      	movs	r2, #0
 8001726:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <MX_ADC1_Init+0x74>)
 800172a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800172e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001730:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <MX_ADC1_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001736:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <MX_ADC1_Init+0x74>)
 8001738:	2201      	movs	r2, #1
 800173a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800173c:	480d      	ldr	r0, [pc, #52]	@ (8001774 <MX_ADC1_Init+0x74>)
 800173e:	f000 fd71 	bl	8002224 <HAL_ADC_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001748:	f000 fa57 	bl	8001bfa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001750:	2301      	movs	r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	@ (8001774 <MX_ADC1_Init+0x74>)
 800175e:	f000 fef3 	bl	8002548 <HAL_ADC_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001768:	f000 fa47 	bl	8001bfa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000310 	.word	0x20000310
 8001778:	40012400 	.word	0x40012400

0800177c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001780:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <MX_I2C1_Init+0x50>)
 8001782:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <MX_I2C1_Init+0x54>)
 8001784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <MX_I2C1_Init+0x50>)
 8001788:	4a12      	ldr	r2, [pc, #72]	@ (80017d4 <MX_I2C1_Init+0x58>)
 800178a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800178c:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <MX_I2C1_Init+0x50>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <MX_I2C1_Init+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <MX_I2C1_Init+0x50>)
 800179a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800179e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a0:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <MX_I2C1_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <MX_I2C1_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ac:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <MX_I2C1_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <MX_I2C1_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	@ (80017cc <MX_I2C1_Init+0x50>)
 80017ba:	f001 fb87 	bl	8002ecc <HAL_I2C_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017c4:	f000 fa19 	bl	8001bfa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000340 	.word	0x20000340
 80017d0:	40005400 	.word	0x40005400
 80017d4:	000186a0 	.word	0x000186a0

080017d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <MX_I2C2_Init+0x50>)
 80017de:	4a13      	ldr	r2, [pc, #76]	@ (800182c <MX_I2C2_Init+0x54>)
 80017e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017e2:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <MX_I2C2_Init+0x50>)
 80017e4:	4a12      	ldr	r2, [pc, #72]	@ (8001830 <MX_I2C2_Init+0x58>)
 80017e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <MX_I2C2_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <MX_I2C2_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <MX_I2C2_Init+0x50>)
 80017f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <MX_I2C2_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <MX_I2C2_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001808:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <MX_I2C2_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <MX_I2C2_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001814:	4804      	ldr	r0, [pc, #16]	@ (8001828 <MX_I2C2_Init+0x50>)
 8001816:	f001 fb59 	bl	8002ecc <HAL_I2C_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001820:	f000 f9eb 	bl	8001bfa <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000394 	.word	0x20000394
 800182c:	40005800 	.word	0x40005800
 8001830:	000186a0 	.word	0x000186a0

08001834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 800183a:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <MX_USART1_UART_Init+0x50>)
 800183c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 8001840:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001846:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 800185a:	220c      	movs	r2, #12
 800185c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 800186c:	f003 fc48 	bl	8005100 <HAL_UART_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001876:	f000 f9c0 	bl	8001bfa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200003e8 	.word	0x200003e8
 8001884:	40013800 	.word	0x40013800

08001888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800189c:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <MX_GPIO_Init+0x90>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001918 <MX_GPIO_Init+0x90>)
 80018a2:	f043 0320 	orr.w	r3, r3, #32
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <MX_GPIO_Init+0x90>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0320 	and.w	r3, r3, #32
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <MX_GPIO_Init+0x90>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a17      	ldr	r2, [pc, #92]	@ (8001918 <MX_GPIO_Init+0x90>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <MX_GPIO_Init+0x90>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <MX_GPIO_Init+0x90>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a11      	ldr	r2, [pc, #68]	@ (8001918 <MX_GPIO_Init+0x90>)
 80018d2:	f043 0308 	orr.w	r3, r3, #8
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <MX_GPIO_Init+0x90>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L1_LED_Pin|L2_LED_Pin|L3_LED_Pin, GPIO_PIN_SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80018ea:	480c      	ldr	r0, [pc, #48]	@ (800191c <MX_GPIO_Init+0x94>)
 80018ec:	f001 fad6 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L1_LED_Pin L2_LED_Pin L3_LED_Pin */
  GPIO_InitStruct.Pin = L1_LED_Pin|L2_LED_Pin|L3_LED_Pin;
 80018f0:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80018f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2302      	movs	r3, #2
 8001900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	4619      	mov	r1, r3
 8001908:	4804      	ldr	r0, [pc, #16]	@ (800191c <MX_GPIO_Init+0x94>)
 800190a:	f001 f943 	bl	8002b94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800190e:	bf00      	nop
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	40010c00 	.word	0x40010c00

08001920 <StartTVOC_mea>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTVOC_mea */
void StartTVOC_mea(void const * argument)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if (osMutexWait(MutexMeasureHandle, osWaitForever) == osOK){
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <StartTVOC_mea+0x3c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	4618      	mov	r0, r3
 8001932:	f004 faf7 	bl	8005f24 <osMutexWait>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10a      	bne.n	8001952 <StartTVOC_mea+0x32>
		TVOC_measure();
 800193c:	f7ff fc92 	bl	8001264 <TVOC_measure>
		TVOC.value = Tvoc_ppb;
 8001940:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <StartTVOC_mea+0x40>)
 8001942:	881a      	ldrh	r2, [r3, #0]
 8001944:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <StartTVOC_mea+0x44>)
 8001946:	81da      	strh	r2, [r3, #14]

		osMutexRelease(MutexMeasureHandle);
 8001948:	4b04      	ldr	r3, [pc, #16]	@ (800195c <StartTVOC_mea+0x3c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f004 fb37 	bl	8005fc0 <osMutexRelease>
	}
    osDelay(3995);
 8001952:	f640 709b 	movw	r0, #3995	@ 0xf9b
 8001956:	f004 fab8 	bl	8005eca <osDelay>
	if (osMutexWait(MutexMeasureHandle, osWaitForever) == osOK){
 800195a:	e7e5      	b.n	8001928 <StartTVOC_mea+0x8>
 800195c:	20000454 	.word	0x20000454
 8001960:	20000462 	.word	0x20000462
 8001964:	20000020 	.word	0x20000020

08001968 <StartCO2_mea>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCO2_mea */
void StartCO2_mea(void const * argument)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCO2_mea */
  /* Infinite loop */
  for(;;)
  {
	if (osMutexWait(MutexMeasureHandle, osWaitForever) == osOK){
 8001970:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <StartCO2_mea+0x3c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	4618      	mov	r0, r3
 800197a:	f004 fad3 	bl	8005f24 <osMutexWait>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10a      	bne.n	800199a <StartCO2_mea+0x32>
	  CO2_measure();
 8001984:	f7ff fc7e 	bl	8001284 <CO2_measure>
	  CO2.value = CO2_ppm;
 8001988:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <StartCO2_mea+0x40>)
 800198a:	881a      	ldrh	r2, [r3, #0]
 800198c:	4b07      	ldr	r3, [pc, #28]	@ (80019ac <StartCO2_mea+0x44>)
 800198e:	81da      	strh	r2, [r3, #14]
	  osMutexRelease(MutexMeasureHandle);
 8001990:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <StartCO2_mea+0x3c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f004 fb13 	bl	8005fc0 <osMutexRelease>
	}
	osDelay(2995);
 800199a:	f640 30b3 	movw	r0, #2995	@ 0xbb3
 800199e:	f004 fa94 	bl	8005eca <osDelay>
	if (osMutexWait(MutexMeasureHandle, osWaitForever) == osOK){
 80019a2:	e7e5      	b.n	8001970 <StartCO2_mea+0x8>
 80019a4:	20000454 	.word	0x20000454
 80019a8:	2000046a 	.word	0x2000046a
 80019ac:	20000010 	.word	0x20000010

080019b0 <StartCO_mea>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCO_mea */
void StartCO_mea(void const * argument)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCO_mea */
  /* Infinite loop */
  for(;;)
  {
	if (osMutexWait(MutexMeasureHandle, osWaitForever) == osOK){
 80019b8:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <StartCO_mea+0x3c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	4618      	mov	r0, r3
 80019c2:	f004 faaf 	bl	8005f24 <osMutexWait>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10a      	bne.n	80019e2 <StartCO_mea+0x32>
		CO_measure();
 80019cc:	f7ff fc08 	bl	80011e0 <CO_measure>
		CO.value = CO_ppm;
 80019d0:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <StartCO_mea+0x40>)
 80019d2:	881a      	ldrh	r2, [r3, #0]
 80019d4:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <StartCO_mea+0x44>)
 80019d6:	81da      	strh	r2, [r3, #14]
		osMutexRelease(MutexMeasureHandle);
 80019d8:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <StartCO_mea+0x3c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f004 faef 	bl	8005fc0 <osMutexRelease>
	}
    osDelay(1995);
 80019e2:	f240 70cb 	movw	r0, #1995	@ 0x7cb
 80019e6:	f004 fa70 	bl	8005eca <osDelay>
	if (osMutexWait(MutexMeasureHandle, osWaitForever) == osOK){
 80019ea:	e7e5      	b.n	80019b8 <StartCO_mea+0x8>
 80019ec:	20000454 	.word	0x20000454
 80019f0:	20000470 	.word	0x20000470
 80019f4:	20000000 	.word	0x20000000

080019f8 <StartTask_ISR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_ISR */
void StartTask_ISR(void const * argument)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_ISR */
  /* Infinite loop */
	for(;;)
	  {
		 osSemaphoreWait(BinarySem_ISRHandle,osWaitForever);
 8001a00:	4b2a      	ldr	r3, [pc, #168]	@ (8001aac <StartTask_ISR+0xb4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f004 fb41 	bl	8006090 <osSemaphoreWait>
		 if((char)Uart_RX_Buf[0] == '3')
 8001a0e:	4b28      	ldr	r3, [pc, #160]	@ (8001ab0 <StartTask_ISR+0xb8>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b33      	cmp	r3, #51	@ 0x33
 8001a14:	d114      	bne.n	8001a40 <StartTask_ISR+0x48>
		 {
			TVOC_measure();
 8001a16:	f7ff fc25 	bl	8001264 <TVOC_measure>
			sprintf((char*)Uart_TX_Buf, "TVOC:%d ppb\r\n",(int)Tvoc_ppb);
 8001a1a:	4b26      	ldr	r3, [pc, #152]	@ (8001ab4 <StartTask_ISR+0xbc>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4925      	ldr	r1, [pc, #148]	@ (8001ab8 <StartTask_ISR+0xc0>)
 8001a22:	4826      	ldr	r0, [pc, #152]	@ (8001abc <StartTask_ISR+0xc4>)
 8001a24:	f006 fe54 	bl	80086d0 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*) Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
 8001a28:	4824      	ldr	r0, [pc, #144]	@ (8001abc <StartTask_ISR+0xc4>)
 8001a2a:	f7fe fb91 	bl	8000150 <strlen>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	4921      	ldr	r1, [pc, #132]	@ (8001abc <StartTask_ISR+0xc4>)
 8001a38:	4821      	ldr	r0, [pc, #132]	@ (8001ac0 <StartTask_ISR+0xc8>)
 8001a3a:	f003 fbb1 	bl	80051a0 <HAL_UART_Transmit>
 8001a3e:	e030      	b.n	8001aa2 <StartTask_ISR+0xaa>
		 }
		 else if((char)Uart_RX_Buf[0]  == '2')
 8001a40:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab0 <StartTask_ISR+0xb8>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b32      	cmp	r3, #50	@ 0x32
 8001a46:	d114      	bne.n	8001a72 <StartTask_ISR+0x7a>
		 {
			CO2_measure();
 8001a48:	f7ff fc1c 	bl	8001284 <CO2_measure>
			sprintf((char*)Uart_TX_Buf, "CO2:%d ppm\r\n",(int)CO2_ppm);
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac4 <StartTask_ISR+0xcc>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	491d      	ldr	r1, [pc, #116]	@ (8001ac8 <StartTask_ISR+0xd0>)
 8001a54:	4819      	ldr	r0, [pc, #100]	@ (8001abc <StartTask_ISR+0xc4>)
 8001a56:	f006 fe3b 	bl	80086d0 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*) Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
 8001a5a:	4818      	ldr	r0, [pc, #96]	@ (8001abc <StartTask_ISR+0xc4>)
 8001a5c:	f7fe fb78 	bl	8000150 <strlen>
 8001a60:	4603      	mov	r3, r0
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
 8001a68:	4914      	ldr	r1, [pc, #80]	@ (8001abc <StartTask_ISR+0xc4>)
 8001a6a:	4815      	ldr	r0, [pc, #84]	@ (8001ac0 <StartTask_ISR+0xc8>)
 8001a6c:	f003 fb98 	bl	80051a0 <HAL_UART_Transmit>
 8001a70:	e017      	b.n	8001aa2 <StartTask_ISR+0xaa>
		 }
		 else if((char)Uart_RX_Buf[0]  == '1')
 8001a72:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <StartTask_ISR+0xb8>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b31      	cmp	r3, #49	@ 0x31
 8001a78:	d113      	bne.n	8001aa2 <StartTask_ISR+0xaa>
		 {
			CO_measure();
 8001a7a:	f7ff fbb1 	bl	80011e0 <CO_measure>
			sprintf((char*)Uart_TX_Buf, "CO:%d ppm\r\n",(int)CO_ppm);
 8001a7e:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <StartTask_ISR+0xd4>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4912      	ldr	r1, [pc, #72]	@ (8001ad0 <StartTask_ISR+0xd8>)
 8001a86:	480d      	ldr	r0, [pc, #52]	@ (8001abc <StartTask_ISR+0xc4>)
 8001a88:	f006 fe22 	bl	80086d0 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*) Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
 8001a8c:	480b      	ldr	r0, [pc, #44]	@ (8001abc <StartTask_ISR+0xc4>)
 8001a8e:	f7fe fb5f 	bl	8000150 <strlen>
 8001a92:	4603      	mov	r3, r0
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	4908      	ldr	r1, [pc, #32]	@ (8001abc <StartTask_ISR+0xc4>)
 8001a9c:	4808      	ldr	r0, [pc, #32]	@ (8001ac0 <StartTask_ISR+0xc8>)
 8001a9e:	f003 fb7f 	bl	80051a0 <HAL_UART_Transmit>
		 }
		 osDelay(1000);
 8001aa2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aa6:	f004 fa10 	bl	8005eca <osDelay>
		 osSemaphoreWait(BinarySem_ISRHandle,osWaitForever);
 8001aaa:	e7a9      	b.n	8001a00 <StartTask_ISR+0x8>
 8001aac:	2000045c 	.word	0x2000045c
 8001ab0:	200004ac 	.word	0x200004ac
 8001ab4:	20000462 	.word	0x20000462
 8001ab8:	08009efc 	.word	0x08009efc
 8001abc:	20000484 	.word	0x20000484
 8001ac0:	200003e8 	.word	0x200003e8
 8001ac4:	2000046a 	.word	0x2000046a
 8001ac8:	08009f18 	.word	0x08009f18
 8001acc:	20000470 	.word	0x20000470
 8001ad0:	08009f0c 	.word	0x08009f0c

08001ad4 <StartUart_Send>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUart_Send */
void StartUart_Send(void const * argument)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUart_Send */
  /* Infinite loop */
  for(;;)
  {
	Uart_Send();
 8001adc:	f7ff fc14 	bl	8001308 <Uart_Send>
    osDelay(3000);
 8001ae0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001ae4:	f004 f9f1 	bl	8005eca <osDelay>
	Uart_Send();
 8001ae8:	bf00      	nop
 8001aea:	e7f7      	b.n	8001adc <StartUart_Send+0x8>

08001aec <StartLCD_TVOC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD_TVOC */
void StartLCD_TVOC(void const * argument)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD_TVOC */
  /* Infinite loop */
  for(;;)
  {

	if (osMutexWait(MutexLCDHandle, osWaitForever) == osOK){
 8001af4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <StartLCD_TVOC+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	4618      	mov	r0, r3
 8001afe:	f004 fa11 	bl	8005f24 <osMutexWait>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10c      	bne.n	8001b22 <StartLCD_TVOC+0x36>
		LCD_Display(TVOC);
 8001b08:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <StartLCD_TVOC+0x44>)
 8001b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b0c:	f7ff fbca 	bl	80012a4 <LCD_Display>
		HAL_Delay(900);
 8001b10:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001b14:	f000 fb62 	bl	80021dc <HAL_Delay>

		osMutexRelease(MutexLCDHandle);
 8001b18:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <StartLCD_TVOC+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f004 fa4f 	bl	8005fc0 <osMutexRelease>
	}
	osDelay(2000);
 8001b22:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b26:	f004 f9d0 	bl	8005eca <osDelay>
	if (osMutexWait(MutexLCDHandle, osWaitForever) == osOK){
 8001b2a:	e7e3      	b.n	8001af4 <StartLCD_TVOC+0x8>
 8001b2c:	20000458 	.word	0x20000458
 8001b30:	20000020 	.word	0x20000020

08001b34 <StartLCD_CO>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD_CO */
void StartLCD_CO(void const * argument)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD_CO */
  /* Infinite loop */
  for(;;)
  {
	  if (osMutexWait(MutexLCDHandle, osWaitForever) == osOK){
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b74 <StartLCD_CO+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	4618      	mov	r0, r3
 8001b46:	f004 f9ed 	bl	8005f24 <osMutexWait>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10c      	bne.n	8001b6a <StartLCD_CO+0x36>
		LCD_Display(CO);
 8001b50:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <StartLCD_CO+0x44>)
 8001b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b54:	f7ff fba6 	bl	80012a4 <LCD_Display>
	  	HAL_Delay(900);
 8001b58:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001b5c:	f000 fb3e 	bl	80021dc <HAL_Delay>
	  	osMutexRelease(MutexLCDHandle);
 8001b60:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <StartLCD_CO+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f004 fa2b 	bl	8005fc0 <osMutexRelease>
	  }
	  osDelay(2000);
 8001b6a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b6e:	f004 f9ac 	bl	8005eca <osDelay>
	  if (osMutexWait(MutexLCDHandle, osWaitForever) == osOK){
 8001b72:	e7e3      	b.n	8001b3c <StartLCD_CO+0x8>
 8001b74:	20000458 	.word	0x20000458
 8001b78:	20000000 	.word	0x20000000

08001b7c <StartLCD_CO2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD_CO2 */
void StartLCD_CO2(void const * argument)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD_CO2 */
  /* Infinite loop */
  for(;;)
  {
	if (osMutexWait(MutexLCDHandle, osWaitForever) == osOK){
 8001b84:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <StartLCD_CO2+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f004 f9c9 	bl	8005f24 <osMutexWait>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10c      	bne.n	8001bb2 <StartLCD_CO2+0x36>
	  	LCD_Display(CO2);
 8001b98:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <StartLCD_CO2+0x44>)
 8001b9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b9c:	f7ff fb82 	bl	80012a4 <LCD_Display>
	  	HAL_Delay(900);
 8001ba0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001ba4:	f000 fb1a 	bl	80021dc <HAL_Delay>
	  	osMutexRelease(MutexLCDHandle);
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <StartLCD_CO2+0x40>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f004 fa07 	bl	8005fc0 <osMutexRelease>
	}
	osDelay(2000);
 8001bb2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001bb6:	f004 f988 	bl	8005eca <osDelay>
	if (osMutexWait(MutexLCDHandle, osWaitForever) == osOK){
 8001bba:	e7e3      	b.n	8001b84 <StartLCD_CO2+0x8>
 8001bbc:	20000458 	.word	0x20000458
 8001bc0:	20000010 	.word	0x20000010

08001bc4 <StartWarning>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWarning */
void StartWarning(void const * argument)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWarning */
  /* Infinite loop */
  for(;;)
  {
	  Warning();
 8001bcc:	f000 fa7e 	bl	80020cc <Warning>
	  osDelay(1000);
 8001bd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bd4:	f004 f979 	bl	8005eca <osDelay>
	  Warning();
 8001bd8:	bf00      	nop
 8001bda:	e7f7      	b.n	8001bcc <StartWarning+0x8>

08001bdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bec:	d101      	bne.n	8001bf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bee:	f000 fad9 	bl	80021a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bfe:	b672      	cpsid	i
}
 8001c00:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c02:	bf00      	nop
 8001c04:	e7fd      	b.n	8001c02 <Error_Handler+0x8>
	...

08001c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c0e:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_MspInit+0x68>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	4a17      	ldr	r2, [pc, #92]	@ (8001c70 <HAL_MspInit+0x68>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6193      	str	r3, [r2, #24]
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_MspInit+0x68>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_MspInit+0x68>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a11      	ldr	r2, [pc, #68]	@ (8001c70 <HAL_MspInit+0x68>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]
 8001c32:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <HAL_MspInit+0x68>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	210f      	movs	r1, #15
 8001c42:	f06f 0001 	mvn.w	r0, #1
 8001c46:	f000 fec8 	bl	80029da <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_MspInit+0x6c>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <HAL_MspInit+0x6c>)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010000 	.word	0x40010000

08001c78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a14      	ldr	r2, [pc, #80]	@ (8001ce4 <HAL_ADC_MspInit+0x6c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d121      	bne.n	8001cdc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c98:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <HAL_ADC_MspInit+0x70>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a12      	ldr	r2, [pc, #72]	@ (8001ce8 <HAL_ADC_MspInit+0x70>)
 8001c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <HAL_ADC_MspInit+0x70>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce8 <HAL_ADC_MspInit+0x70>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce8 <HAL_ADC_MspInit+0x70>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <HAL_ADC_MspInit+0x70>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4805      	ldr	r0, [pc, #20]	@ (8001cec <HAL_ADC_MspInit+0x74>)
 8001cd8:	f000 ff5c 	bl	8002b94 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001cdc:	bf00      	nop
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40012400 	.word	0x40012400
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40010800 	.word	0x40010800

08001cf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	@ 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0318 	add.w	r3, r7, #24
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2b      	ldr	r2, [pc, #172]	@ (8001db8 <HAL_I2C_MspInit+0xc8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d124      	bne.n	8001d5a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d10:	4b2a      	ldr	r3, [pc, #168]	@ (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4a29      	ldr	r2, [pc, #164]	@ (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d16:	f043 0308 	orr.w	r3, r3, #8
 8001d1a:	6193      	str	r3, [r2, #24]
 8001d1c:	4b27      	ldr	r3, [pc, #156]	@ (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d28:	23c0      	movs	r3, #192	@ 0xc0
 8001d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2c:	2312      	movs	r3, #18
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d30:	2303      	movs	r3, #3
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	f107 0318 	add.w	r3, r7, #24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4821      	ldr	r0, [pc, #132]	@ (8001dc0 <HAL_I2C_MspInit+0xd0>)
 8001d3c:	f000 ff2a 	bl	8002b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d40:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	4a1d      	ldr	r2, [pc, #116]	@ (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d4a:	61d3      	str	r3, [r2, #28]
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d58:	e029      	b.n	8001dae <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a19      	ldr	r2, [pc, #100]	@ (8001dc4 <HAL_I2C_MspInit+0xd4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d124      	bne.n	8001dae <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d64:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	4a14      	ldr	r2, [pc, #80]	@ (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d6a:	f043 0308 	orr.w	r3, r3, #8
 8001d6e:	6193      	str	r3, [r2, #24]
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d7c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d82:	2312      	movs	r3, #18
 8001d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8a:	f107 0318 	add.w	r3, r7, #24
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480b      	ldr	r0, [pc, #44]	@ (8001dc0 <HAL_I2C_MspInit+0xd0>)
 8001d92:	f000 feff 	bl	8002b94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d96:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a08      	ldr	r2, [pc, #32]	@ (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001da0:	61d3      	str	r3, [r2, #28]
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	@ 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40005400 	.word	0x40005400
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010c00 	.word	0x40010c00
 8001dc4:	40005800 	.word	0x40005800

08001dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a20      	ldr	r2, [pc, #128]	@ (8001e64 <HAL_UART_MspInit+0x9c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d139      	bne.n	8001e5c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <HAL_UART_MspInit+0xa0>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4a1e      	ldr	r2, [pc, #120]	@ (8001e68 <HAL_UART_MspInit+0xa0>)
 8001dee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001df2:	6193      	str	r3, [r2, #24]
 8001df4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <HAL_UART_MspInit+0xa0>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <HAL_UART_MspInit+0xa0>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a18      	ldr	r2, [pc, #96]	@ (8001e68 <HAL_UART_MspInit+0xa0>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <HAL_UART_MspInit+0xa0>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f107 0310 	add.w	r3, r7, #16
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480f      	ldr	r0, [pc, #60]	@ (8001e6c <HAL_UART_MspInit+0xa4>)
 8001e2e:	f000 feb1 	bl	8002b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	4619      	mov	r1, r3
 8001e46:	4809      	ldr	r0, [pc, #36]	@ (8001e6c <HAL_UART_MspInit+0xa4>)
 8001e48:	f000 fea4 	bl	8002b94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2105      	movs	r1, #5
 8001e50:	2025      	movs	r0, #37	@ 0x25
 8001e52:	f000 fdc2 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e56:	2025      	movs	r0, #37	@ 0x25
 8001e58:	f000 fddb 	bl	8002a12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e5c:	bf00      	nop
 8001e5e:	3720      	adds	r7, #32
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40013800 	.word	0x40013800
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40010800 	.word	0x40010800

08001e70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08e      	sub	sp, #56	@ 0x38
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001e86:	4b34      	ldr	r3, [pc, #208]	@ (8001f58 <HAL_InitTick+0xe8>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a33      	ldr	r2, [pc, #204]	@ (8001f58 <HAL_InitTick+0xe8>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	61d3      	str	r3, [r2, #28]
 8001e92:	4b31      	ldr	r3, [pc, #196]	@ (8001f58 <HAL_InitTick+0xe8>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e9e:	f107 0210 	add.w	r2, r7, #16
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 fde7 	bl	8004a7c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d103      	bne.n	8001ec0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001eb8:	f002 fdb8 	bl	8004a2c <HAL_RCC_GetPCLK1Freq>
 8001ebc:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ebe:	e004      	b.n	8001eca <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ec0:	f002 fdb4 	bl	8004a2c <HAL_RCC_GetPCLK1Freq>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ecc:	4a23      	ldr	r2, [pc, #140]	@ (8001f5c <HAL_InitTick+0xec>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0c9b      	lsrs	r3, r3, #18
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001ed8:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <HAL_InitTick+0xf0>)
 8001eda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ede:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <HAL_InitTick+0xf0>)
 8001ee2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ee6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f60 <HAL_InitTick+0xf0>)
 8001eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eec:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001eee:	4b1c      	ldr	r3, [pc, #112]	@ (8001f60 <HAL_InitTick+0xf0>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <HAL_InitTick+0xf0>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efa:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <HAL_InitTick+0xf0>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001f00:	4817      	ldr	r0, [pc, #92]	@ (8001f60 <HAL_InitTick+0xf0>)
 8001f02:	f002 febf 	bl	8004c84 <HAL_TIM_Base_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d11b      	bne.n	8001f4c <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001f14:	4812      	ldr	r0, [pc, #72]	@ (8001f60 <HAL_InitTick+0xf0>)
 8001f16:	f002 ff0d 	bl	8004d34 <HAL_TIM_Base_Start_IT>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d111      	bne.n	8001f4c <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f28:	201c      	movs	r0, #28
 8001f2a:	f000 fd72 	bl	8002a12 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b0f      	cmp	r3, #15
 8001f32:	d808      	bhi.n	8001f46 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001f34:	2200      	movs	r2, #0
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	201c      	movs	r0, #28
 8001f3a:	f000 fd4e 	bl	80029da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f3e:	4a09      	ldr	r2, [pc, #36]	@ (8001f64 <HAL_InitTick+0xf4>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e002      	b.n	8001f4c <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3738      	adds	r7, #56	@ 0x38
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	431bde83 	.word	0x431bde83
 8001f60:	200004b0 	.word	0x200004b0
 8001f64:	20000034 	.word	0x20000034

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <NMI_Handler+0x4>

08001f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <MemManage_Handler+0x4>

08001f80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <BusFault_Handler+0x4>

08001f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <UsageFault_Handler+0x4>

08001f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <TIM2_IRQHandler+0x10>)
 8001fa2:	f002 ff19 	bl	8004dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200004b0 	.word	0x200004b0

08001fb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fb4:	4802      	ldr	r0, [pc, #8]	@ (8001fc0 <USART1_IRQHandler+0x10>)
 8001fb6:	f003 f9a3 	bl	8005300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200003e8 	.word	0x200003e8

08001fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fcc:	4a14      	ldr	r2, [pc, #80]	@ (8002020 <_sbrk+0x5c>)
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <_sbrk+0x60>)
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd8:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <_sbrk+0x64>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	@ (800202c <_sbrk+0x68>)
 8001fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d207      	bcs.n	8002004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff4:	f006 fb94 	bl	8008720 <__errno>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	e009      	b.n	8002018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <_sbrk+0x64>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200a:	4b07      	ldr	r3, [pc, #28]	@ (8002028 <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	4a05      	ldr	r2, [pc, #20]	@ (8002028 <_sbrk+0x64>)
 8002014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002016:	68fb      	ldr	r3, [r7, #12]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20005000 	.word	0x20005000
 8002024:	00000400 	.word	0x00000400
 8002028:	200004f8 	.word	0x200004f8
 800202c:	20001ea8 	.word	0x20001ea8

08002030 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <L1_Warning_On>:
 */

#include "warning.h"

void L1_Warning_On()
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_RESET);
 8002040:	2200      	movs	r2, #0
 8002042:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002046:	4808      	ldr	r0, [pc, #32]	@ (8002068 <L1_Warning_On+0x2c>)
 8002048:	f000 ff28 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 800204c:	2201      	movs	r2, #1
 800204e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002052:	4805      	ldr	r0, [pc, #20]	@ (8002068 <L1_Warning_On+0x2c>)
 8002054:	f000 ff22 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 8002058:	2201      	movs	r2, #1
 800205a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800205e:	4802      	ldr	r0, [pc, #8]	@ (8002068 <L1_Warning_On+0x2c>)
 8002060:	f000 ff1c 	bl	8002e9c <HAL_GPIO_WritePin>
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40010c00 	.word	0x40010c00

0800206c <L2_Warning_On>:

void L2_Warning_On ()
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 8002070:	2201      	movs	r2, #1
 8002072:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002076:	4808      	ldr	r0, [pc, #32]	@ (8002098 <L2_Warning_On+0x2c>)
 8002078:	f000 ff10 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_RESET);
 800207c:	2200      	movs	r2, #0
 800207e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002082:	4805      	ldr	r0, [pc, #20]	@ (8002098 <L2_Warning_On+0x2c>)
 8002084:	f000 ff0a 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 8002088:	2201      	movs	r2, #1
 800208a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800208e:	4802      	ldr	r0, [pc, #8]	@ (8002098 <L2_Warning_On+0x2c>)
 8002090:	f000 ff04 	bl	8002e9c <HAL_GPIO_WritePin>
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40010c00 	.word	0x40010c00

0800209c <L3_Warning_On>:

void L3_Warning_On ()
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 80020a0:	2201      	movs	r2, #1
 80020a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020a6:	4808      	ldr	r0, [pc, #32]	@ (80020c8 <L3_Warning_On+0x2c>)
 80020a8:	f000 fef8 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 80020ac:	2201      	movs	r2, #1
 80020ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020b2:	4805      	ldr	r0, [pc, #20]	@ (80020c8 <L3_Warning_On+0x2c>)
 80020b4:	f000 fef2 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020be:	4802      	ldr	r0, [pc, #8]	@ (80020c8 <L3_Warning_On+0x2c>)
 80020c0:	f000 feec 	bl	8002e9c <HAL_GPIO_WritePin>
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40010c00 	.word	0x40010c00

080020cc <Warning>:



void Warning ()
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	  // khi không ấn nút( cảnh báo tự đông)
	  if(CO2_ppm<=1000 && CO_ppm <= 25 && Tvoc_ppb <=300)
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <Warning+0x54>)
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020d8:	d80b      	bhi.n	80020f2 <Warning+0x26>
 80020da:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <Warning+0x58>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	2b19      	cmp	r3, #25
 80020e0:	d807      	bhi.n	80020f2 <Warning+0x26>
 80020e2:	4b11      	ldr	r3, [pc, #68]	@ (8002128 <Warning+0x5c>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80020ea:	d802      	bhi.n	80020f2 <Warning+0x26>
	  {
		  L1_Warning_On();
 80020ec:	f7ff ffa6 	bl	800203c <L1_Warning_On>
 80020f0:	e013      	b.n	800211a <Warning+0x4e>
	  }
	  else if((CO2_ppm>=2000) || (CO_ppm>=50) || (Tvoc_ppb>=1000))
 80020f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <Warning+0x54>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80020fa:	d208      	bcs.n	800210e <Warning+0x42>
 80020fc:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <Warning+0x58>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	2b31      	cmp	r3, #49	@ 0x31
 8002102:	d804      	bhi.n	800210e <Warning+0x42>
 8002104:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <Warning+0x5c>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800210c:	d302      	bcc.n	8002114 <Warning+0x48>
	  {
		  L3_Warning_On();
 800210e:	f7ff ffc5 	bl	800209c <L3_Warning_On>
 8002112:	e002      	b.n	800211a <Warning+0x4e>
	  }
	  else
	  {
		  L2_Warning_On();
 8002114:	f7ff ffaa 	bl	800206c <L2_Warning_On>
	  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000046a 	.word	0x2000046a
 8002124:	20000470 	.word	0x20000470
 8002128:	20000462 	.word	0x20000462

0800212c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800212c:	f7ff ff80 	bl	8002030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002130:	480b      	ldr	r0, [pc, #44]	@ (8002160 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002132:	490c      	ldr	r1, [pc, #48]	@ (8002164 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002134:	4a0c      	ldr	r2, [pc, #48]	@ (8002168 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002138:	e002      	b.n	8002140 <LoopCopyDataInit>

0800213a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800213c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213e:	3304      	adds	r3, #4

08002140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002144:	d3f9      	bcc.n	800213a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002146:	4a09      	ldr	r2, [pc, #36]	@ (800216c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002148:	4c09      	ldr	r4, [pc, #36]	@ (8002170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800214c:	e001      	b.n	8002152 <LoopFillZerobss>

0800214e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002150:	3204      	adds	r2, #4

08002152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002154:	d3fb      	bcc.n	800214e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002156:	f006 fae9 	bl	800872c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800215a:	f7ff f951 	bl	8001400 <main>
  bx lr
 800215e:	4770      	bx	lr
  ldr r0, =_sdata
 8002160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002164:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002168:	0800a130 	.word	0x0800a130
  ldr r2, =_sbss
 800216c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002170:	20001ea8 	.word	0x20001ea8

08002174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002174:	e7fe      	b.n	8002174 <ADC1_2_IRQHandler>
	...

08002178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <HAL_Init+0x28>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a07      	ldr	r2, [pc, #28]	@ (80021a0 <HAL_Init+0x28>)
 8002182:	f043 0310 	orr.w	r3, r3, #16
 8002186:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002188:	2003      	movs	r0, #3
 800218a:	f000 fc1b 	bl	80029c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218e:	200f      	movs	r0, #15
 8002190:	f7ff fe6e 	bl	8001e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002194:	f7ff fd38 	bl	8001c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40022000 	.word	0x40022000

080021a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a8:	4b05      	ldr	r3, [pc, #20]	@ (80021c0 <HAL_IncTick+0x1c>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <HAL_IncTick+0x20>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	4a03      	ldr	r2, [pc, #12]	@ (80021c4 <HAL_IncTick+0x20>)
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	20000038 	.word	0x20000038
 80021c4:	200004fc 	.word	0x200004fc

080021c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return uwTick;
 80021cc:	4b02      	ldr	r3, [pc, #8]	@ (80021d8 <HAL_GetTick+0x10>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	200004fc 	.word	0x200004fc

080021dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e4:	f7ff fff0 	bl	80021c8 <HAL_GetTick>
 80021e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f4:	d005      	beq.n	8002202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <HAL_Delay+0x44>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4413      	add	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002202:	bf00      	nop
 8002204:	f7ff ffe0 	bl	80021c8 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	429a      	cmp	r2, r3
 8002212:	d8f7      	bhi.n	8002204 <HAL_Delay+0x28>
  {
  }
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000038 	.word	0x20000038

08002224 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0be      	b.n	80023c4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff fd08 	bl	8001c78 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fabf 	bl	80027ec <ADC_ConversionStop_Disable>
 800226e:	4603      	mov	r3, r0
 8002270:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 8099 	bne.w	80023b2 <HAL_ADC_Init+0x18e>
 8002280:	7dfb      	ldrb	r3, [r7, #23]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 8095 	bne.w	80023b2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002290:	f023 0302 	bic.w	r3, r3, #2
 8002294:	f043 0202 	orr.w	r2, r3, #2
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022a4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7b1b      	ldrb	r3, [r3, #12]
 80022aa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022ac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022bc:	d003      	beq.n	80022c6 <HAL_ADC_Init+0xa2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d102      	bne.n	80022cc <HAL_ADC_Init+0xa8>
 80022c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ca:	e000      	b.n	80022ce <HAL_ADC_Init+0xaa>
 80022cc:	2300      	movs	r3, #0
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	7d1b      	ldrb	r3, [r3, #20]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d119      	bne.n	8002310 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7b1b      	ldrb	r3, [r3, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	035a      	lsls	r2, r3, #13
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	e00b      	b.n	8002310 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	f043 0220 	orr.w	r2, r3, #32
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	430a      	orrs	r2, r1
 8002322:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	4b28      	ldr	r3, [pc, #160]	@ (80023cc <HAL_ADC_Init+0x1a8>)
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	68b9      	ldr	r1, [r7, #8]
 8002334:	430b      	orrs	r3, r1
 8002336:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002340:	d003      	beq.n	800234a <HAL_ADC_Init+0x126>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d104      	bne.n	8002354 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	3b01      	subs	r3, #1
 8002350:	051b      	lsls	r3, r3, #20
 8002352:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	430a      	orrs	r2, r1
 8002366:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	4b18      	ldr	r3, [pc, #96]	@ (80023d0 <HAL_ADC_Init+0x1ac>)
 8002370:	4013      	ands	r3, r2
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	429a      	cmp	r2, r3
 8002376:	d10b      	bne.n	8002390 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	f043 0201 	orr.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800238e:	e018      	b.n	80023c2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002394:	f023 0312 	bic.w	r3, r3, #18
 8002398:	f043 0210 	orr.w	r2, r3, #16
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023b0:	e007      	b.n	80023c2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b6:	f043 0210 	orr.w	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	ffe1f7fd 	.word	0xffe1f7fd
 80023d0:	ff1f0efe 	.word	0xff1f0efe

080023d4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_Start+0x1a>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e098      	b.n	8002520 <HAL_ADC_Start+0x14c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f99e 	bl	8002738 <ADC_Enable>
 80023fc:	4603      	mov	r3, r0
 80023fe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f040 8087 	bne.w	8002516 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a41      	ldr	r2, [pc, #260]	@ (8002528 <HAL_ADC_Start+0x154>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d105      	bne.n	8002432 <HAL_ADC_Start+0x5e>
 8002426:	4b41      	ldr	r3, [pc, #260]	@ (800252c <HAL_ADC_Start+0x158>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d115      	bne.n	800245e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002436:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002448:	2b00      	cmp	r3, #0
 800244a:	d026      	beq.n	800249a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002454:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800245c:	e01d      	b.n	800249a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002462:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a2f      	ldr	r2, [pc, #188]	@ (800252c <HAL_ADC_Start+0x158>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d004      	beq.n	800247e <HAL_ADC_Start+0xaa>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2b      	ldr	r2, [pc, #172]	@ (8002528 <HAL_ADC_Start+0x154>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d10d      	bne.n	800249a <HAL_ADC_Start+0xc6>
 800247e:	4b2b      	ldr	r3, [pc, #172]	@ (800252c <HAL_ADC_Start+0x158>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002492:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d006      	beq.n	80024b4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024aa:	f023 0206 	bic.w	r2, r3, #6
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80024b2:	e002      	b.n	80024ba <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f06f 0202 	mvn.w	r2, #2
 80024ca:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80024d6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80024da:	d113      	bne.n	8002504 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024e0:	4a11      	ldr	r2, [pc, #68]	@ (8002528 <HAL_ADC_Start+0x154>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d105      	bne.n	80024f2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80024e6:	4b11      	ldr	r3, [pc, #68]	@ (800252c <HAL_ADC_Start+0x158>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d108      	bne.n	8002504 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	e00c      	b.n	800251e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	e003      	b.n	800251e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40012800 	.word	0x40012800
 800252c:	40012400 	.word	0x40012400

08002530 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x20>
 8002564:	2302      	movs	r3, #2
 8002566:	e0dc      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1da>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b06      	cmp	r3, #6
 8002576:	d81c      	bhi.n	80025b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	3b05      	subs	r3, #5
 800258a:	221f      	movs	r2, #31
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	4019      	ands	r1, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	3b05      	subs	r3, #5
 80025a4:	fa00 f203 	lsl.w	r2, r0, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80025b0:	e03c      	b.n	800262c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d81c      	bhi.n	80025f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	3b23      	subs	r3, #35	@ 0x23
 80025cc:	221f      	movs	r2, #31
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	4019      	ands	r1, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	3b23      	subs	r3, #35	@ 0x23
 80025e6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80025f2:	e01b      	b.n	800262c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	3b41      	subs	r3, #65	@ 0x41
 8002606:	221f      	movs	r2, #31
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	4019      	ands	r1, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	3b41      	subs	r3, #65	@ 0x41
 8002620:	fa00 f203 	lsl.w	r2, r0, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b09      	cmp	r3, #9
 8002632:	d91c      	bls.n	800266e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68d9      	ldr	r1, [r3, #12]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	3b1e      	subs	r3, #30
 8002646:	2207      	movs	r2, #7
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	4019      	ands	r1, r3
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6898      	ldr	r0, [r3, #8]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	3b1e      	subs	r3, #30
 8002660:	fa00 f203 	lsl.w	r2, r0, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	60da      	str	r2, [r3, #12]
 800266c:	e019      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6919      	ldr	r1, [r3, #16]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	2207      	movs	r2, #7
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	4019      	ands	r1, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6898      	ldr	r0, [r3, #8]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	fa00 f203 	lsl.w	r2, r0, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b10      	cmp	r3, #16
 80026a8:	d003      	beq.n	80026b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026ae:	2b11      	cmp	r3, #17
 80026b0:	d132      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1d      	ldr	r2, [pc, #116]	@ (800272c <HAL_ADC_ConfigChannel+0x1e4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d125      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d126      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80026d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d11a      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026e2:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <HAL_ADC_ConfigChannel+0x1e8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a13      	ldr	r2, [pc, #76]	@ (8002734 <HAL_ADC_ConfigChannel+0x1ec>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	0c9a      	lsrs	r2, r3, #18
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026f8:	e002      	b.n	8002700 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f9      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x1b2>
 8002706:	e007      	b.n	8002718 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002720:	7bfb      	ldrb	r3, [r7, #15]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	40012400 	.word	0x40012400
 8002730:	20000030 	.word	0x20000030
 8002734:	431bde83 	.word	0x431bde83

08002738 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d040      	beq.n	80027d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002766:	4b1f      	ldr	r3, [pc, #124]	@ (80027e4 <ADC_Enable+0xac>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1f      	ldr	r2, [pc, #124]	@ (80027e8 <ADC_Enable+0xb0>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	0c9b      	lsrs	r3, r3, #18
 8002772:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002774:	e002      	b.n	800277c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3b01      	subs	r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f9      	bne.n	8002776 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002782:	f7ff fd21 	bl	80021c8 <HAL_GetTick>
 8002786:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002788:	e01f      	b.n	80027ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800278a:	f7ff fd1d 	bl	80021c8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d918      	bls.n	80027ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d011      	beq.n	80027ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027aa:	f043 0210 	orr.w	r2, r3, #16
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b6:	f043 0201 	orr.w	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e007      	b.n	80027da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d1d8      	bne.n	800278a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000030 	.word	0x20000030
 80027e8:	431bde83 	.word	0x431bde83

080027ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b01      	cmp	r3, #1
 8002804:	d12e      	bne.n	8002864 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002816:	f7ff fcd7 	bl	80021c8 <HAL_GetTick>
 800281a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800281c:	e01b      	b.n	8002856 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800281e:	f7ff fcd3 	bl	80021c8 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d914      	bls.n	8002856 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b01      	cmp	r3, #1
 8002838:	d10d      	bne.n	8002856 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283e:	f043 0210 	orr.w	r2, r3, #16
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284a:	f043 0201 	orr.w	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e007      	b.n	8002866 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	d0dc      	beq.n	800281e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	@ (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4906      	ldr	r1, [pc, #24]	@ (8002908 <__NVIC_EnableIRQ+0x34>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	@ (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	@ (800295c <__NVIC_SetPriority+0x50>)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	@ 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	@ 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff4f 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029ec:	f7ff ff64 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 80029f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	6978      	ldr	r0, [r7, #20]
 80029f8:	f7ff ffb2 	bl	8002960 <NVIC_EncodePriority>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff81 	bl	800290c <__NVIC_SetPriority>
}
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4603      	mov	r3, r0
 8002a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff57 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d008      	beq.n	8002a58 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2204      	movs	r2, #4
 8002a4a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e020      	b.n	8002a9a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 020e 	bic.w	r2, r2, #14
 8002a66:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a80:	2101      	movs	r1, #1
 8002a82:	fa01 f202 	lsl.w	r2, r1, r2
 8002a86:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d005      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e051      	b.n	8002b6c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 020e 	bic.w	r2, r2, #14
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a22      	ldr	r2, [pc, #136]	@ (8002b78 <HAL_DMA_Abort_IT+0xd4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d029      	beq.n	8002b46 <HAL_DMA_Abort_IT+0xa2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a21      	ldr	r2, [pc, #132]	@ (8002b7c <HAL_DMA_Abort_IT+0xd8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d022      	beq.n	8002b42 <HAL_DMA_Abort_IT+0x9e>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1f      	ldr	r2, [pc, #124]	@ (8002b80 <HAL_DMA_Abort_IT+0xdc>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01a      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x98>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002b84 <HAL_DMA_Abort_IT+0xe0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d012      	beq.n	8002b36 <HAL_DMA_Abort_IT+0x92>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1c      	ldr	r2, [pc, #112]	@ (8002b88 <HAL_DMA_Abort_IT+0xe4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00a      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x8c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002b8c <HAL_DMA_Abort_IT+0xe8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d102      	bne.n	8002b2a <HAL_DMA_Abort_IT+0x86>
 8002b24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b28:	e00e      	b.n	8002b48 <HAL_DMA_Abort_IT+0xa4>
 8002b2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b2e:	e00b      	b.n	8002b48 <HAL_DMA_Abort_IT+0xa4>
 8002b30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b34:	e008      	b.n	8002b48 <HAL_DMA_Abort_IT+0xa4>
 8002b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b3a:	e005      	b.n	8002b48 <HAL_DMA_Abort_IT+0xa4>
 8002b3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b40:	e002      	b.n	8002b48 <HAL_DMA_Abort_IT+0xa4>
 8002b42:	2310      	movs	r3, #16
 8002b44:	e000      	b.n	8002b48 <HAL_DMA_Abort_IT+0xa4>
 8002b46:	2301      	movs	r3, #1
 8002b48:	4a11      	ldr	r2, [pc, #68]	@ (8002b90 <HAL_DMA_Abort_IT+0xec>)
 8002b4a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
    } 
  }
  return status;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40020008 	.word	0x40020008
 8002b7c:	4002001c 	.word	0x4002001c
 8002b80:	40020030 	.word	0x40020030
 8002b84:	40020044 	.word	0x40020044
 8002b88:	40020058 	.word	0x40020058
 8002b8c:	4002006c 	.word	0x4002006c
 8002b90:	40020000 	.word	0x40020000

08002b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b08b      	sub	sp, #44	@ 0x2c
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba6:	e169      	b.n	8002e7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ba8:	2201      	movs	r2, #1
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	f040 8158 	bne.w	8002e76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4a9a      	ldr	r2, [pc, #616]	@ (8002e34 <HAL_GPIO_Init+0x2a0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d05e      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
 8002bd0:	4a98      	ldr	r2, [pc, #608]	@ (8002e34 <HAL_GPIO_Init+0x2a0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d875      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002bd6:	4a98      	ldr	r2, [pc, #608]	@ (8002e38 <HAL_GPIO_Init+0x2a4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d058      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
 8002bdc:	4a96      	ldr	r2, [pc, #600]	@ (8002e38 <HAL_GPIO_Init+0x2a4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d86f      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002be2:	4a96      	ldr	r2, [pc, #600]	@ (8002e3c <HAL_GPIO_Init+0x2a8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d052      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
 8002be8:	4a94      	ldr	r2, [pc, #592]	@ (8002e3c <HAL_GPIO_Init+0x2a8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d869      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002bee:	4a94      	ldr	r2, [pc, #592]	@ (8002e40 <HAL_GPIO_Init+0x2ac>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d04c      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
 8002bf4:	4a92      	ldr	r2, [pc, #584]	@ (8002e40 <HAL_GPIO_Init+0x2ac>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d863      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002bfa:	4a92      	ldr	r2, [pc, #584]	@ (8002e44 <HAL_GPIO_Init+0x2b0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d046      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
 8002c00:	4a90      	ldr	r2, [pc, #576]	@ (8002e44 <HAL_GPIO_Init+0x2b0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d85d      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002c06:	2b12      	cmp	r3, #18
 8002c08:	d82a      	bhi.n	8002c60 <HAL_GPIO_Init+0xcc>
 8002c0a:	2b12      	cmp	r3, #18
 8002c0c:	d859      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c14 <HAL_GPIO_Init+0x80>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c8f 	.word	0x08002c8f
 8002c18:	08002c69 	.word	0x08002c69
 8002c1c:	08002c7b 	.word	0x08002c7b
 8002c20:	08002cbd 	.word	0x08002cbd
 8002c24:	08002cc3 	.word	0x08002cc3
 8002c28:	08002cc3 	.word	0x08002cc3
 8002c2c:	08002cc3 	.word	0x08002cc3
 8002c30:	08002cc3 	.word	0x08002cc3
 8002c34:	08002cc3 	.word	0x08002cc3
 8002c38:	08002cc3 	.word	0x08002cc3
 8002c3c:	08002cc3 	.word	0x08002cc3
 8002c40:	08002cc3 	.word	0x08002cc3
 8002c44:	08002cc3 	.word	0x08002cc3
 8002c48:	08002cc3 	.word	0x08002cc3
 8002c4c:	08002cc3 	.word	0x08002cc3
 8002c50:	08002cc3 	.word	0x08002cc3
 8002c54:	08002cc3 	.word	0x08002cc3
 8002c58:	08002c71 	.word	0x08002c71
 8002c5c:	08002c85 	.word	0x08002c85
 8002c60:	4a79      	ldr	r2, [pc, #484]	@ (8002e48 <HAL_GPIO_Init+0x2b4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c66:	e02c      	b.n	8002cc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	623b      	str	r3, [r7, #32]
          break;
 8002c6e:	e029      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	3304      	adds	r3, #4
 8002c76:	623b      	str	r3, [r7, #32]
          break;
 8002c78:	e024      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	3308      	adds	r3, #8
 8002c80:	623b      	str	r3, [r7, #32]
          break;
 8002c82:	e01f      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	623b      	str	r3, [r7, #32]
          break;
 8002c8c:	e01a      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c96:	2304      	movs	r3, #4
 8002c98:	623b      	str	r3, [r7, #32]
          break;
 8002c9a:	e013      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d105      	bne.n	8002cb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	611a      	str	r2, [r3, #16]
          break;
 8002cae:	e009      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	615a      	str	r2, [r3, #20]
          break;
 8002cba:	e003      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	623b      	str	r3, [r7, #32]
          break;
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          break;
 8002cc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2bff      	cmp	r3, #255	@ 0xff
 8002cc8:	d801      	bhi.n	8002cce <HAL_GPIO_Init+0x13a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	e001      	b.n	8002cd2 <HAL_GPIO_Init+0x13e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2bff      	cmp	r3, #255	@ 0xff
 8002cd8:	d802      	bhi.n	8002ce0 <HAL_GPIO_Init+0x14c>
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	e002      	b.n	8002ce6 <HAL_GPIO_Init+0x152>
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	3b08      	subs	r3, #8
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	210f      	movs	r1, #15
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	6a39      	ldr	r1, [r7, #32]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	431a      	orrs	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 80b1 	beq.w	8002e76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d14:	4b4d      	ldr	r3, [pc, #308]	@ (8002e4c <HAL_GPIO_Init+0x2b8>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4a4c      	ldr	r2, [pc, #304]	@ (8002e4c <HAL_GPIO_Init+0x2b8>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6193      	str	r3, [r2, #24]
 8002d20:	4b4a      	ldr	r3, [pc, #296]	@ (8002e4c <HAL_GPIO_Init+0x2b8>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d2c:	4a48      	ldr	r2, [pc, #288]	@ (8002e50 <HAL_GPIO_Init+0x2bc>)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	3302      	adds	r3, #2
 8002d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a40      	ldr	r2, [pc, #256]	@ (8002e54 <HAL_GPIO_Init+0x2c0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_GPIO_Init+0x1ec>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002e58 <HAL_GPIO_Init+0x2c4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00d      	beq.n	8002d7c <HAL_GPIO_Init+0x1e8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3e      	ldr	r2, [pc, #248]	@ (8002e5c <HAL_GPIO_Init+0x2c8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d007      	beq.n	8002d78 <HAL_GPIO_Init+0x1e4>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002e60 <HAL_GPIO_Init+0x2cc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d101      	bne.n	8002d74 <HAL_GPIO_Init+0x1e0>
 8002d70:	2303      	movs	r3, #3
 8002d72:	e006      	b.n	8002d82 <HAL_GPIO_Init+0x1ee>
 8002d74:	2304      	movs	r3, #4
 8002d76:	e004      	b.n	8002d82 <HAL_GPIO_Init+0x1ee>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e002      	b.n	8002d82 <HAL_GPIO_Init+0x1ee>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <HAL_GPIO_Init+0x1ee>
 8002d80:	2300      	movs	r3, #0
 8002d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d84:	f002 0203 	and.w	r2, r2, #3
 8002d88:	0092      	lsls	r2, r2, #2
 8002d8a:	4093      	lsls	r3, r2
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d92:	492f      	ldr	r1, [pc, #188]	@ (8002e50 <HAL_GPIO_Init+0x2bc>)
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d006      	beq.n	8002dba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dac:	4b2d      	ldr	r3, [pc, #180]	@ (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	492c      	ldr	r1, [pc, #176]	@ (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	608b      	str	r3, [r1, #8]
 8002db8:	e006      	b.n	8002dc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002dba:	4b2a      	ldr	r3, [pc, #168]	@ (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	4928      	ldr	r1, [pc, #160]	@ (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dd4:	4b23      	ldr	r3, [pc, #140]	@ (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	4922      	ldr	r1, [pc, #136]	@ (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60cb      	str	r3, [r1, #12]
 8002de0:	e006      	b.n	8002df0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002de2:	4b20      	ldr	r3, [pc, #128]	@ (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	491e      	ldr	r1, [pc, #120]	@ (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d006      	beq.n	8002e0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dfc:	4b19      	ldr	r3, [pc, #100]	@ (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	4918      	ldr	r1, [pc, #96]	@ (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
 8002e08:	e006      	b.n	8002e18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e0a:	4b16      	ldr	r3, [pc, #88]	@ (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	4914      	ldr	r1, [pc, #80]	@ (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d021      	beq.n	8002e68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e24:	4b0f      	ldr	r3, [pc, #60]	@ (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	490e      	ldr	r1, [pc, #56]	@ (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	600b      	str	r3, [r1, #0]
 8002e30:	e021      	b.n	8002e76 <HAL_GPIO_Init+0x2e2>
 8002e32:	bf00      	nop
 8002e34:	10320000 	.word	0x10320000
 8002e38:	10310000 	.word	0x10310000
 8002e3c:	10220000 	.word	0x10220000
 8002e40:	10210000 	.word	0x10210000
 8002e44:	10120000 	.word	0x10120000
 8002e48:	10110000 	.word	0x10110000
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40010000 	.word	0x40010000
 8002e54:	40010800 	.word	0x40010800
 8002e58:	40010c00 	.word	0x40010c00
 8002e5c:	40011000 	.word	0x40011000
 8002e60:	40011400 	.word	0x40011400
 8002e64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <HAL_GPIO_Init+0x304>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	4909      	ldr	r1, [pc, #36]	@ (8002e98 <HAL_GPIO_Init+0x304>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	3301      	adds	r3, #1
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	fa22 f303 	lsr.w	r3, r2, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f47f ae8e 	bne.w	8002ba8 <HAL_GPIO_Init+0x14>
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	372c      	adds	r7, #44	@ 0x2c
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	40010400 	.word	0x40010400

08002e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eac:	787b      	ldrb	r3, [r7, #1]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002eb8:	e003      	b.n	8002ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002eba:	887b      	ldrh	r3, [r7, #2]
 8002ebc:	041a      	lsls	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	611a      	str	r2, [r3, #16]
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e12b      	b.n	8003136 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe fefc 	bl	8001cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2224      	movs	r2, #36	@ 0x24
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f30:	f001 fd7c 	bl	8004a2c <HAL_RCC_GetPCLK1Freq>
 8002f34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4a81      	ldr	r2, [pc, #516]	@ (8003140 <HAL_I2C_Init+0x274>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d807      	bhi.n	8002f50 <HAL_I2C_Init+0x84>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a80      	ldr	r2, [pc, #512]	@ (8003144 <HAL_I2C_Init+0x278>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	bf94      	ite	ls
 8002f48:	2301      	movls	r3, #1
 8002f4a:	2300      	movhi	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e006      	b.n	8002f5e <HAL_I2C_Init+0x92>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a7d      	ldr	r2, [pc, #500]	@ (8003148 <HAL_I2C_Init+0x27c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	bf94      	ite	ls
 8002f58:	2301      	movls	r3, #1
 8002f5a:	2300      	movhi	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0e7      	b.n	8003136 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4a78      	ldr	r2, [pc, #480]	@ (800314c <HAL_I2C_Init+0x280>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	0c9b      	lsrs	r3, r3, #18
 8002f70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4a6a      	ldr	r2, [pc, #424]	@ (8003140 <HAL_I2C_Init+0x274>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d802      	bhi.n	8002fa0 <HAL_I2C_Init+0xd4>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	e009      	b.n	8002fb4 <HAL_I2C_Init+0xe8>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	4a69      	ldr	r2, [pc, #420]	@ (8003150 <HAL_I2C_Init+0x284>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fc6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	495c      	ldr	r1, [pc, #368]	@ (8003140 <HAL_I2C_Init+0x274>)
 8002fd0:	428b      	cmp	r3, r1
 8002fd2:	d819      	bhi.n	8003008 <HAL_I2C_Init+0x13c>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e59      	subs	r1, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe2:	1c59      	adds	r1, r3, #1
 8002fe4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fe8:	400b      	ands	r3, r1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_I2C_Init+0x138>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1e59      	subs	r1, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003002:	e051      	b.n	80030a8 <HAL_I2C_Init+0x1dc>
 8003004:	2304      	movs	r3, #4
 8003006:	e04f      	b.n	80030a8 <HAL_I2C_Init+0x1dc>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d111      	bne.n	8003034 <HAL_I2C_Init+0x168>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1e58      	subs	r0, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	440b      	add	r3, r1
 800301e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003022:	3301      	adds	r3, #1
 8003024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e012      	b.n	800305a <HAL_I2C_Init+0x18e>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1e58      	subs	r0, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	0099      	lsls	r1, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	fbb0 f3f3 	udiv	r3, r0, r3
 800304a:	3301      	adds	r3, #1
 800304c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_Init+0x196>
 800305e:	2301      	movs	r3, #1
 8003060:	e022      	b.n	80030a8 <HAL_I2C_Init+0x1dc>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10e      	bne.n	8003088 <HAL_I2C_Init+0x1bc>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1e58      	subs	r0, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6859      	ldr	r1, [r3, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	440b      	add	r3, r1
 8003078:	fbb0 f3f3 	udiv	r3, r0, r3
 800307c:	3301      	adds	r3, #1
 800307e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003086:	e00f      	b.n	80030a8 <HAL_I2C_Init+0x1dc>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1e58      	subs	r0, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	0099      	lsls	r1, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	fbb0 f3f3 	udiv	r3, r0, r3
 800309e:	3301      	adds	r3, #1
 80030a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	6809      	ldr	r1, [r1, #0]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69da      	ldr	r2, [r3, #28]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6911      	ldr	r1, [r2, #16]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68d2      	ldr	r2, [r2, #12]
 80030e2:	4311      	orrs	r1, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	000186a0 	.word	0x000186a0
 8003144:	001e847f 	.word	0x001e847f
 8003148:	003d08ff 	.word	0x003d08ff
 800314c:	431bde83 	.word	0x431bde83
 8003150:	10624dd3 	.word	0x10624dd3

08003154 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	461a      	mov	r2, r3
 8003160:	460b      	mov	r3, r1
 8003162:	817b      	strh	r3, [r7, #10]
 8003164:	4613      	mov	r3, r2
 8003166:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003168:	f7ff f82e 	bl	80021c8 <HAL_GetTick>
 800316c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b20      	cmp	r3, #32
 8003178:	f040 80e0 	bne.w	800333c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	2319      	movs	r3, #25
 8003182:	2201      	movs	r2, #1
 8003184:	4970      	ldr	r1, [pc, #448]	@ (8003348 <HAL_I2C_Master_Transmit+0x1f4>)
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 fe50 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
 8003194:	e0d3      	b.n	800333e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_I2C_Master_Transmit+0x50>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e0cc      	b.n	800333e <HAL_I2C_Master_Transmit+0x1ea>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d007      	beq.n	80031ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0201 	orr.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2221      	movs	r2, #33	@ 0x21
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2210      	movs	r2, #16
 80031e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	893a      	ldrh	r2, [r7, #8]
 80031fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4a50      	ldr	r2, [pc, #320]	@ (800334c <HAL_I2C_Master_Transmit+0x1f8>)
 800320a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800320c:	8979      	ldrh	r1, [r7, #10]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	6a3a      	ldr	r2, [r7, #32]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fc0a 	bl	8003a2c <I2C_MasterRequestWrite>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e08d      	b.n	800333e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003238:	e066      	b.n	8003308 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	6a39      	ldr	r1, [r7, #32]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 ff0e 	bl	8004060 <I2C_WaitOnTXEFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	2b04      	cmp	r3, #4
 8003250:	d107      	bne.n	8003262 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003260:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e06b      	b.n	800333e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326a:	781a      	ldrb	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	3b01      	subs	r3, #1
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d11b      	bne.n	80032dc <HAL_I2C_Master_Transmit+0x188>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d017      	beq.n	80032dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	781a      	ldrb	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	6a39      	ldr	r1, [r7, #32]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 ff05 	bl	80040f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00d      	beq.n	8003308 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d107      	bne.n	8003304 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003302:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e01a      	b.n	800333e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	d194      	bne.n	800323a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800331e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	e000      	b.n	800333e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	00100002 	.word	0x00100002
 800334c:	ffff0000 	.word	0xffff0000

08003350 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	4608      	mov	r0, r1
 800335a:	4611      	mov	r1, r2
 800335c:	461a      	mov	r2, r3
 800335e:	4603      	mov	r3, r0
 8003360:	817b      	strh	r3, [r7, #10]
 8003362:	460b      	mov	r3, r1
 8003364:	813b      	strh	r3, [r7, #8]
 8003366:	4613      	mov	r3, r2
 8003368:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800336a:	f7fe ff2d 	bl	80021c8 <HAL_GetTick>
 800336e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b20      	cmp	r3, #32
 800337a:	f040 80d9 	bne.w	8003530 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	2319      	movs	r3, #25
 8003384:	2201      	movs	r2, #1
 8003386:	496d      	ldr	r1, [pc, #436]	@ (800353c <HAL_I2C_Mem_Write+0x1ec>)
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fd4f 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003394:	2302      	movs	r3, #2
 8003396:	e0cc      	b.n	8003532 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_I2C_Mem_Write+0x56>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e0c5      	b.n	8003532 <HAL_I2C_Mem_Write+0x1e2>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d007      	beq.n	80033cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2221      	movs	r2, #33	@ 0x21
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2240      	movs	r2, #64	@ 0x40
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a4d      	ldr	r2, [pc, #308]	@ (8003540 <HAL_I2C_Mem_Write+0x1f0>)
 800340c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800340e:	88f8      	ldrh	r0, [r7, #6]
 8003410:	893a      	ldrh	r2, [r7, #8]
 8003412:	8979      	ldrh	r1, [r7, #10]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	9301      	str	r3, [sp, #4]
 8003418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	4603      	mov	r3, r0
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 fb86 	bl	8003b30 <I2C_RequestMemoryWrite>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d052      	beq.n	80034d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e081      	b.n	8003532 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 fe14 	bl	8004060 <I2C_WaitOnTXEFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00d      	beq.n	800345a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	2b04      	cmp	r3, #4
 8003444:	d107      	bne.n	8003456 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003454:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e06b      	b.n	8003532 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	781a      	ldrb	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b04      	cmp	r3, #4
 8003496:	d11b      	bne.n	80034d0 <HAL_I2C_Mem_Write+0x180>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	d017      	beq.n	80034d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1aa      	bne.n	800342e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 fe07 	bl	80040f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00d      	beq.n	8003504 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d107      	bne.n	8003500 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e016      	b.n	8003532 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	e000      	b.n	8003532 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003530:	2302      	movs	r3, #2
  }
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	00100002 	.word	0x00100002
 8003540:	ffff0000 	.word	0xffff0000

08003544 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08c      	sub	sp, #48	@ 0x30
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	4608      	mov	r0, r1
 800354e:	4611      	mov	r1, r2
 8003550:	461a      	mov	r2, r3
 8003552:	4603      	mov	r3, r0
 8003554:	817b      	strh	r3, [r7, #10]
 8003556:	460b      	mov	r3, r1
 8003558:	813b      	strh	r3, [r7, #8]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003562:	f7fe fe31 	bl	80021c8 <HAL_GetTick>
 8003566:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b20      	cmp	r3, #32
 8003572:	f040 8250 	bne.w	8003a16 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2319      	movs	r3, #25
 800357c:	2201      	movs	r2, #1
 800357e:	4982      	ldr	r1, [pc, #520]	@ (8003788 <HAL_I2C_Mem_Read+0x244>)
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 fc53 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800358c:	2302      	movs	r3, #2
 800358e:	e243      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_I2C_Mem_Read+0x5a>
 800359a:	2302      	movs	r3, #2
 800359c:	e23c      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4d4>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d007      	beq.n	80035c4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2222      	movs	r2, #34	@ 0x22
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2240      	movs	r2, #64	@ 0x40
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4a62      	ldr	r2, [pc, #392]	@ (800378c <HAL_I2C_Mem_Read+0x248>)
 8003604:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003606:	88f8      	ldrh	r0, [r7, #6]
 8003608:	893a      	ldrh	r2, [r7, #8]
 800360a:	8979      	ldrh	r1, [r7, #10]
 800360c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	4603      	mov	r3, r0
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fb20 	bl	8003c5c <I2C_RequestMemoryRead>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e1f8      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362a:	2b00      	cmp	r3, #0
 800362c:	d113      	bne.n	8003656 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e1cc      	b.n	80039f0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365a:	2b01      	cmp	r3, #1
 800365c:	d11e      	bne.n	800369c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800366c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800366e:	b672      	cpsid	i
}
 8003670:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003696:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003698:	b662      	cpsie	i
}
 800369a:	e035      	b.n	8003708 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d11e      	bne.n	80036e2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036b4:	b672      	cpsid	i
}
 80036b6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036de:	b662      	cpsie	i
}
 80036e0:	e012      	b.n	8003708 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036f0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003708:	e172      	b.n	80039f0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370e:	2b03      	cmp	r3, #3
 8003710:	f200 811f 	bhi.w	8003952 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003718:	2b01      	cmp	r3, #1
 800371a:	d123      	bne.n	8003764 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800371e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fd2d 	bl	8004180 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e173      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003762:	e145      	b.n	80039f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003768:	2b02      	cmp	r3, #2
 800376a:	d152      	bne.n	8003812 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003772:	2200      	movs	r2, #0
 8003774:	4906      	ldr	r1, [pc, #24]	@ (8003790 <HAL_I2C_Mem_Read+0x24c>)
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 fb58 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e148      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4d4>
 8003786:	bf00      	nop
 8003788:	00100002 	.word	0x00100002
 800378c:	ffff0000 	.word	0xffff0000
 8003790:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003794:	b672      	cpsid	i
}
 8003796:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037da:	b662      	cpsie	i
}
 80037dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003810:	e0ee      	b.n	80039f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003818:	2200      	movs	r2, #0
 800381a:	4981      	ldr	r1, [pc, #516]	@ (8003a20 <HAL_I2C_Mem_Read+0x4dc>)
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fb05 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0f5      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800383a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800383c:	b672      	cpsid	i
}
 800383e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003872:	4b6c      	ldr	r3, [pc, #432]	@ (8003a24 <HAL_I2C_Mem_Read+0x4e0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	08db      	lsrs	r3, r3, #3
 8003878:	4a6b      	ldr	r2, [pc, #428]	@ (8003a28 <HAL_I2C_Mem_Read+0x4e4>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	0a1a      	lsrs	r2, r3, #8
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	00da      	lsls	r2, r3, #3
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	3b01      	subs	r3, #1
 8003890:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d118      	bne.n	80038ca <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	f043 0220 	orr.w	r2, r3, #32
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80038ba:	b662      	cpsie	i
}
 80038bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e0a6      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d1d9      	bne.n	800388c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800391a:	b662      	cpsie	i
}
 800391c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003950:	e04e      	b.n	80039f0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003954:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fc12 	bl	8004180 <I2C_WaitOnRXNEFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e058      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d124      	bne.n	80039f0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d107      	bne.n	80039be <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039bc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f47f ae88 	bne.w	800370a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e000      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
  }
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3728      	adds	r7, #40	@ 0x28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	00010004 	.word	0x00010004
 8003a24:	20000030 	.word	0x20000030
 8003a28:	14f8b589 	.word	0x14f8b589

08003a2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	607a      	str	r2, [r7, #4]
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d006      	beq.n	8003a56 <I2C_MasterRequestWrite+0x2a>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d003      	beq.n	8003a56 <I2C_MasterRequestWrite+0x2a>
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a54:	d108      	bne.n	8003a68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e00b      	b.n	8003a80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6c:	2b12      	cmp	r3, #18
 8003a6e:	d107      	bne.n	8003a80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f9cd 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aa6:	d103      	bne.n	8003ab0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e035      	b.n	8003b20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003abc:	d108      	bne.n	8003ad0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003abe:	897b      	ldrh	r3, [r7, #10]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003acc:	611a      	str	r2, [r3, #16]
 8003ace:	e01b      	b.n	8003b08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ad0:	897b      	ldrh	r3, [r7, #10]
 8003ad2:	11db      	asrs	r3, r3, #7
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f003 0306 	and.w	r3, r3, #6
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f063 030f 	orn	r3, r3, #15
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	490e      	ldr	r1, [pc, #56]	@ (8003b28 <I2C_MasterRequestWrite+0xfc>)
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 fa16 	bl	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e010      	b.n	8003b20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003afe:	897b      	ldrh	r3, [r7, #10]
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4907      	ldr	r1, [pc, #28]	@ (8003b2c <I2C_MasterRequestWrite+0x100>)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fa06 	bl	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	00010008 	.word	0x00010008
 8003b2c:	00010002 	.word	0x00010002

08003b30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	817b      	strh	r3, [r7, #10]
 8003b42:	460b      	mov	r3, r1
 8003b44:	813b      	strh	r3, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f960 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00d      	beq.n	8003b8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b80:	d103      	bne.n	8003b8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e05f      	b.n	8003c4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b8e:	897b      	ldrh	r3, [r7, #10]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	461a      	mov	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	6a3a      	ldr	r2, [r7, #32]
 8003ba2:	492d      	ldr	r1, [pc, #180]	@ (8003c58 <I2C_RequestMemoryWrite+0x128>)
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f9bb 	bl	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e04c      	b.n	8003c4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bcc:	6a39      	ldr	r1, [r7, #32]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 fa46 	bl	8004060 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00d      	beq.n	8003bf6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d107      	bne.n	8003bf2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e02b      	b.n	8003c4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d105      	bne.n	8003c08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bfc:	893b      	ldrh	r3, [r7, #8]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	611a      	str	r2, [r3, #16]
 8003c06:	e021      	b.n	8003c4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c08:	893b      	ldrh	r3, [r7, #8]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c18:	6a39      	ldr	r1, [r7, #32]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fa20 	bl	8004060 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00d      	beq.n	8003c42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d107      	bne.n	8003c3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e005      	b.n	8003c4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c42:	893b      	ldrh	r3, [r7, #8]
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	00010002 	.word	0x00010002

08003c5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	4608      	mov	r0, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	817b      	strh	r3, [r7, #10]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	813b      	strh	r3, [r7, #8]
 8003c72:	4613      	mov	r3, r2
 8003c74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f8c2 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00d      	beq.n	8003cca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cbc:	d103      	bne.n	8003cc6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cc4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0aa      	b.n	8003e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cca:	897b      	ldrh	r3, [r7, #10]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	6a3a      	ldr	r2, [r7, #32]
 8003cde:	4952      	ldr	r1, [pc, #328]	@ (8003e28 <I2C_RequestMemoryRead+0x1cc>)
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f91d 	bl	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e097      	b.n	8003e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d08:	6a39      	ldr	r1, [r7, #32]
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f9a8 	bl	8004060 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d107      	bne.n	8003d2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e076      	b.n	8003e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d105      	bne.n	8003d44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d38:	893b      	ldrh	r3, [r7, #8]
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	611a      	str	r2, [r3, #16]
 8003d42:	e021      	b.n	8003d88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d44:	893b      	ldrh	r3, [r7, #8]
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d54:	6a39      	ldr	r1, [r7, #32]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f982 	bl	8004060 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00d      	beq.n	8003d7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d107      	bne.n	8003d7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e050      	b.n	8003e20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d7e:	893b      	ldrh	r3, [r7, #8]
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d8a:	6a39      	ldr	r1, [r7, #32]
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f967 	bl	8004060 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00d      	beq.n	8003db4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d107      	bne.n	8003db0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e035      	b.n	8003e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f82b 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00d      	beq.n	8003df8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dea:	d103      	bne.n	8003df4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003df2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e013      	b.n	8003e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003df8:	897b      	ldrh	r3, [r7, #10]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	6a3a      	ldr	r2, [r7, #32]
 8003e0c:	4906      	ldr	r1, [pc, #24]	@ (8003e28 <I2C_RequestMemoryRead+0x1cc>)
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f886 	bl	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	00010002 	.word	0x00010002

08003e2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e3c:	e048      	b.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d044      	beq.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e46:	f7fe f9bf 	bl	80021c8 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d302      	bcc.n	8003e5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d139      	bne.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	0c1b      	lsrs	r3, r3, #16
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d10d      	bne.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	43da      	mvns	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	4013      	ands	r3, r2
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf0c      	ite	eq
 8003e78:	2301      	moveq	r3, #1
 8003e7a:	2300      	movne	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	e00c      	b.n	8003e9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	43da      	mvns	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d116      	bne.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e023      	b.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	0c1b      	lsrs	r3, r3, #16
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d10d      	bne.n	8003ef6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	43da      	mvns	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	e00c      	b.n	8003f10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	43da      	mvns	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4013      	ands	r3, r2
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d093      	beq.n	8003e3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f2e:	e071      	b.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f3e:	d123      	bne.n	8003f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	f043 0204 	orr.w	r2, r3, #4
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e067      	b.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8e:	d041      	beq.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f90:	f7fe f91a 	bl	80021c8 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d302      	bcc.n	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d136      	bne.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d10c      	bne.n	8003fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	43da      	mvns	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bf14      	ite	ne
 8003fc2:	2301      	movne	r3, #1
 8003fc4:	2300      	moveq	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e00b      	b.n	8003fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	43da      	mvns	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bf14      	ite	ne
 8003fdc:	2301      	movne	r3, #1
 8003fde:	2300      	moveq	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	f043 0220 	orr.w	r2, r3, #32
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e021      	b.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	0c1b      	lsrs	r3, r3, #16
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	d10c      	bne.n	8004038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	43da      	mvns	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4013      	ands	r3, r2
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf14      	ite	ne
 8004030:	2301      	movne	r3, #1
 8004032:	2300      	moveq	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	e00b      	b.n	8004050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	43da      	mvns	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4013      	ands	r3, r2
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf14      	ite	ne
 800404a:	2301      	movne	r3, #1
 800404c:	2300      	moveq	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	f47f af6d 	bne.w	8003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800406c:	e034      	b.n	80040d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f8e3 	bl	800423a <I2C_IsAcknowledgeFailed>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e034      	b.n	80040e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d028      	beq.n	80040d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004086:	f7fe f89f 	bl	80021c8 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	429a      	cmp	r2, r3
 8004094:	d302      	bcc.n	800409c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d11d      	bne.n	80040d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a6:	2b80      	cmp	r3, #128	@ 0x80
 80040a8:	d016      	beq.n	80040d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	f043 0220 	orr.w	r2, r3, #32
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e007      	b.n	80040e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e2:	2b80      	cmp	r3, #128	@ 0x80
 80040e4:	d1c3      	bne.n	800406e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040fc:	e034      	b.n	8004168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f89b 	bl	800423a <I2C_IsAcknowledgeFailed>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e034      	b.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d028      	beq.n	8004168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7fe f857 	bl	80021c8 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d11d      	bne.n	8004168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b04      	cmp	r3, #4
 8004138:	d016      	beq.n	8004168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	f043 0220 	orr.w	r2, r3, #32
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e007      	b.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d1c3      	bne.n	80040fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800418c:	e049      	b.n	8004222 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	2b10      	cmp	r3, #16
 800419a:	d119      	bne.n	80041d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0210 	mvn.w	r2, #16
 80041a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e030      	b.n	8004232 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d0:	f7fd fffa 	bl	80021c8 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d302      	bcc.n	80041e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d11d      	bne.n	8004222 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f0:	2b40      	cmp	r3, #64	@ 0x40
 80041f2:	d016      	beq.n	8004222 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	f043 0220 	orr.w	r2, r3, #32
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e007      	b.n	8004232 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800422c:	2b40      	cmp	r3, #64	@ 0x40
 800422e:	d1ae      	bne.n	800418e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800424c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004250:	d11b      	bne.n	800428a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800425a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	f043 0204 	orr.w	r2, r3, #4
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr
	...

08004298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e272      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8087 	beq.w	80043c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042b8:	4b92      	ldr	r3, [pc, #584]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d00c      	beq.n	80042de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042c4:	4b8f      	ldr	r3, [pc, #572]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 030c 	and.w	r3, r3, #12
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d112      	bne.n	80042f6 <HAL_RCC_OscConfig+0x5e>
 80042d0:	4b8c      	ldr	r3, [pc, #560]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042dc:	d10b      	bne.n	80042f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042de:	4b89      	ldr	r3, [pc, #548]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d06c      	beq.n	80043c4 <HAL_RCC_OscConfig+0x12c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d168      	bne.n	80043c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e24c      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042fe:	d106      	bne.n	800430e <HAL_RCC_OscConfig+0x76>
 8004300:	4b80      	ldr	r3, [pc, #512]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a7f      	ldr	r2, [pc, #508]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	e02e      	b.n	800436c <HAL_RCC_OscConfig+0xd4>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10c      	bne.n	8004330 <HAL_RCC_OscConfig+0x98>
 8004316:	4b7b      	ldr	r3, [pc, #492]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a7a      	ldr	r2, [pc, #488]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 800431c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	4b78      	ldr	r3, [pc, #480]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a77      	ldr	r2, [pc, #476]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004328:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e01d      	b.n	800436c <HAL_RCC_OscConfig+0xd4>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0xbc>
 800433a:	4b72      	ldr	r3, [pc, #456]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a71      	ldr	r2, [pc, #452]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b6f      	ldr	r3, [pc, #444]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6e      	ldr	r2, [pc, #440]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e00b      	b.n	800436c <HAL_RCC_OscConfig+0xd4>
 8004354:	4b6b      	ldr	r3, [pc, #428]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a6a      	ldr	r2, [pc, #424]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 800435a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4b68      	ldr	r3, [pc, #416]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a67      	ldr	r2, [pc, #412]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800436a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fd ff28 	bl	80021c8 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800437c:	f7fd ff24 	bl	80021c8 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	@ 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e200      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b5d      	ldr	r3, [pc, #372]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0xe4>
 800439a:	e014      	b.n	80043c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fd ff14 	bl	80021c8 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fd ff10 	bl	80021c8 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	@ 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1ec      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b6:	4b53      	ldr	r3, [pc, #332]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x10c>
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d063      	beq.n	800449a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043d2:	4b4c      	ldr	r3, [pc, #304]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043de:	4b49      	ldr	r3, [pc, #292]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d11c      	bne.n	8004424 <HAL_RCC_OscConfig+0x18c>
 80043ea:	4b46      	ldr	r3, [pc, #280]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d116      	bne.n	8004424 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	4b43      	ldr	r3, [pc, #268]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_RCC_OscConfig+0x176>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d001      	beq.n	800440e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e1c0      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440e:	4b3d      	ldr	r3, [pc, #244]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4939      	ldr	r1, [pc, #228]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004422:	e03a      	b.n	800449a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800442c:	4b36      	ldr	r3, [pc, #216]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004432:	f7fd fec9 	bl	80021c8 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443a:	f7fd fec5 	bl	80021c8 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e1a1      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444c:	4b2d      	ldr	r3, [pc, #180]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b2a      	ldr	r3, [pc, #168]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4927      	ldr	r1, [pc, #156]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]
 800446c:	e015      	b.n	800449a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446e:	4b26      	ldr	r3, [pc, #152]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7fd fea8 	bl	80021c8 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800447c:	f7fd fea4 	bl	80021c8 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e180      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448e:	4b1d      	ldr	r3, [pc, #116]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d03a      	beq.n	800451c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d019      	beq.n	80044e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ae:	4b17      	ldr	r3, [pc, #92]	@ (800450c <HAL_RCC_OscConfig+0x274>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b4:	f7fd fe88 	bl	80021c8 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fd fe84 	bl	80021c8 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e160      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004504 <HAL_RCC_OscConfig+0x26c>)
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044da:	2001      	movs	r0, #1
 80044dc:	f000 fafe 	bl	8004adc <RCC_Delay>
 80044e0:	e01c      	b.n	800451c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e2:	4b0a      	ldr	r3, [pc, #40]	@ (800450c <HAL_RCC_OscConfig+0x274>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e8:	f7fd fe6e 	bl	80021c8 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ee:	e00f      	b.n	8004510 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f0:	f7fd fe6a 	bl	80021c8 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d908      	bls.n	8004510 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e146      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	42420000 	.word	0x42420000
 800450c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004510:	4b92      	ldr	r3, [pc, #584]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e9      	bne.n	80044f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80a6 	beq.w	8004676 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452a:	2300      	movs	r3, #0
 800452c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452e:	4b8b      	ldr	r3, [pc, #556]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10d      	bne.n	8004556 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453a:	4b88      	ldr	r3, [pc, #544]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	4a87      	ldr	r2, [pc, #540]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004544:	61d3      	str	r3, [r2, #28]
 8004546:	4b85      	ldr	r3, [pc, #532]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004556:	4b82      	ldr	r3, [pc, #520]	@ (8004760 <HAL_RCC_OscConfig+0x4c8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d118      	bne.n	8004594 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004562:	4b7f      	ldr	r3, [pc, #508]	@ (8004760 <HAL_RCC_OscConfig+0x4c8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a7e      	ldr	r2, [pc, #504]	@ (8004760 <HAL_RCC_OscConfig+0x4c8>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800456c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456e:	f7fd fe2b 	bl	80021c8 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004576:	f7fd fe27 	bl	80021c8 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b64      	cmp	r3, #100	@ 0x64
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e103      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	4b75      	ldr	r3, [pc, #468]	@ (8004760 <HAL_RCC_OscConfig+0x4c8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d106      	bne.n	80045aa <HAL_RCC_OscConfig+0x312>
 800459c:	4b6f      	ldr	r3, [pc, #444]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	4a6e      	ldr	r2, [pc, #440]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6213      	str	r3, [r2, #32]
 80045a8:	e02d      	b.n	8004606 <HAL_RCC_OscConfig+0x36e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x334>
 80045b2:	4b6a      	ldr	r3, [pc, #424]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4a69      	ldr	r2, [pc, #420]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	f023 0301 	bic.w	r3, r3, #1
 80045bc:	6213      	str	r3, [r2, #32]
 80045be:	4b67      	ldr	r3, [pc, #412]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	4a66      	ldr	r2, [pc, #408]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	f023 0304 	bic.w	r3, r3, #4
 80045c8:	6213      	str	r3, [r2, #32]
 80045ca:	e01c      	b.n	8004606 <HAL_RCC_OscConfig+0x36e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b05      	cmp	r3, #5
 80045d2:	d10c      	bne.n	80045ee <HAL_RCC_OscConfig+0x356>
 80045d4:	4b61      	ldr	r3, [pc, #388]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	4a60      	ldr	r2, [pc, #384]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045da:	f043 0304 	orr.w	r3, r3, #4
 80045de:	6213      	str	r3, [r2, #32]
 80045e0:	4b5e      	ldr	r3, [pc, #376]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	4a5d      	ldr	r2, [pc, #372]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	6213      	str	r3, [r2, #32]
 80045ec:	e00b      	b.n	8004606 <HAL_RCC_OscConfig+0x36e>
 80045ee:	4b5b      	ldr	r3, [pc, #364]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	4a5a      	ldr	r2, [pc, #360]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	f023 0301 	bic.w	r3, r3, #1
 80045f8:	6213      	str	r3, [r2, #32]
 80045fa:	4b58      	ldr	r3, [pc, #352]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	4a57      	ldr	r2, [pc, #348]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004600:	f023 0304 	bic.w	r3, r3, #4
 8004604:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d015      	beq.n	800463a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460e:	f7fd fddb 	bl	80021c8 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004614:	e00a      	b.n	800462c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fd fdd7 	bl	80021c8 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e0b1      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462c:	4b4b      	ldr	r3, [pc, #300]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0ee      	beq.n	8004616 <HAL_RCC_OscConfig+0x37e>
 8004638:	e014      	b.n	8004664 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463a:	f7fd fdc5 	bl	80021c8 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004640:	e00a      	b.n	8004658 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7fd fdc1 	bl	80021c8 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e09b      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004658:	4b40      	ldr	r3, [pc, #256]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1ee      	bne.n	8004642 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004664:	7dfb      	ldrb	r3, [r7, #23]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d105      	bne.n	8004676 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466a:	4b3c      	ldr	r3, [pc, #240]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	4a3b      	ldr	r2, [pc, #236]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004674:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 8087 	beq.w	800478e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004680:	4b36      	ldr	r3, [pc, #216]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 030c 	and.w	r3, r3, #12
 8004688:	2b08      	cmp	r3, #8
 800468a:	d061      	beq.n	8004750 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d146      	bne.n	8004722 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004694:	4b33      	ldr	r3, [pc, #204]	@ (8004764 <HAL_RCC_OscConfig+0x4cc>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469a:	f7fd fd95 	bl	80021c8 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fd fd91 	bl	80021c8 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e06d      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b4:	4b29      	ldr	r3, [pc, #164]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c8:	d108      	bne.n	80046dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046ca:	4b24      	ldr	r3, [pc, #144]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	4921      	ldr	r1, [pc, #132]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046dc:	4b1f      	ldr	r3, [pc, #124]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a19      	ldr	r1, [r3, #32]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	430b      	orrs	r3, r1
 80046ee:	491b      	ldr	r1, [pc, #108]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004764 <HAL_RCC_OscConfig+0x4cc>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fa:	f7fd fd65 	bl	80021c8 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004702:	f7fd fd61 	bl	80021c8 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e03d      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004714:	4b11      	ldr	r3, [pc, #68]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x46a>
 8004720:	e035      	b.n	800478e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004722:	4b10      	ldr	r3, [pc, #64]	@ (8004764 <HAL_RCC_OscConfig+0x4cc>)
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7fd fd4e 	bl	80021c8 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004730:	f7fd fd4a 	bl	80021c8 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e026      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004742:	4b06      	ldr	r3, [pc, #24]	@ (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x498>
 800474e:	e01e      	b.n	800478e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d107      	bne.n	8004768 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e019      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
 800475c:	40021000 	.word	0x40021000
 8004760:	40007000 	.word	0x40007000
 8004764:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004768:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <HAL_RCC_OscConfig+0x500>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	429a      	cmp	r2, r3
 800477a:	d106      	bne.n	800478a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d001      	beq.n	800478e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40021000 	.word	0x40021000

0800479c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0d0      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b0:	4b6a      	ldr	r3, [pc, #424]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d910      	bls.n	80047e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b67      	ldr	r3, [pc, #412]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 0207 	bic.w	r2, r3, #7
 80047c6:	4965      	ldr	r1, [pc, #404]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b63      	ldr	r3, [pc, #396]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0b8      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d020      	beq.n	800482e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f8:	4b59      	ldr	r3, [pc, #356]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	4a58      	ldr	r2, [pc, #352]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004802:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004810:	4b53      	ldr	r3, [pc, #332]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4a52      	ldr	r2, [pc, #328]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800481a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800481c:	4b50      	ldr	r3, [pc, #320]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	494d      	ldr	r1, [pc, #308]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d040      	beq.n	80048bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d107      	bne.n	8004852 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	4b47      	ldr	r3, [pc, #284]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d115      	bne.n	800487a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e07f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d107      	bne.n	800486a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485a:	4b41      	ldr	r3, [pc, #260]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e073      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486a:	4b3d      	ldr	r3, [pc, #244]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e06b      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800487a:	4b39      	ldr	r3, [pc, #228]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f023 0203 	bic.w	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	4936      	ldr	r1, [pc, #216]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800488c:	f7fd fc9c 	bl	80021c8 <HAL_GetTick>
 8004890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004892:	e00a      	b.n	80048aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004894:	f7fd fc98 	bl	80021c8 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e053      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048aa:	4b2d      	ldr	r3, [pc, #180]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f003 020c 	and.w	r2, r3, #12
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d1eb      	bne.n	8004894 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048bc:	4b27      	ldr	r3, [pc, #156]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d210      	bcs.n	80048ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ca:	4b24      	ldr	r3, [pc, #144]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 0207 	bic.w	r2, r3, #7
 80048d2:	4922      	ldr	r1, [pc, #136]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048da:	4b20      	ldr	r3, [pc, #128]	@ (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e032      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f8:	4b19      	ldr	r3, [pc, #100]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4916      	ldr	r1, [pc, #88]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004906:	4313      	orrs	r3, r2
 8004908:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004916:	4b12      	ldr	r3, [pc, #72]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	490e      	ldr	r1, [pc, #56]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004926:	4313      	orrs	r3, r2
 8004928:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800492a:	f000 f821 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 800492e:	4602      	mov	r2, r0
 8004930:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	490a      	ldr	r1, [pc, #40]	@ (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	5ccb      	ldrb	r3, [r1, r3]
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	4a09      	ldr	r2, [pc, #36]	@ (8004968 <HAL_RCC_ClockConfig+0x1cc>)
 8004944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004946:	4b09      	ldr	r3, [pc, #36]	@ (800496c <HAL_RCC_ClockConfig+0x1d0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd fa90 	bl	8001e70 <HAL_InitTick>

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40022000 	.word	0x40022000
 8004960:	40021000 	.word	0x40021000
 8004964:	0800a090 	.word	0x0800a090
 8004968:	20000030 	.word	0x20000030
 800496c:	20000034 	.word	0x20000034

08004970 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800498a:	4b1e      	ldr	r3, [pc, #120]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0x94>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b04      	cmp	r3, #4
 8004998:	d002      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x30>
 800499a:	2b08      	cmp	r3, #8
 800499c:	d003      	beq.n	80049a6 <HAL_RCC_GetSysClockFreq+0x36>
 800499e:	e027      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049a0:	4b19      	ldr	r3, [pc, #100]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80049a2:	613b      	str	r3, [r7, #16]
      break;
 80049a4:	e027      	b.n	80049f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	0c9b      	lsrs	r3, r3, #18
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	4a17      	ldr	r2, [pc, #92]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x9c>)
 80049b0:	5cd3      	ldrb	r3, [r2, r3]
 80049b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d010      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049be:	4b11      	ldr	r3, [pc, #68]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0x94>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	0c5b      	lsrs	r3, r3, #17
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	4a11      	ldr	r2, [pc, #68]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xa0>)
 80049ca:	5cd3      	ldrb	r3, [r2, r3]
 80049cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80049d2:	fb03 f202 	mul.w	r2, r3, r2
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	e004      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049e4:	fb02 f303 	mul.w	r3, r2, r3
 80049e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	613b      	str	r3, [r7, #16]
      break;
 80049ee:	e002      	b.n	80049f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049f0:	4b05      	ldr	r3, [pc, #20]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80049f2:	613b      	str	r3, [r7, #16]
      break;
 80049f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049f6:	693b      	ldr	r3, [r7, #16]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40021000 	.word	0x40021000
 8004a08:	007a1200 	.word	0x007a1200
 8004a0c:	0800a0a8 	.word	0x0800a0a8
 8004a10:	0800a0b8 	.word	0x0800a0b8
 8004a14:	003d0900 	.word	0x003d0900

08004a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a1c:	4b02      	ldr	r3, [pc, #8]	@ (8004a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr
 8004a28:	20000030 	.word	0x20000030

08004a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a30:	f7ff fff2 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b05      	ldr	r3, [pc, #20]	@ (8004a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	0a1b      	lsrs	r3, r3, #8
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	4903      	ldr	r1, [pc, #12]	@ (8004a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a42:	5ccb      	ldrb	r3, [r1, r3]
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	0800a0a0 	.word	0x0800a0a0

08004a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a58:	f7ff ffde 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b05      	ldr	r3, [pc, #20]	@ (8004a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	0adb      	lsrs	r3, r3, #11
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	4903      	ldr	r1, [pc, #12]	@ (8004a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a6a:	5ccb      	ldrb	r3, [r1, r3]
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40021000 	.word	0x40021000
 8004a78:	0800a0a0 	.word	0x0800a0a0

08004a7c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	220f      	movs	r2, #15
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a8c:	4b11      	ldr	r3, [pc, #68]	@ (8004ad4 <HAL_RCC_GetClockConfig+0x58>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 0203 	and.w	r2, r3, #3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a98:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad4 <HAL_RCC_GetClockConfig+0x58>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <HAL_RCC_GetClockConfig+0x58>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ab0:	4b08      	ldr	r3, [pc, #32]	@ (8004ad4 <HAL_RCC_GetClockConfig+0x58>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	08db      	lsrs	r3, r3, #3
 8004ab6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004abe:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0207 	and.w	r2, r3, #7
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40022000 	.word	0x40022000

08004adc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b10 <RCC_Delay+0x34>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8004b14 <RCC_Delay+0x38>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	0a5b      	lsrs	r3, r3, #9
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004af8:	bf00      	nop
  }
  while (Delay --);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1e5a      	subs	r2, r3, #1
 8004afe:	60fa      	str	r2, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f9      	bne.n	8004af8 <RCC_Delay+0x1c>
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	20000030 	.word	0x20000030
 8004b14:	10624dd3 	.word	0x10624dd3

08004b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d07d      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b34:	2300      	movs	r3, #0
 8004b36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b38:	4b4f      	ldr	r3, [pc, #316]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10d      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b44:	4b4c      	ldr	r3, [pc, #304]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	4a4b      	ldr	r2, [pc, #300]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b4e:	61d3      	str	r3, [r2, #28]
 8004b50:	4b49      	ldr	r3, [pc, #292]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b60:	4b46      	ldr	r3, [pc, #280]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d118      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b6c:	4b43      	ldr	r3, [pc, #268]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a42      	ldr	r2, [pc, #264]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b78:	f7fd fb26 	bl	80021c8 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7e:	e008      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b80:	f7fd fb22 	bl	80021c8 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	@ 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e06d      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b92:	4b3a      	ldr	r3, [pc, #232]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b9e:	4b36      	ldr	r3, [pc, #216]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ba6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d02e      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d027      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bd2:	4a29      	ldr	r2, [pc, #164]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d014      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be2:	f7fd faf1 	bl	80021c8 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be8:	e00a      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bea:	f7fd faed 	bl	80021c8 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e036      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c00:	4b1d      	ldr	r3, [pc, #116]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0ee      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4917      	ldr	r1, [pc, #92]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c1e:	7dfb      	ldrb	r3, [r7, #23]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d105      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c24:	4b14      	ldr	r3, [pc, #80]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	4a13      	ldr	r2, [pc, #76]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	490b      	ldr	r1, [pc, #44]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c5a:	4b07      	ldr	r3, [pc, #28]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	4904      	ldr	r1, [pc, #16]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	40007000 	.word	0x40007000
 8004c80:	42420440 	.word	0x42420440

08004c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e041      	b.n	8004d1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f839 	bl	8004d22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	f000 f99c 	bl	8005000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d001      	beq.n	8004d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e03a      	b.n	8004dc2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a18      	ldr	r2, [pc, #96]	@ (8004dcc <HAL_TIM_Base_Start_IT+0x98>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00e      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x58>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d76:	d009      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x58>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a14      	ldr	r2, [pc, #80]	@ (8004dd0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x58>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a13      	ldr	r2, [pc, #76]	@ (8004dd4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d111      	bne.n	8004db0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b06      	cmp	r3, #6
 8004d9c:	d010      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0201 	orr.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dae:	e007      	b.n	8004dc0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	40000800 	.word	0x40000800

08004dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d020      	beq.n	8004e3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01b      	beq.n	8004e3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0202 	mvn.w	r2, #2
 8004e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f8d1 	bl	8004fca <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f8c4 	bl	8004fb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f8d3 	bl	8004fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d020      	beq.n	8004e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01b      	beq.n	8004e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0204 	mvn.w	r2, #4
 8004e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f8ab 	bl	8004fca <HAL_TIM_IC_CaptureCallback>
 8004e74:	e005      	b.n	8004e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f89e 	bl	8004fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f8ad 	bl	8004fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d020      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01b      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0208 	mvn.w	r2, #8
 8004ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f885 	bl	8004fca <HAL_TIM_IC_CaptureCallback>
 8004ec0:	e005      	b.n	8004ece <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f878 	bl	8004fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f887 	bl	8004fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d020      	beq.n	8004f20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01b      	beq.n	8004f20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0210 	mvn.w	r2, #16
 8004ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f85f 	bl	8004fca <HAL_TIM_IC_CaptureCallback>
 8004f0c:	e005      	b.n	8004f1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f852 	bl	8004fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f861 	bl	8004fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00c      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0201 	mvn.w	r2, #1
 8004f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fc fe4c 	bl	8001bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00c      	beq.n	8004f68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f8c3 	bl	80050ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00c      	beq.n	8004f8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d007      	beq.n	8004f8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f831 	bl	8004fee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00c      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d007      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0220 	mvn.w	r2, #32
 8004fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f896 	bl	80050dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fb0:	bf00      	nop
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr

08004fca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr

08004fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr

08004fee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr

08005000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a2f      	ldr	r2, [pc, #188]	@ (80050d0 <TIM_Base_SetConfig+0xd0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d00b      	beq.n	8005030 <TIM_Base_SetConfig+0x30>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501e:	d007      	beq.n	8005030 <TIM_Base_SetConfig+0x30>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a2c      	ldr	r2, [pc, #176]	@ (80050d4 <TIM_Base_SetConfig+0xd4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <TIM_Base_SetConfig+0x30>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a2b      	ldr	r2, [pc, #172]	@ (80050d8 <TIM_Base_SetConfig+0xd8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d108      	bne.n	8005042 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a22      	ldr	r2, [pc, #136]	@ (80050d0 <TIM_Base_SetConfig+0xd0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00b      	beq.n	8005062 <TIM_Base_SetConfig+0x62>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005050:	d007      	beq.n	8005062 <TIM_Base_SetConfig+0x62>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a1f      	ldr	r2, [pc, #124]	@ (80050d4 <TIM_Base_SetConfig+0xd4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_Base_SetConfig+0x62>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a1e      	ldr	r2, [pc, #120]	@ (80050d8 <TIM_Base_SetConfig+0xd8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d108      	bne.n	8005074 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a0d      	ldr	r2, [pc, #52]	@ (80050d0 <TIM_Base_SetConfig+0xd0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d103      	bne.n	80050a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f023 0201 	bic.w	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	611a      	str	r2, [r3, #16]
  }
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr
 80050d0:	40012c00 	.word	0x40012c00
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800

080050dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr

080050ee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bc80      	pop	{r7}
 80050fe:	4770      	bx	lr

08005100 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e042      	b.n	8005198 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fc fe4e 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2224      	movs	r2, #36	@ 0x24
 8005130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005142:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fdb7 	bl	8005cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005158:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695a      	ldr	r2, [r3, #20]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005168:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005178:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	@ 0x28
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	4613      	mov	r3, r2
 80051ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d175      	bne.n	80052ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_UART_Transmit+0x2c>
 80051c6:	88fb      	ldrh	r3, [r7, #6]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e06e      	b.n	80052ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2221      	movs	r2, #33	@ 0x21
 80051da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051de:	f7fc fff3 	bl	80021c8 <HAL_GetTick>
 80051e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	88fa      	ldrh	r2, [r7, #6]
 80051e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	88fa      	ldrh	r2, [r7, #6]
 80051ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f8:	d108      	bne.n	800520c <HAL_UART_Transmit+0x6c>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d104      	bne.n	800520c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	e003      	b.n	8005214 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005214:	e02e      	b.n	8005274 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2200      	movs	r2, #0
 800521e:	2180      	movs	r1, #128	@ 0x80
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 fb1c 	bl	800585e <UART_WaitOnFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e03a      	b.n	80052ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10b      	bne.n	8005256 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800524c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	3302      	adds	r3, #2
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	e007      	b.n	8005266 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	781a      	ldrb	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	3301      	adds	r3, #1
 8005264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1cb      	bne.n	8005216 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2200      	movs	r2, #0
 8005286:	2140      	movs	r1, #64	@ 0x40
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 fae8 	bl	800585e <UART_WaitOnFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e006      	b.n	80052ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e000      	b.n	80052ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052ac:	2302      	movs	r3, #2
  }
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	4613      	mov	r3, r2
 80052c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	d112      	bne.n	80052f6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_UART_Receive_IT+0x26>
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e00b      	b.n	80052f8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	461a      	mov	r2, r3
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fb0f 	bl	8005910 <UART_Start_Receive_IT>
 80052f2:	4603      	mov	r3, r0
 80052f4:	e000      	b.n	80052f8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80052f6:	2302      	movs	r3, #2
  }
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b0ba      	sub	sp, #232	@ 0xe8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005326:	2300      	movs	r3, #0
 8005328:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800532c:	2300      	movs	r3, #0
 800532e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800533e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10f      	bne.n	8005366 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d009      	beq.n	8005366 <HAL_UART_IRQHandler+0x66>
 8005352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fbec 	bl	8005b3c <UART_Receive_IT>
      return;
 8005364:	e25b      	b.n	800581e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 80de 	beq.w	800552c <HAL_UART_IRQHandler+0x22c>
 8005370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800537c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005380:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 80d1 	beq.w	800552c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800538a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00b      	beq.n	80053ae <HAL_UART_IRQHandler+0xae>
 8005396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800539a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a6:	f043 0201 	orr.w	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <HAL_UART_IRQHandler+0xd2>
 80053ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ca:	f043 0202 	orr.w	r2, r3, #2
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <HAL_UART_IRQHandler+0xf6>
 80053de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d005      	beq.n	80053f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ee:	f043 0204 	orr.w	r2, r3, #4
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d011      	beq.n	8005426 <HAL_UART_IRQHandler+0x126>
 8005402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b00      	cmp	r3, #0
 800540c:	d105      	bne.n	800541a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800540e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541e:	f043 0208 	orr.w	r2, r3, #8
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 81f2 	beq.w	8005814 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d008      	beq.n	800544e <HAL_UART_IRQHandler+0x14e>
 800543c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005440:	f003 0320 	and.w	r3, r3, #32
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fb77 	bl	8005b3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	bf14      	ite	ne
 800545c:	2301      	movne	r3, #1
 800545e:	2300      	moveq	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d103      	bne.n	800547a <HAL_UART_IRQHandler+0x17a>
 8005472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005476:	2b00      	cmp	r3, #0
 8005478:	d04f      	beq.n	800551a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fa81 	bl	8005982 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	d041      	beq.n	8005512 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3314      	adds	r3, #20
 8005494:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3314      	adds	r3, #20
 80054b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80054be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80054c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1d9      	bne.n	800548e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d013      	beq.n	800550a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e6:	4a7e      	ldr	r2, [pc, #504]	@ (80056e0 <HAL_UART_IRQHandler+0x3e0>)
 80054e8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fd fad8 	bl	8002aa4 <HAL_DMA_Abort_IT>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d016      	beq.n	8005528 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005504:	4610      	mov	r0, r2
 8005506:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005508:	e00e      	b.n	8005528 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f993 	bl	8005836 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005510:	e00a      	b.n	8005528 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f98f 	bl	8005836 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005518:	e006      	b.n	8005528 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f98b 	bl	8005836 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005526:	e175      	b.n	8005814 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005528:	bf00      	nop
    return;
 800552a:	e173      	b.n	8005814 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005530:	2b01      	cmp	r3, #1
 8005532:	f040 814f 	bne.w	80057d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 8148 	beq.w	80057d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8141 	beq.w	80057d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005552:	2300      	movs	r3, #0
 8005554:	60bb      	str	r3, [r7, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	60bb      	str	r3, [r7, #8]
 8005566:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 80b6 	beq.w	80056e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005584:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8145 	beq.w	8005818 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005596:	429a      	cmp	r2, r3
 8005598:	f080 813e 	bcs.w	8005818 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	f000 8088 	beq.w	80056c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	330c      	adds	r3, #12
 80055d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80055dc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1d9      	bne.n	80055b0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3314      	adds	r3, #20
 8005602:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800560c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800560e:	f023 0301 	bic.w	r3, r3, #1
 8005612:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3314      	adds	r3, #20
 800561c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005620:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005624:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005628:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005632:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e1      	bne.n	80055fc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3314      	adds	r3, #20
 800563e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005642:	e853 3f00 	ldrex	r3, [r3]
 8005646:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005648:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800564a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800564e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3314      	adds	r3, #20
 8005658:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800565c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800565e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005662:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005664:	e841 2300 	strex	r3, r2, [r1]
 8005668:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800566a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e3      	bne.n	8005638 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	330c      	adds	r3, #12
 8005684:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800568e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005690:	f023 0310 	bic.w	r3, r3, #16
 8005694:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	330c      	adds	r3, #12
 800569e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80056a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80056a4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e3      	bne.n	800567e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fd f9b7 	bl	8002a2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f8b6 	bl	8005848 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056dc:	e09c      	b.n	8005818 <HAL_UART_IRQHandler+0x518>
 80056de:	bf00      	nop
 80056e0:	08005a47 	.word	0x08005a47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 808e 	beq.w	800581c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005700:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 8089 	beq.w	800581c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	330c      	adds	r3, #12
 8005710:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800571a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800571c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005720:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800572e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005730:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005734:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800573c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e3      	bne.n	800570a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3314      	adds	r3, #20
 8005748:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	623b      	str	r3, [r7, #32]
   return(result);
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	f023 0301 	bic.w	r3, r3, #1
 8005758:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3314      	adds	r3, #20
 8005762:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005766:	633a      	str	r2, [r7, #48]	@ 0x30
 8005768:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800576c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e3      	bne.n	8005742 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	330c      	adds	r3, #12
 800578e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	60fb      	str	r3, [r7, #12]
   return(result);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0310 	bic.w	r3, r3, #16
 800579e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	330c      	adds	r3, #12
 80057a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80057ac:	61fa      	str	r2, [r7, #28]
 80057ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	69b9      	ldr	r1, [r7, #24]
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	617b      	str	r3, [r7, #20]
   return(result);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e3      	bne.n	8005788 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f83b 	bl	8005848 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057d2:	e023      	b.n	800581c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <HAL_UART_IRQHandler+0x4f4>
 80057e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f93e 	bl	8005a6e <UART_Transmit_IT>
    return;
 80057f2:	e014      	b.n	800581e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00e      	beq.n	800581e <HAL_UART_IRQHandler+0x51e>
 8005800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d008      	beq.n	800581e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f97d 	bl	8005b0c <UART_EndTransmit_IT>
    return;
 8005812:	e004      	b.n	800581e <HAL_UART_IRQHandler+0x51e>
    return;
 8005814:	bf00      	nop
 8005816:	e002      	b.n	800581e <HAL_UART_IRQHandler+0x51e>
      return;
 8005818:	bf00      	nop
 800581a:	e000      	b.n	800581e <HAL_UART_IRQHandler+0x51e>
      return;
 800581c:	bf00      	nop
  }
}
 800581e:	37e8      	adds	r7, #232	@ 0xe8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr

08005836 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr

0800585e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b086      	sub	sp, #24
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	603b      	str	r3, [r7, #0]
 800586a:	4613      	mov	r3, r2
 800586c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800586e:	e03b      	b.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005876:	d037      	beq.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005878:	f7fc fca6 	bl	80021c8 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	6a3a      	ldr	r2, [r7, #32]
 8005884:	429a      	cmp	r2, r3
 8005886:	d302      	bcc.n	800588e <UART_WaitOnFlagUntilTimeout+0x30>
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e03a      	b.n	8005908 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d023      	beq.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b80      	cmp	r3, #128	@ 0x80
 80058a4:	d020      	beq.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b40      	cmp	r3, #64	@ 0x40
 80058aa:	d01d      	beq.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b08      	cmp	r3, #8
 80058b8:	d116      	bne.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	617b      	str	r3, [r7, #20]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 f856 	bl	8005982 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2208      	movs	r2, #8
 80058da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e00f      	b.n	8005908 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	4013      	ands	r3, r2
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	bf0c      	ite	eq
 80058f8:	2301      	moveq	r3, #1
 80058fa:	2300      	movne	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	461a      	mov	r2, r3
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	429a      	cmp	r2, r3
 8005904:	d0b4      	beq.n	8005870 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3718      	adds	r7, #24
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	88fa      	ldrh	r2, [r7, #6]
 8005928:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	88fa      	ldrh	r2, [r7, #6]
 800592e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2222      	movs	r2, #34	@ 0x22
 800593a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005954:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0220 	orr.w	r2, r2, #32
 8005974:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr

08005982 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005982:	b480      	push	{r7}
 8005984:	b095      	sub	sp, #84	@ 0x54
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	330c      	adds	r3, #12
 8005990:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	330c      	adds	r3, #12
 80059a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80059ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e5      	bne.n	800598a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3314      	adds	r3, #20
 80059c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	f023 0301 	bic.w	r3, r3, #1
 80059d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3314      	adds	r3, #20
 80059dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e5      	bne.n	80059be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d119      	bne.n	8005a2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	330c      	adds	r3, #12
 8005a00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f023 0310 	bic.w	r3, r3, #16
 8005a10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	330c      	adds	r3, #12
 8005a18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a1a:	61ba      	str	r2, [r7, #24]
 8005a1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1e:	6979      	ldr	r1, [r7, #20]
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	e841 2300 	strex	r3, r2, [r1]
 8005a26:	613b      	str	r3, [r7, #16]
   return(result);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1e5      	bne.n	80059fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a3c:	bf00      	nop
 8005a3e:	3754      	adds	r7, #84	@ 0x54
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr

08005a46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff fee8 	bl	8005836 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b21      	cmp	r3, #33	@ 0x21
 8005a80:	d13e      	bne.n	8005b00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a8a:	d114      	bne.n	8005ab6 <UART_Transmit_IT+0x48>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d110      	bne.n	8005ab6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aa8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	1c9a      	adds	r2, r3, #2
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	621a      	str	r2, [r3, #32]
 8005ab4:	e008      	b.n	8005ac8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	1c59      	adds	r1, r3, #1
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6211      	str	r1, [r2, #32]
 8005ac0:	781a      	ldrb	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10f      	bne.n	8005afc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005aea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005afa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e000      	b.n	8005b02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bc80      	pop	{r7}
 8005b0a:	4770      	bx	lr

08005b0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff fe79 	bl	8005824 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08c      	sub	sp, #48	@ 0x30
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b22      	cmp	r3, #34	@ 0x22
 8005b4e:	f040 80ae 	bne.w	8005cae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b5a:	d117      	bne.n	8005b8c <UART_Receive_IT+0x50>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d113      	bne.n	8005b8c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b84:	1c9a      	adds	r2, r3, #2
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b8a:	e026      	b.n	8005bda <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b9e:	d007      	beq.n	8005bb0 <UART_Receive_IT+0x74>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10a      	bne.n	8005bbe <UART_Receive_IT+0x82>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d106      	bne.n	8005bbe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	e008      	b.n	8005bd0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	4619      	mov	r1, r3
 8005be8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d15d      	bne.n	8005caa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0220 	bic.w	r2, r2, #32
 8005bfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695a      	ldr	r2, [r3, #20]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0201 	bic.w	r2, r2, #1
 8005c1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d135      	bne.n	8005ca0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	613b      	str	r3, [r7, #16]
   return(result);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f023 0310 	bic.w	r3, r3, #16
 8005c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c5a:	623a      	str	r2, [r7, #32]
 8005c5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	69f9      	ldr	r1, [r7, #28]
 8005c60:	6a3a      	ldr	r2, [r7, #32]
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e5      	bne.n	8005c3a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	d10a      	bne.n	8005c92 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7ff fdd5 	bl	8005848 <HAL_UARTEx_RxEventCallback>
 8005c9e:	e002      	b.n	8005ca6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fb fb8d 	bl	80013c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e002      	b.n	8005cb0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e000      	b.n	8005cb0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005cae:	2302      	movs	r3, #2
  }
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3730      	adds	r7, #48	@ 0x30
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005cf2:	f023 030c 	bic.w	r3, r3, #12
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6812      	ldr	r2, [r2, #0]
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699a      	ldr	r2, [r3, #24]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8005dcc <UART_SetConfig+0x114>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d103      	bne.n	8005d28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d20:	f7fe fe98 	bl	8004a54 <HAL_RCC_GetPCLK2Freq>
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	e002      	b.n	8005d2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d28:	f7fe fe80 	bl	8004a2c <HAL_RCC_GetPCLK1Freq>
 8005d2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	009a      	lsls	r2, r3, #2
 8005d38:	441a      	add	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d44:	4a22      	ldr	r2, [pc, #136]	@ (8005dd0 <UART_SetConfig+0x118>)
 8005d46:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	0119      	lsls	r1, r3, #4
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	009a      	lsls	r2, r3, #2
 8005d58:	441a      	add	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d64:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd0 <UART_SetConfig+0x118>)
 8005d66:	fba3 0302 	umull	r0, r3, r3, r2
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	2064      	movs	r0, #100	@ 0x64
 8005d6e:	fb00 f303 	mul.w	r3, r0, r3
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	3332      	adds	r3, #50	@ 0x32
 8005d78:	4a15      	ldr	r2, [pc, #84]	@ (8005dd0 <UART_SetConfig+0x118>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d84:	4419      	add	r1, r3
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009a      	lsls	r2, r3, #2
 8005d90:	441a      	add	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd0 <UART_SetConfig+0x118>)
 8005d9e:	fba3 0302 	umull	r0, r3, r3, r2
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	2064      	movs	r0, #100	@ 0x64
 8005da6:	fb00 f303 	mul.w	r3, r0, r3
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	3332      	adds	r3, #50	@ 0x32
 8005db0:	4a07      	ldr	r2, [pc, #28]	@ (8005dd0 <UART_SetConfig+0x118>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	f003 020f 	and.w	r2, r3, #15
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005dc4:	bf00      	nop
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	40013800 	.word	0x40013800
 8005dd0:	51eb851f 	.word	0x51eb851f

08005dd4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005de6:	2b84      	cmp	r3, #132	@ 0x84
 8005de8:	d005      	beq.n	8005df6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005dea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	3303      	adds	r3, #3
 8005df4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005df6:	68fb      	ldr	r3, [r7, #12]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bc80      	pop	{r7}
 8005e00:	4770      	bx	lr

08005e02 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e08:	f3ef 8305 	mrs	r3, IPSR
 8005e0c:	607b      	str	r3, [r7, #4]
  return(result);
 8005e0e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	bf14      	ite	ne
 8005e14:	2301      	movne	r3, #1
 8005e16:	2300      	moveq	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005e28:	f001 fa0c 	bl	8007244 <vTaskStartScheduler>
  
  return osOK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e34:	b089      	sub	sp, #36	@ 0x24
 8005e36:	af04      	add	r7, sp, #16
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d020      	beq.n	8005e86 <osThreadCreate+0x54>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01c      	beq.n	8005e86 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685c      	ldr	r4, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691e      	ldr	r6, [r3, #16]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff ffb8 	bl	8005dd4 <makeFreeRtosPriority>
 8005e64:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e6e:	9202      	str	r2, [sp, #8]
 8005e70:	9301      	str	r3, [sp, #4]
 8005e72:	9100      	str	r1, [sp, #0]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	4632      	mov	r2, r6
 8005e78:	4629      	mov	r1, r5
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f001 f815 	bl	8006eaa <xTaskCreateStatic>
 8005e80:	4603      	mov	r3, r0
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e01c      	b.n	8005ec0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685c      	ldr	r4, [r3, #4]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e92:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff ff9a 	bl	8005dd4 <makeFreeRtosPriority>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	f107 030c 	add.w	r3, r7, #12
 8005ea6:	9301      	str	r3, [sp, #4]
 8005ea8:	9200      	str	r2, [sp, #0]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	4632      	mov	r2, r6
 8005eae:	4629      	mov	r1, r5
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f001 f85a 	bl	8006f6a <xTaskCreate>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d001      	beq.n	8005ec0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e000      	b.n	8005ec2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005eca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <osDelay+0x16>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	e000      	b.n	8005ee2 <osDelay+0x18>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 f978 	bl	80071d8 <vTaskDelay>
  
  return osOK;
 8005ee8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d007      	beq.n	8005f12 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	4619      	mov	r1, r3
 8005f08:	2001      	movs	r0, #1
 8005f0a:	f000 fb68 	bl	80065de <xQueueCreateMutexStatic>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	e003      	b.n	8005f1a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005f12:	2001      	movs	r0, #1
 8005f14:	f000 fb4b 	bl	80065ae <xQueueCreateMutex>
 8005f18:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
	...

08005f24 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <osMutexWait+0x18>
    return osErrorParameter;
 8005f38:	2380      	movs	r3, #128	@ 0x80
 8005f3a:	e03a      	b.n	8005fb2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d103      	bne.n	8005f50 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005f48:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	e009      	b.n	8005f64 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d006      	beq.n	8005f64 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <osMutexWait+0x40>
      ticks = 1;
 8005f60:	2301      	movs	r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005f64:	f7ff ff4d 	bl	8005e02 <inHandlerMode>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d017      	beq.n	8005f9e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005f6e:	f107 0308 	add.w	r3, r7, #8
 8005f72:	461a      	mov	r2, r3
 8005f74:	2100      	movs	r1, #0
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fdee 	bl	8006b58 <xQueueReceiveFromISR>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d001      	beq.n	8005f86 <osMutexWait+0x62>
      return osErrorOS;
 8005f82:	23ff      	movs	r3, #255	@ 0xff
 8005f84:	e015      	b.n	8005fb2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d011      	beq.n	8005fb0 <osMutexWait+0x8c>
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fbc <osMutexWait+0x98>)
 8005f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	e008      	b.n	8005fb0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fcc9 	bl	8006938 <xQueueSemaphoreTake>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d001      	beq.n	8005fb0 <osMutexWait+0x8c>
    return osErrorOS;
 8005fac:	23ff      	movs	r3, #255	@ 0xff
 8005fae:	e000      	b.n	8005fb2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	e000ed04 	.word	0xe000ed04

08005fc0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005fd0:	f7ff ff17 	bl	8005e02 <inHandlerMode>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d016      	beq.n	8006008 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005fda:	f107 0308 	add.w	r3, r7, #8
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fc19 	bl	8006818 <xQueueGiveFromISR>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d001      	beq.n	8005ff0 <osMutexRelease+0x30>
      return osErrorOS;
 8005fec:	23ff      	movs	r3, #255	@ 0xff
 8005fee:	e017      	b.n	8006020 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d013      	beq.n	800601e <osMutexRelease+0x5e>
 8005ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8006028 <osMutexRelease+0x68>)
 8005ff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	e00a      	b.n	800601e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006008:	2300      	movs	r3, #0
 800600a:	2200      	movs	r2, #0
 800600c:	2100      	movs	r1, #0
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fb00 	bl	8006614 <xQueueGenericSend>
 8006014:	4603      	mov	r3, r0
 8006016:	2b01      	cmp	r3, #1
 8006018:	d001      	beq.n	800601e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800601a:	23ff      	movs	r3, #255	@ 0xff
 800601c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800601e:	68fb      	ldr	r3, [r7, #12]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	e000ed04 	.word	0xe000ed04

0800602c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af02      	add	r7, sp, #8
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00f      	beq.n	800605e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d10a      	bne.n	800605a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2203      	movs	r2, #3
 800604a:	9200      	str	r2, [sp, #0]
 800604c:	2200      	movs	r2, #0
 800604e:	2100      	movs	r1, #0
 8006050:	2001      	movs	r0, #1
 8006052:	f000 f9bb 	bl	80063cc <xQueueGenericCreateStatic>
 8006056:	4603      	mov	r3, r0
 8006058:	e016      	b.n	8006088 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800605a:	2300      	movs	r3, #0
 800605c:	e014      	b.n	8006088 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d110      	bne.n	8006086 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006064:	2203      	movs	r2, #3
 8006066:	2100      	movs	r1, #0
 8006068:	2001      	movs	r0, #1
 800606a:	f000 fa2c 	bl	80064c6 <xQueueGenericCreate>
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <osSemaphoreCreate+0x56>
 8006076:	2300      	movs	r3, #0
 8006078:	2200      	movs	r2, #0
 800607a:	2100      	movs	r1, #0
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 fac9 	bl	8006614 <xQueueGenericSend>
      return sema;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	e000      	b.n	8006088 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006086:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800609a:	2300      	movs	r3, #0
 800609c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80060a4:	2380      	movs	r3, #128	@ 0x80
 80060a6:	e03a      	b.n	800611e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b2:	d103      	bne.n	80060bc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80060b4:	f04f 33ff 	mov.w	r3, #4294967295
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	e009      	b.n	80060d0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d006      	beq.n	80060d0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <osSemaphoreWait+0x40>
      ticks = 1;
 80060cc:	2301      	movs	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80060d0:	f7ff fe97 	bl	8005e02 <inHandlerMode>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d017      	beq.n	800610a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80060da:	f107 0308 	add.w	r3, r7, #8
 80060de:	461a      	mov	r2, r3
 80060e0:	2100      	movs	r1, #0
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fd38 	bl	8006b58 <xQueueReceiveFromISR>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d001      	beq.n	80060f2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80060ee:	23ff      	movs	r3, #255	@ 0xff
 80060f0:	e015      	b.n	800611e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d011      	beq.n	800611c <osSemaphoreWait+0x8c>
 80060f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006128 <osSemaphoreWait+0x98>)
 80060fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	e008      	b.n	800611c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800610a:	68f9      	ldr	r1, [r7, #12]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fc13 	bl	8006938 <xQueueSemaphoreTake>
 8006112:	4603      	mov	r3, r0
 8006114:	2b01      	cmp	r3, #1
 8006116:	d001      	beq.n	800611c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006118:	23ff      	movs	r3, #255	@ 0xff
 800611a:	e000      	b.n	800611e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006138:	2300      	movs	r3, #0
 800613a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800613c:	f7ff fe61 	bl	8005e02 <inHandlerMode>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d016      	beq.n	8006174 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006146:	f107 0308 	add.w	r3, r7, #8
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fb63 	bl	8006818 <xQueueGiveFromISR>
 8006152:	4603      	mov	r3, r0
 8006154:	2b01      	cmp	r3, #1
 8006156:	d001      	beq.n	800615c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006158:	23ff      	movs	r3, #255	@ 0xff
 800615a:	e017      	b.n	800618c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d013      	beq.n	800618a <osSemaphoreRelease+0x5e>
 8006162:	4b0c      	ldr	r3, [pc, #48]	@ (8006194 <osSemaphoreRelease+0x68>)
 8006164:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	e00a      	b.n	800618a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006174:	2300      	movs	r3, #0
 8006176:	2200      	movs	r2, #0
 8006178:	2100      	movs	r1, #0
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fa4a 	bl	8006614 <xQueueGenericSend>
 8006180:	4603      	mov	r3, r0
 8006182:	2b01      	cmp	r3, #1
 8006184:	d001      	beq.n	800618a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006186:	23ff      	movs	r3, #255	@ 0xff
 8006188:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800618a:	68fb      	ldr	r3, [r7, #12]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	e000ed04 	.word	0xe000ed04

08006198 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f103 0208 	add.w	r2, r3, #8
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f04f 32ff 	mov.w	r2, #4294967295
 80061b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f103 0208 	add.w	r2, r3, #8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f103 0208 	add.w	r2, r3, #8
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bc80      	pop	{r7}
 80061d4:	4770      	bx	lr

080061d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr

080061ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061ee:	b480      	push	{r7}
 80061f0:	b085      	sub	sp, #20
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	601a      	str	r2, [r3, #0]
}
 800622a:	bf00      	nop
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr

08006234 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624a:	d103      	bne.n	8006254 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	e00c      	b.n	800626e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3308      	adds	r3, #8
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	e002      	b.n	8006262 <vListInsert+0x2e>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	429a      	cmp	r2, r3
 800626c:	d2f6      	bcs.n	800625c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	601a      	str	r2, [r3, #0]
}
 800629a:	bf00      	nop
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr

080062a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6892      	ldr	r2, [r2, #8]
 80062ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6852      	ldr	r2, [r2, #4]
 80062c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d103      	bne.n	80062d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	1e5a      	subs	r2, r3, #1
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bc80      	pop	{r7}
 80062f4:	4770      	bx	lr
	...

080062f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10b      	bne.n	8006324 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800631e:	bf00      	nop
 8006320:	bf00      	nop
 8006322:	e7fd      	b.n	8006320 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006324:	f001 feb2 	bl	800808c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006330:	68f9      	ldr	r1, [r7, #12]
 8006332:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006334:	fb01 f303 	mul.w	r3, r1, r3
 8006338:	441a      	add	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006354:	3b01      	subs	r3, #1
 8006356:	68f9      	ldr	r1, [r7, #12]
 8006358:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800635a:	fb01 f303 	mul.w	r3, r1, r3
 800635e:	441a      	add	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	22ff      	movs	r2, #255	@ 0xff
 8006368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	22ff      	movs	r2, #255	@ 0xff
 8006370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d114      	bne.n	80063a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d01a      	beq.n	80063b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3310      	adds	r3, #16
 8006386:	4618      	mov	r0, r3
 8006388:	f001 f9a6 	bl	80076d8 <xTaskRemoveFromEventList>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d012      	beq.n	80063b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006392:	4b0d      	ldr	r3, [pc, #52]	@ (80063c8 <xQueueGenericReset+0xd0>)
 8006394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	e009      	b.n	80063b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3310      	adds	r3, #16
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff fef5 	bl	8006198 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3324      	adds	r3, #36	@ 0x24
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff fef0 	bl	8006198 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063b8:	f001 fe98 	bl	80080ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80063bc:	2301      	movs	r3, #1
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08e      	sub	sp, #56	@ 0x38
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10b      	bne.n	80063f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063f2:	bf00      	nop
 80063f4:	bf00      	nop
 80063f6:	e7fd      	b.n	80063f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10b      	bne.n	8006416 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	e7fd      	b.n	8006412 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <xQueueGenericCreateStatic+0x56>
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <xQueueGenericCreateStatic+0x5a>
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <xQueueGenericCreateStatic+0x5c>
 8006426:	2300      	movs	r3, #0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10b      	bne.n	8006444 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	623b      	str	r3, [r7, #32]
}
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	e7fd      	b.n	8006440 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d102      	bne.n	8006450 <xQueueGenericCreateStatic+0x84>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <xQueueGenericCreateStatic+0x88>
 8006450:	2301      	movs	r3, #1
 8006452:	e000      	b.n	8006456 <xQueueGenericCreateStatic+0x8a>
 8006454:	2300      	movs	r3, #0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	61fb      	str	r3, [r7, #28]
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	e7fd      	b.n	800646e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006472:	2348      	movs	r3, #72	@ 0x48
 8006474:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2b48      	cmp	r3, #72	@ 0x48
 800647a:	d00b      	beq.n	8006494 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	61bb      	str	r3, [r7, #24]
}
 800648e:	bf00      	nop
 8006490:	bf00      	nop
 8006492:	e7fd      	b.n	8006490 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006494:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800649a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00d      	beq.n	80064bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80064ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f840 	bl	800653c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80064be:	4618      	mov	r0, r3
 80064c0:	3730      	adds	r7, #48	@ 0x30
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b08a      	sub	sp, #40	@ 0x28
 80064ca:	af02      	add	r7, sp, #8
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	4613      	mov	r3, r2
 80064d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10b      	bne.n	80064f2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	613b      	str	r3, [r7, #16]
}
 80064ec:	bf00      	nop
 80064ee:	bf00      	nop
 80064f0:	e7fd      	b.n	80064ee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	fb02 f303 	mul.w	r3, r2, r3
 80064fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	3348      	adds	r3, #72	@ 0x48
 8006500:	4618      	mov	r0, r3
 8006502:	f001 fec5 	bl	8008290 <pvPortMalloc>
 8006506:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d011      	beq.n	8006532 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	3348      	adds	r3, #72	@ 0x48
 8006516:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006520:	79fa      	ldrb	r2, [r7, #7]
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	4613      	mov	r3, r2
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	68b9      	ldr	r1, [r7, #8]
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f805 	bl	800653c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006532:	69bb      	ldr	r3, [r7, #24]
	}
 8006534:	4618      	mov	r0, r3
 8006536:	3720      	adds	r7, #32
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d103      	bne.n	8006558 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	e002      	b.n	800655e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800656a:	2101      	movs	r1, #1
 800656c:	69b8      	ldr	r0, [r7, #24]
 800656e:	f7ff fec3 	bl	80062f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006572:	bf00      	nop
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00e      	beq.n	80065a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800659a:	2300      	movs	r3, #0
 800659c:	2200      	movs	r2, #0
 800659e:	2100      	movs	r1, #0
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f837 	bl	8006614 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80065a6:	bf00      	nop
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b086      	sub	sp, #24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	4603      	mov	r3, r0
 80065b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80065b8:	2301      	movs	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	2300      	movs	r3, #0
 80065be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	461a      	mov	r2, r3
 80065c4:	6939      	ldr	r1, [r7, #16]
 80065c6:	6978      	ldr	r0, [r7, #20]
 80065c8:	f7ff ff7d 	bl	80064c6 <xQueueGenericCreate>
 80065cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f7ff ffd3 	bl	800657a <prvInitialiseMutex>

		return xNewQueue;
 80065d4:	68fb      	ldr	r3, [r7, #12]
	}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b088      	sub	sp, #32
 80065e2:	af02      	add	r7, sp, #8
 80065e4:	4603      	mov	r3, r0
 80065e6:	6039      	str	r1, [r7, #0]
 80065e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80065ea:	2301      	movs	r3, #1
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	2300      	movs	r3, #0
 80065f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80065f2:	79fb      	ldrb	r3, [r7, #7]
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2200      	movs	r2, #0
 80065fa:	6939      	ldr	r1, [r7, #16]
 80065fc:	6978      	ldr	r0, [r7, #20]
 80065fe:	f7ff fee5 	bl	80063cc <xQueueGenericCreateStatic>
 8006602:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f7ff ffb8 	bl	800657a <prvInitialiseMutex>

		return xNewQueue;
 800660a:	68fb      	ldr	r3, [r7, #12]
	}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08e      	sub	sp, #56	@ 0x38
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006622:	2300      	movs	r3, #0
 8006624:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800662a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10b      	bne.n	8006648 <xQueueGenericSend+0x34>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006642:	bf00      	nop
 8006644:	bf00      	nop
 8006646:	e7fd      	b.n	8006644 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d103      	bne.n	8006656 <xQueueGenericSend+0x42>
 800664e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <xQueueGenericSend+0x46>
 8006656:	2301      	movs	r3, #1
 8006658:	e000      	b.n	800665c <xQueueGenericSend+0x48>
 800665a:	2300      	movs	r3, #0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10b      	bne.n	8006678 <xQueueGenericSend+0x64>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006672:	bf00      	nop
 8006674:	bf00      	nop
 8006676:	e7fd      	b.n	8006674 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d103      	bne.n	8006686 <xQueueGenericSend+0x72>
 800667e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006682:	2b01      	cmp	r3, #1
 8006684:	d101      	bne.n	800668a <xQueueGenericSend+0x76>
 8006686:	2301      	movs	r3, #1
 8006688:	e000      	b.n	800668c <xQueueGenericSend+0x78>
 800668a:	2300      	movs	r3, #0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10b      	bne.n	80066a8 <xQueueGenericSend+0x94>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	623b      	str	r3, [r7, #32]
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	e7fd      	b.n	80066a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066a8:	f001 f9d6 	bl	8007a58 <xTaskGetSchedulerState>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d102      	bne.n	80066b8 <xQueueGenericSend+0xa4>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <xQueueGenericSend+0xa8>
 80066b8:	2301      	movs	r3, #1
 80066ba:	e000      	b.n	80066be <xQueueGenericSend+0xaa>
 80066bc:	2300      	movs	r3, #0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10b      	bne.n	80066da <xQueueGenericSend+0xc6>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	61fb      	str	r3, [r7, #28]
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
 80066d8:	e7fd      	b.n	80066d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066da:	f001 fcd7 	bl	800808c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d302      	bcc.n	80066f0 <xQueueGenericSend+0xdc>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d129      	bne.n	8006744 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066f6:	f000 fac8 	bl	8006c8a <prvCopyDataToQueue>
 80066fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006700:	2b00      	cmp	r3, #0
 8006702:	d010      	beq.n	8006726 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006706:	3324      	adds	r3, #36	@ 0x24
 8006708:	4618      	mov	r0, r3
 800670a:	f000 ffe5 	bl	80076d8 <xTaskRemoveFromEventList>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d013      	beq.n	800673c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006714:	4b3f      	ldr	r3, [pc, #252]	@ (8006814 <xQueueGenericSend+0x200>)
 8006716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	e00a      	b.n	800673c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d007      	beq.n	800673c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800672c:	4b39      	ldr	r3, [pc, #228]	@ (8006814 <xQueueGenericSend+0x200>)
 800672e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800673c:	f001 fcd6 	bl	80080ec <vPortExitCritical>
				return pdPASS;
 8006740:	2301      	movs	r3, #1
 8006742:	e063      	b.n	800680c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d103      	bne.n	8006752 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800674a:	f001 fccf 	bl	80080ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800674e:	2300      	movs	r3, #0
 8006750:	e05c      	b.n	800680c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006754:	2b00      	cmp	r3, #0
 8006756:	d106      	bne.n	8006766 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006758:	f107 0314 	add.w	r3, r7, #20
 800675c:	4618      	mov	r0, r3
 800675e:	f001 f81f 	bl	80077a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006762:	2301      	movs	r3, #1
 8006764:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006766:	f001 fcc1 	bl	80080ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800676a:	f000 fdcd 	bl	8007308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800676e:	f001 fc8d 	bl	800808c <vPortEnterCritical>
 8006772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006774:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006778:	b25b      	sxtb	r3, r3
 800677a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677e:	d103      	bne.n	8006788 <xQueueGenericSend+0x174>
 8006780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800678e:	b25b      	sxtb	r3, r3
 8006790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006794:	d103      	bne.n	800679e <xQueueGenericSend+0x18a>
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800679e:	f001 fca5 	bl	80080ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067a2:	1d3a      	adds	r2, r7, #4
 80067a4:	f107 0314 	add.w	r3, r7, #20
 80067a8:	4611      	mov	r1, r2
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 f80e 	bl	80077cc <xTaskCheckForTimeOut>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d124      	bne.n	8006800 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067b8:	f000 fb5f 	bl	8006e7a <prvIsQueueFull>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d018      	beq.n	80067f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c4:	3310      	adds	r3, #16
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4611      	mov	r1, r2
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 ff5e 	bl	800768c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80067d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067d2:	f000 faea 	bl	8006daa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80067d6:	f000 fda5 	bl	8007324 <xTaskResumeAll>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f47f af7c 	bne.w	80066da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80067e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006814 <xQueueGenericSend+0x200>)
 80067e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	e772      	b.n	80066da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80067f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067f6:	f000 fad8 	bl	8006daa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067fa:	f000 fd93 	bl	8007324 <xTaskResumeAll>
 80067fe:	e76c      	b.n	80066da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006800:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006802:	f000 fad2 	bl	8006daa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006806:	f000 fd8d 	bl	8007324 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800680a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800680c:	4618      	mov	r0, r3
 800680e:	3738      	adds	r7, #56	@ 0x38
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08e      	sub	sp, #56	@ 0x38
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10b      	bne.n	8006844 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	623b      	str	r3, [r7, #32]
}
 800683e:	bf00      	nop
 8006840:	bf00      	nop
 8006842:	e7fd      	b.n	8006840 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00b      	beq.n	8006864 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	61fb      	str	r3, [r7, #28]
}
 800685e:	bf00      	nop
 8006860:	bf00      	nop
 8006862:	e7fd      	b.n	8006860 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d103      	bne.n	8006874 <xQueueGiveFromISR+0x5c>
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <xQueueGiveFromISR+0x60>
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <xQueueGiveFromISR+0x62>
 8006878:	2300      	movs	r3, #0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10b      	bne.n	8006896 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	61bb      	str	r3, [r7, #24]
}
 8006890:	bf00      	nop
 8006892:	bf00      	nop
 8006894:	e7fd      	b.n	8006892 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006896:	f001 fcbb 	bl	8008210 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800689a:	f3ef 8211 	mrs	r2, BASEPRI
 800689e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	617a      	str	r2, [r7, #20]
 80068b0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80068b2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80068bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d22b      	bcs.n	800691e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e0:	d112      	bne.n	8006908 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d016      	beq.n	8006918 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	3324      	adds	r3, #36	@ 0x24
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fef2 	bl	80076d8 <xTaskRemoveFromEventList>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00e      	beq.n	8006918 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00b      	beq.n	8006918 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2201      	movs	r2, #1
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	e007      	b.n	8006918 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800690c:	3301      	adds	r3, #1
 800690e:	b2db      	uxtb	r3, r3
 8006910:	b25a      	sxtb	r2, r3
 8006912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006918:	2301      	movs	r3, #1
 800691a:	637b      	str	r3, [r7, #52]	@ 0x34
 800691c:	e001      	b.n	8006922 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800691e:	2300      	movs	r3, #0
 8006920:	637b      	str	r3, [r7, #52]	@ 0x34
 8006922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006924:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800692c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800692e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006930:	4618      	mov	r0, r3
 8006932:	3738      	adds	r7, #56	@ 0x38
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08e      	sub	sp, #56	@ 0x38
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006942:	2300      	movs	r3, #0
 8006944:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800694a:	2300      	movs	r3, #0
 800694c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800694e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10b      	bne.n	800696c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	623b      	str	r3, [r7, #32]
}
 8006966:	bf00      	nop
 8006968:	bf00      	nop
 800696a:	e7fd      	b.n	8006968 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800696c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00b      	beq.n	800698c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	61fb      	str	r3, [r7, #28]
}
 8006986:	bf00      	nop
 8006988:	bf00      	nop
 800698a:	e7fd      	b.n	8006988 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800698c:	f001 f864 	bl	8007a58 <xTaskGetSchedulerState>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d102      	bne.n	800699c <xQueueSemaphoreTake+0x64>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <xQueueSemaphoreTake+0x68>
 800699c:	2301      	movs	r3, #1
 800699e:	e000      	b.n	80069a2 <xQueueSemaphoreTake+0x6a>
 80069a0:	2300      	movs	r3, #0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10b      	bne.n	80069be <xQueueSemaphoreTake+0x86>
	__asm volatile
 80069a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	61bb      	str	r3, [r7, #24]
}
 80069b8:	bf00      	nop
 80069ba:	bf00      	nop
 80069bc:	e7fd      	b.n	80069ba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069be:	f001 fb65 	bl	800808c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80069c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80069c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d024      	beq.n	8006a18 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80069ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d0:	1e5a      	subs	r2, r3, #1
 80069d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d104      	bne.n	80069e8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80069de:	f001 f9e7 	bl	8007db0 <pvTaskIncrementMutexHeldCount>
 80069e2:	4602      	mov	r2, r0
 80069e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00f      	beq.n	8006a10 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f2:	3310      	adds	r3, #16
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fe6f 	bl	80076d8 <xTaskRemoveFromEventList>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d007      	beq.n	8006a10 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a00:	4b54      	ldr	r3, [pc, #336]	@ (8006b54 <xQueueSemaphoreTake+0x21c>)
 8006a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a10:	f001 fb6c 	bl	80080ec <vPortExitCritical>
				return pdPASS;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e098      	b.n	8006b4a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d112      	bne.n	8006a44 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00b      	beq.n	8006a3c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	617b      	str	r3, [r7, #20]
}
 8006a36:	bf00      	nop
 8006a38:	bf00      	nop
 8006a3a:	e7fd      	b.n	8006a38 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a3c:	f001 fb56 	bl	80080ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a40:	2300      	movs	r3, #0
 8006a42:	e082      	b.n	8006b4a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d106      	bne.n	8006a58 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a4a:	f107 030c 	add.w	r3, r7, #12
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fea6 	bl	80077a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a54:	2301      	movs	r3, #1
 8006a56:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a58:	f001 fb48 	bl	80080ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a5c:	f000 fc54 	bl	8007308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a60:	f001 fb14 	bl	800808c <vPortEnterCritical>
 8006a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a6a:	b25b      	sxtb	r3, r3
 8006a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a70:	d103      	bne.n	8006a7a <xQueueSemaphoreTake+0x142>
 8006a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a80:	b25b      	sxtb	r3, r3
 8006a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a86:	d103      	bne.n	8006a90 <xQueueSemaphoreTake+0x158>
 8006a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a90:	f001 fb2c 	bl	80080ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a94:	463a      	mov	r2, r7
 8006a96:	f107 030c 	add.w	r3, r7, #12
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fe95 	bl	80077cc <xTaskCheckForTimeOut>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d132      	bne.n	8006b0e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aa8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006aaa:	f000 f9d0 	bl	8006e4e <prvIsQueueEmpty>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d026      	beq.n	8006b02 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d109      	bne.n	8006ad0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006abc:	f001 fae6 	bl	800808c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 ffe5 	bl	8007a94 <xTaskPriorityInherit>
 8006aca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006acc:	f001 fb0e 	bl	80080ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad2:	3324      	adds	r3, #36	@ 0x24
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fdd7 	bl	800768c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ade:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ae0:	f000 f963 	bl	8006daa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ae4:	f000 fc1e 	bl	8007324 <xTaskResumeAll>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f47f af67 	bne.w	80069be <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006af0:	4b18      	ldr	r3, [pc, #96]	@ (8006b54 <xQueueSemaphoreTake+0x21c>)
 8006af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	e75d      	b.n	80069be <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b04:	f000 f951 	bl	8006daa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b08:	f000 fc0c 	bl	8007324 <xTaskResumeAll>
 8006b0c:	e757      	b.n	80069be <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b10:	f000 f94b 	bl	8006daa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b14:	f000 fc06 	bl	8007324 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b1a:	f000 f998 	bl	8006e4e <prvIsQueueEmpty>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f43f af4c 	beq.w	80069be <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00d      	beq.n	8006b48 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006b2c:	f001 faae 	bl	800808c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b32:	f000 f893 	bl	8006c5c <prvGetDisinheritPriorityAfterTimeout>
 8006b36:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 f8a6 	bl	8007c90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b44:	f001 fad2 	bl	80080ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3738      	adds	r7, #56	@ 0x38
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	e000ed04 	.word	0xe000ed04

08006b58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08e      	sub	sp, #56	@ 0x38
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10b      	bne.n	8006b86 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	623b      	str	r3, [r7, #32]
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	e7fd      	b.n	8006b82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d103      	bne.n	8006b94 <xQueueReceiveFromISR+0x3c>
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <xQueueReceiveFromISR+0x40>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e000      	b.n	8006b9a <xQueueReceiveFromISR+0x42>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10b      	bne.n	8006bb6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	61fb      	str	r3, [r7, #28]
}
 8006bb0:	bf00      	nop
 8006bb2:	bf00      	nop
 8006bb4:	e7fd      	b.n	8006bb2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bb6:	f001 fb2b 	bl	8008210 <vPortValidateInterruptPriority>
	__asm volatile
 8006bba:	f3ef 8211 	mrs	r2, BASEPRI
 8006bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	61ba      	str	r2, [r7, #24]
 8006bd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006bd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bda:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d02f      	beq.n	8006c42 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006be8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bec:	68b9      	ldr	r1, [r7, #8]
 8006bee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006bf0:	f000 f8b5 	bl	8006d5e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf6:	1e5a      	subs	r2, r3, #1
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006bfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c04:	d112      	bne.n	8006c2c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d016      	beq.n	8006c3c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	3310      	adds	r3, #16
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fd60 	bl	80076d8 <xTaskRemoveFromEventList>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00e      	beq.n	8006c3c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	e007      	b.n	8006c3c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c30:	3301      	adds	r3, #1
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	b25a      	sxtb	r2, r3
 8006c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c40:	e001      	b.n	8006c46 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006c42:	2300      	movs	r3, #0
 8006c44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f383 8811 	msr	BASEPRI, r3
}
 8006c50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3738      	adds	r7, #56	@ 0x38
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d006      	beq.n	8006c7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f1c3 0307 	rsb	r3, r3, #7
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	e001      	b.n	8006c7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
	}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bc80      	pop	{r7}
 8006c88:	4770      	bx	lr

08006c8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b086      	sub	sp, #24
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10d      	bne.n	8006cc4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d14d      	bne.n	8006d4c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 ff63 	bl	8007b80 <xTaskPriorityDisinherit>
 8006cba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	609a      	str	r2, [r3, #8]
 8006cc2:	e043      	b.n	8006d4c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d119      	bne.n	8006cfe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6858      	ldr	r0, [r3, #4]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	f001 fd4f 	bl	8008778 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce2:	441a      	add	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d32b      	bcc.n	8006d4c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	605a      	str	r2, [r3, #4]
 8006cfc:	e026      	b.n	8006d4c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	68d8      	ldr	r0, [r3, #12]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d06:	461a      	mov	r2, r3
 8006d08:	68b9      	ldr	r1, [r7, #8]
 8006d0a:	f001 fd35 	bl	8008778 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d16:	425b      	negs	r3, r3
 8006d18:	441a      	add	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d207      	bcs.n	8006d3a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d32:	425b      	negs	r3, r3
 8006d34:	441a      	add	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d105      	bne.n	8006d4c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006d54:	697b      	ldr	r3, [r7, #20]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d018      	beq.n	8006da2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d78:	441a      	add	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68da      	ldr	r2, [r3, #12]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d303      	bcc.n	8006d92 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68d9      	ldr	r1, [r3, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6838      	ldr	r0, [r7, #0]
 8006d9e:	f001 fceb 	bl	8008778 <memcpy>
	}
}
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006db2:	f001 f96b 	bl	800808c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dbc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dbe:	e011      	b.n	8006de4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d012      	beq.n	8006dee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3324      	adds	r3, #36	@ 0x24
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fc83 	bl	80076d8 <xTaskRemoveFromEventList>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006dd8:	f000 fd5c 	bl	8007894 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	dce9      	bgt.n	8006dc0 <prvUnlockQueue+0x16>
 8006dec:	e000      	b.n	8006df0 <prvUnlockQueue+0x46>
					break;
 8006dee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	22ff      	movs	r2, #255	@ 0xff
 8006df4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006df8:	f001 f978 	bl	80080ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006dfc:	f001 f946 	bl	800808c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e06:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e08:	e011      	b.n	8006e2e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d012      	beq.n	8006e38 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3310      	adds	r3, #16
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fc5e 	bl	80076d8 <xTaskRemoveFromEventList>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e22:	f000 fd37 	bl	8007894 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	dce9      	bgt.n	8006e0a <prvUnlockQueue+0x60>
 8006e36:	e000      	b.n	8006e3a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e38:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	22ff      	movs	r2, #255	@ 0xff
 8006e3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006e42:	f001 f953 	bl	80080ec <vPortExitCritical>
}
 8006e46:	bf00      	nop
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e56:	f001 f919 	bl	800808c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d102      	bne.n	8006e68 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e62:	2301      	movs	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]
 8006e66:	e001      	b.n	8006e6c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e6c:	f001 f93e 	bl	80080ec <vPortExitCritical>

	return xReturn;
 8006e70:	68fb      	ldr	r3, [r7, #12]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e82:	f001 f903 	bl	800808c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d102      	bne.n	8006e98 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e92:	2301      	movs	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	e001      	b.n	8006e9c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e9c:	f001 f926 	bl	80080ec <vPortExitCritical>

	return xReturn;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b08e      	sub	sp, #56	@ 0x38
 8006eae:	af04      	add	r7, sp, #16
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	607a      	str	r2, [r7, #4]
 8006eb6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10b      	bne.n	8006ed6 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	623b      	str	r3, [r7, #32]
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10b      	bne.n	8006ef4 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	61fb      	str	r3, [r7, #28]
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	e7fd      	b.n	8006ef0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ef4:	2354      	movs	r3, #84	@ 0x54
 8006ef6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b54      	cmp	r3, #84	@ 0x54
 8006efc:	d00b      	beq.n	8006f16 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	61bb      	str	r3, [r7, #24]
}
 8006f10:	bf00      	nop
 8006f12:	bf00      	nop
 8006f14:	e7fd      	b.n	8006f12 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d01e      	beq.n	8006f5c <xTaskCreateStatic+0xb2>
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01b      	beq.n	8006f5c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f26:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f2c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	2202      	movs	r2, #2
 8006f32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f36:	2300      	movs	r3, #0
 8006f38:	9303      	str	r3, [sp, #12]
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3c:	9302      	str	r3, [sp, #8]
 8006f3e:	f107 0314 	add.w	r3, r7, #20
 8006f42:	9301      	str	r3, [sp, #4]
 8006f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	68b9      	ldr	r1, [r7, #8]
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 f850 	bl	8006ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f56:	f000 f8d5 	bl	8007104 <prvAddNewTaskToReadyList>
 8006f5a:	e001      	b.n	8006f60 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f60:	697b      	ldr	r3, [r7, #20]
	}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3728      	adds	r7, #40	@ 0x28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b08c      	sub	sp, #48	@ 0x30
 8006f6e:	af04      	add	r7, sp, #16
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	603b      	str	r3, [r7, #0]
 8006f76:	4613      	mov	r3, r2
 8006f78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f7a:	88fb      	ldrh	r3, [r7, #6]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 f986 	bl	8008290 <pvPortMalloc>
 8006f84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00e      	beq.n	8006faa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f8c:	2054      	movs	r0, #84	@ 0x54
 8006f8e:	f001 f97f 	bl	8008290 <pvPortMalloc>
 8006f92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fa0:	e005      	b.n	8006fae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006fa2:	6978      	ldr	r0, [r7, #20]
 8006fa4:	f001 fa42 	bl	800842c <vPortFree>
 8006fa8:	e001      	b.n	8006fae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d017      	beq.n	8006fe4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006fbc:	88fa      	ldrh	r2, [r7, #6]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	9303      	str	r3, [sp, #12]
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	9302      	str	r3, [sp, #8]
 8006fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc8:	9301      	str	r3, [sp, #4]
 8006fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68b9      	ldr	r1, [r7, #8]
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 f80e 	bl	8006ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fd8:	69f8      	ldr	r0, [r7, #28]
 8006fda:	f000 f893 	bl	8007104 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	61bb      	str	r3, [r7, #24]
 8006fe2:	e002      	b.n	8006fea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fea:	69bb      	ldr	r3, [r7, #24]
	}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3720      	adds	r7, #32
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b088      	sub	sp, #32
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007004:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800700c:	3b01      	subs	r3, #1
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	f023 0307 	bic.w	r3, r3, #7
 800701a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00b      	beq.n	800703e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	617b      	str	r3, [r7, #20]
}
 8007038:	bf00      	nop
 800703a:	bf00      	nop
 800703c:	e7fd      	b.n	800703a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01f      	beq.n	8007084 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007044:	2300      	movs	r3, #0
 8007046:	61fb      	str	r3, [r7, #28]
 8007048:	e012      	b.n	8007070 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	4413      	add	r3, r2
 8007050:	7819      	ldrb	r1, [r3, #0]
 8007052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	4413      	add	r3, r2
 8007058:	3334      	adds	r3, #52	@ 0x34
 800705a:	460a      	mov	r2, r1
 800705c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	4413      	add	r3, r2
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d006      	beq.n	8007078 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	3301      	adds	r3, #1
 800706e:	61fb      	str	r3, [r7, #28]
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	2b0f      	cmp	r3, #15
 8007074:	d9e9      	bls.n	800704a <prvInitialiseNewTask+0x56>
 8007076:	e000      	b.n	800707a <prvInitialiseNewTask+0x86>
			{
				break;
 8007078:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007082:	e003      	b.n	800708c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800708c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708e:	2b06      	cmp	r3, #6
 8007090:	d901      	bls.n	8007096 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007092:	2306      	movs	r3, #6
 8007094:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007098:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800709a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800709c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070a0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80070a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a4:	2200      	movs	r2, #0
 80070a6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070aa:	3304      	adds	r3, #4
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff f892 	bl	80061d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	3318      	adds	r3, #24
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff f88d 	bl	80061d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c4:	f1c3 0207 	rsb	r2, r3, #7
 80070c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	2200      	movs	r2, #0
 80070d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	68f9      	ldr	r1, [r7, #12]
 80070e4:	69b8      	ldr	r0, [r7, #24]
 80070e6:	f000 fedd 	bl	8007ea4 <pxPortInitialiseStack>
 80070ea:	4602      	mov	r2, r0
 80070ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070fc:	bf00      	nop
 80070fe:	3720      	adds	r7, #32
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800710c:	f000 ffbe 	bl	800808c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007110:	4b2a      	ldr	r3, [pc, #168]	@ (80071bc <prvAddNewTaskToReadyList+0xb8>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3301      	adds	r3, #1
 8007116:	4a29      	ldr	r2, [pc, #164]	@ (80071bc <prvAddNewTaskToReadyList+0xb8>)
 8007118:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800711a:	4b29      	ldr	r3, [pc, #164]	@ (80071c0 <prvAddNewTaskToReadyList+0xbc>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007122:	4a27      	ldr	r2, [pc, #156]	@ (80071c0 <prvAddNewTaskToReadyList+0xbc>)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007128:	4b24      	ldr	r3, [pc, #144]	@ (80071bc <prvAddNewTaskToReadyList+0xb8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d110      	bne.n	8007152 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007130:	f000 fbd4 	bl	80078dc <prvInitialiseTaskLists>
 8007134:	e00d      	b.n	8007152 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007136:	4b23      	ldr	r3, [pc, #140]	@ (80071c4 <prvAddNewTaskToReadyList+0xc0>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800713e:	4b20      	ldr	r3, [pc, #128]	@ (80071c0 <prvAddNewTaskToReadyList+0xbc>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007148:	429a      	cmp	r2, r3
 800714a:	d802      	bhi.n	8007152 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800714c:	4a1c      	ldr	r2, [pc, #112]	@ (80071c0 <prvAddNewTaskToReadyList+0xbc>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007152:	4b1d      	ldr	r3, [pc, #116]	@ (80071c8 <prvAddNewTaskToReadyList+0xc4>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3301      	adds	r3, #1
 8007158:	4a1b      	ldr	r2, [pc, #108]	@ (80071c8 <prvAddNewTaskToReadyList+0xc4>)
 800715a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007160:	2201      	movs	r2, #1
 8007162:	409a      	lsls	r2, r3
 8007164:	4b19      	ldr	r3, [pc, #100]	@ (80071cc <prvAddNewTaskToReadyList+0xc8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4313      	orrs	r3, r2
 800716a:	4a18      	ldr	r2, [pc, #96]	@ (80071cc <prvAddNewTaskToReadyList+0xc8>)
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4a15      	ldr	r2, [pc, #84]	@ (80071d0 <prvAddNewTaskToReadyList+0xcc>)
 800717c:	441a      	add	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	3304      	adds	r3, #4
 8007182:	4619      	mov	r1, r3
 8007184:	4610      	mov	r0, r2
 8007186:	f7ff f832 	bl	80061ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800718a:	f000 ffaf 	bl	80080ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800718e:	4b0d      	ldr	r3, [pc, #52]	@ (80071c4 <prvAddNewTaskToReadyList+0xc0>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00e      	beq.n	80071b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007196:	4b0a      	ldr	r3, [pc, #40]	@ (80071c0 <prvAddNewTaskToReadyList+0xbc>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d207      	bcs.n	80071b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071a4:	4b0b      	ldr	r3, [pc, #44]	@ (80071d4 <prvAddNewTaskToReadyList+0xd0>)
 80071a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071b4:	bf00      	nop
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	20000600 	.word	0x20000600
 80071c0:	20000500 	.word	0x20000500
 80071c4:	2000060c 	.word	0x2000060c
 80071c8:	2000061c 	.word	0x2000061c
 80071cc:	20000608 	.word	0x20000608
 80071d0:	20000504 	.word	0x20000504
 80071d4:	e000ed04 	.word	0xe000ed04

080071d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d018      	beq.n	800721c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80071ea:	4b14      	ldr	r3, [pc, #80]	@ (800723c <vTaskDelay+0x64>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00b      	beq.n	800720a <vTaskDelay+0x32>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	60bb      	str	r3, [r7, #8]
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	e7fd      	b.n	8007206 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800720a:	f000 f87d 	bl	8007308 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800720e:	2100      	movs	r1, #0
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fde1 	bl	8007dd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007216:	f000 f885 	bl	8007324 <xTaskResumeAll>
 800721a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d107      	bne.n	8007232 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007222:	4b07      	ldr	r3, [pc, #28]	@ (8007240 <vTaskDelay+0x68>)
 8007224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007232:	bf00      	nop
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20000628 	.word	0x20000628
 8007240:	e000ed04 	.word	0xe000ed04

08007244 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08a      	sub	sp, #40	@ 0x28
 8007248:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800724a:	2300      	movs	r3, #0
 800724c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007252:	463a      	mov	r2, r7
 8007254:	1d39      	adds	r1, r7, #4
 8007256:	f107 0308 	add.w	r3, r7, #8
 800725a:	4618      	mov	r0, r3
 800725c:	f7f9 fe74 	bl	8000f48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	9202      	str	r2, [sp, #8]
 8007268:	9301      	str	r3, [sp, #4]
 800726a:	2300      	movs	r3, #0
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	2300      	movs	r3, #0
 8007270:	460a      	mov	r2, r1
 8007272:	491f      	ldr	r1, [pc, #124]	@ (80072f0 <vTaskStartScheduler+0xac>)
 8007274:	481f      	ldr	r0, [pc, #124]	@ (80072f4 <vTaskStartScheduler+0xb0>)
 8007276:	f7ff fe18 	bl	8006eaa <xTaskCreateStatic>
 800727a:	4603      	mov	r3, r0
 800727c:	4a1e      	ldr	r2, [pc, #120]	@ (80072f8 <vTaskStartScheduler+0xb4>)
 800727e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007280:	4b1d      	ldr	r3, [pc, #116]	@ (80072f8 <vTaskStartScheduler+0xb4>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007288:	2301      	movs	r3, #1
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	e001      	b.n	8007292 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800728e:	2300      	movs	r3, #0
 8007290:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d116      	bne.n	80072c6 <vTaskStartScheduler+0x82>
	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	613b      	str	r3, [r7, #16]
}
 80072aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80072ac:	4b13      	ldr	r3, [pc, #76]	@ (80072fc <vTaskStartScheduler+0xb8>)
 80072ae:	f04f 32ff 	mov.w	r2, #4294967295
 80072b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80072b4:	4b12      	ldr	r3, [pc, #72]	@ (8007300 <vTaskStartScheduler+0xbc>)
 80072b6:	2201      	movs	r2, #1
 80072b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072ba:	4b12      	ldr	r3, [pc, #72]	@ (8007304 <vTaskStartScheduler+0xc0>)
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072c0:	f000 fe72 	bl	8007fa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072c4:	e00f      	b.n	80072e6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072cc:	d10b      	bne.n	80072e6 <vTaskStartScheduler+0xa2>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	60fb      	str	r3, [r7, #12]
}
 80072e0:	bf00      	nop
 80072e2:	bf00      	nop
 80072e4:	e7fd      	b.n	80072e2 <vTaskStartScheduler+0x9e>
}
 80072e6:	bf00      	nop
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	0800a088 	.word	0x0800a088
 80072f4:	080078ad 	.word	0x080078ad
 80072f8:	20000624 	.word	0x20000624
 80072fc:	20000620 	.word	0x20000620
 8007300:	2000060c 	.word	0x2000060c
 8007304:	20000604 	.word	0x20000604

08007308 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800730c:	4b04      	ldr	r3, [pc, #16]	@ (8007320 <vTaskSuspendAll+0x18>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3301      	adds	r3, #1
 8007312:	4a03      	ldr	r2, [pc, #12]	@ (8007320 <vTaskSuspendAll+0x18>)
 8007314:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007316:	bf00      	nop
 8007318:	46bd      	mov	sp, r7
 800731a:	bc80      	pop	{r7}
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	20000628 	.word	0x20000628

08007324 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800732e:	2300      	movs	r3, #0
 8007330:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007332:	4b42      	ldr	r3, [pc, #264]	@ (800743c <xTaskResumeAll+0x118>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10b      	bne.n	8007352 <xTaskResumeAll+0x2e>
	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	603b      	str	r3, [r7, #0]
}
 800734c:	bf00      	nop
 800734e:	bf00      	nop
 8007350:	e7fd      	b.n	800734e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007352:	f000 fe9b 	bl	800808c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007356:	4b39      	ldr	r3, [pc, #228]	@ (800743c <xTaskResumeAll+0x118>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3b01      	subs	r3, #1
 800735c:	4a37      	ldr	r2, [pc, #220]	@ (800743c <xTaskResumeAll+0x118>)
 800735e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007360:	4b36      	ldr	r3, [pc, #216]	@ (800743c <xTaskResumeAll+0x118>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d161      	bne.n	800742c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007368:	4b35      	ldr	r3, [pc, #212]	@ (8007440 <xTaskResumeAll+0x11c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d05d      	beq.n	800742c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007370:	e02e      	b.n	80073d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007372:	4b34      	ldr	r3, [pc, #208]	@ (8007444 <xTaskResumeAll+0x120>)
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3318      	adds	r3, #24
 800737e:	4618      	mov	r0, r3
 8007380:	f7fe ff90 	bl	80062a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3304      	adds	r3, #4
 8007388:	4618      	mov	r0, r3
 800738a:	f7fe ff8b 	bl	80062a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007392:	2201      	movs	r2, #1
 8007394:	409a      	lsls	r2, r3
 8007396:	4b2c      	ldr	r3, [pc, #176]	@ (8007448 <xTaskResumeAll+0x124>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4313      	orrs	r3, r2
 800739c:	4a2a      	ldr	r2, [pc, #168]	@ (8007448 <xTaskResumeAll+0x124>)
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4a27      	ldr	r2, [pc, #156]	@ (800744c <xTaskResumeAll+0x128>)
 80073ae:	441a      	add	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	3304      	adds	r3, #4
 80073b4:	4619      	mov	r1, r3
 80073b6:	4610      	mov	r0, r2
 80073b8:	f7fe ff19 	bl	80061ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c0:	4b23      	ldr	r3, [pc, #140]	@ (8007450 <xTaskResumeAll+0x12c>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d302      	bcc.n	80073d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80073ca:	4b22      	ldr	r3, [pc, #136]	@ (8007454 <xTaskResumeAll+0x130>)
 80073cc:	2201      	movs	r2, #1
 80073ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007444 <xTaskResumeAll+0x120>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1cc      	bne.n	8007372 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80073de:	f000 fb1b 	bl	8007a18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80073e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007458 <xTaskResumeAll+0x134>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d010      	beq.n	8007410 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80073ee:	f000 f837 	bl	8007460 <xTaskIncrementTick>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80073f8:	4b16      	ldr	r3, [pc, #88]	@ (8007454 <xTaskResumeAll+0x130>)
 80073fa:	2201      	movs	r2, #1
 80073fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	3b01      	subs	r3, #1
 8007402:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1f1      	bne.n	80073ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800740a:	4b13      	ldr	r3, [pc, #76]	@ (8007458 <xTaskResumeAll+0x134>)
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007410:	4b10      	ldr	r3, [pc, #64]	@ (8007454 <xTaskResumeAll+0x130>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d009      	beq.n	800742c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007418:	2301      	movs	r3, #1
 800741a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800741c:	4b0f      	ldr	r3, [pc, #60]	@ (800745c <xTaskResumeAll+0x138>)
 800741e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800742c:	f000 fe5e 	bl	80080ec <vPortExitCritical>

	return xAlreadyYielded;
 8007430:	68bb      	ldr	r3, [r7, #8]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20000628 	.word	0x20000628
 8007440:	20000600 	.word	0x20000600
 8007444:	200005c0 	.word	0x200005c0
 8007448:	20000608 	.word	0x20000608
 800744c:	20000504 	.word	0x20000504
 8007450:	20000500 	.word	0x20000500
 8007454:	20000614 	.word	0x20000614
 8007458:	20000610 	.word	0x20000610
 800745c:	e000ed04 	.word	0xe000ed04

08007460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007466:	2300      	movs	r3, #0
 8007468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800746a:	4b4f      	ldr	r3, [pc, #316]	@ (80075a8 <xTaskIncrementTick+0x148>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	f040 808f 	bne.w	8007592 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007474:	4b4d      	ldr	r3, [pc, #308]	@ (80075ac <xTaskIncrementTick+0x14c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3301      	adds	r3, #1
 800747a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800747c:	4a4b      	ldr	r2, [pc, #300]	@ (80075ac <xTaskIncrementTick+0x14c>)
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d121      	bne.n	80074cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007488:	4b49      	ldr	r3, [pc, #292]	@ (80075b0 <xTaskIncrementTick+0x150>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00b      	beq.n	80074aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	603b      	str	r3, [r7, #0]
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop
 80074a8:	e7fd      	b.n	80074a6 <xTaskIncrementTick+0x46>
 80074aa:	4b41      	ldr	r3, [pc, #260]	@ (80075b0 <xTaskIncrementTick+0x150>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	4b40      	ldr	r3, [pc, #256]	@ (80075b4 <xTaskIncrementTick+0x154>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a3e      	ldr	r2, [pc, #248]	@ (80075b0 <xTaskIncrementTick+0x150>)
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	4a3e      	ldr	r2, [pc, #248]	@ (80075b4 <xTaskIncrementTick+0x154>)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	4b3e      	ldr	r3, [pc, #248]	@ (80075b8 <xTaskIncrementTick+0x158>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3301      	adds	r3, #1
 80074c4:	4a3c      	ldr	r2, [pc, #240]	@ (80075b8 <xTaskIncrementTick+0x158>)
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	f000 faa6 	bl	8007a18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80074cc:	4b3b      	ldr	r3, [pc, #236]	@ (80075bc <xTaskIncrementTick+0x15c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d348      	bcc.n	8007568 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074d6:	4b36      	ldr	r3, [pc, #216]	@ (80075b0 <xTaskIncrementTick+0x150>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d104      	bne.n	80074ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074e0:	4b36      	ldr	r3, [pc, #216]	@ (80075bc <xTaskIncrementTick+0x15c>)
 80074e2:	f04f 32ff 	mov.w	r2, #4294967295
 80074e6:	601a      	str	r2, [r3, #0]
					break;
 80074e8:	e03e      	b.n	8007568 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ea:	4b31      	ldr	r3, [pc, #196]	@ (80075b0 <xTaskIncrementTick+0x150>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d203      	bcs.n	800750a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007502:	4a2e      	ldr	r2, [pc, #184]	@ (80075bc <xTaskIncrementTick+0x15c>)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007508:	e02e      	b.n	8007568 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	3304      	adds	r3, #4
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fec8 	bl	80062a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007518:	2b00      	cmp	r3, #0
 800751a:	d004      	beq.n	8007526 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	3318      	adds	r3, #24
 8007520:	4618      	mov	r0, r3
 8007522:	f7fe febf 	bl	80062a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752a:	2201      	movs	r2, #1
 800752c:	409a      	lsls	r2, r3
 800752e:	4b24      	ldr	r3, [pc, #144]	@ (80075c0 <xTaskIncrementTick+0x160>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4313      	orrs	r3, r2
 8007534:	4a22      	ldr	r2, [pc, #136]	@ (80075c0 <xTaskIncrementTick+0x160>)
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4a1f      	ldr	r2, [pc, #124]	@ (80075c4 <xTaskIncrementTick+0x164>)
 8007546:	441a      	add	r2, r3
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	3304      	adds	r3, #4
 800754c:	4619      	mov	r1, r3
 800754e:	4610      	mov	r0, r2
 8007550:	f7fe fe4d 	bl	80061ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007558:	4b1b      	ldr	r3, [pc, #108]	@ (80075c8 <xTaskIncrementTick+0x168>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755e:	429a      	cmp	r2, r3
 8007560:	d3b9      	bcc.n	80074d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007562:	2301      	movs	r3, #1
 8007564:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007566:	e7b6      	b.n	80074d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007568:	4b17      	ldr	r3, [pc, #92]	@ (80075c8 <xTaskIncrementTick+0x168>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800756e:	4915      	ldr	r1, [pc, #84]	@ (80075c4 <xTaskIncrementTick+0x164>)
 8007570:	4613      	mov	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	440b      	add	r3, r1
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d901      	bls.n	8007584 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007580:	2301      	movs	r3, #1
 8007582:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007584:	4b11      	ldr	r3, [pc, #68]	@ (80075cc <xTaskIncrementTick+0x16c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d007      	beq.n	800759c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800758c:	2301      	movs	r3, #1
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	e004      	b.n	800759c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007592:	4b0f      	ldr	r3, [pc, #60]	@ (80075d0 <xTaskIncrementTick+0x170>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3301      	adds	r3, #1
 8007598:	4a0d      	ldr	r2, [pc, #52]	@ (80075d0 <xTaskIncrementTick+0x170>)
 800759a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800759c:	697b      	ldr	r3, [r7, #20]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20000628 	.word	0x20000628
 80075ac:	20000604 	.word	0x20000604
 80075b0:	200005b8 	.word	0x200005b8
 80075b4:	200005bc 	.word	0x200005bc
 80075b8:	20000618 	.word	0x20000618
 80075bc:	20000620 	.word	0x20000620
 80075c0:	20000608 	.word	0x20000608
 80075c4:	20000504 	.word	0x20000504
 80075c8:	20000500 	.word	0x20000500
 80075cc:	20000614 	.word	0x20000614
 80075d0:	20000610 	.word	0x20000610

080075d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80075da:	4b27      	ldr	r3, [pc, #156]	@ (8007678 <vTaskSwitchContext+0xa4>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80075e2:	4b26      	ldr	r3, [pc, #152]	@ (800767c <vTaskSwitchContext+0xa8>)
 80075e4:	2201      	movs	r2, #1
 80075e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80075e8:	e040      	b.n	800766c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80075ea:	4b24      	ldr	r3, [pc, #144]	@ (800767c <vTaskSwitchContext+0xa8>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f0:	4b23      	ldr	r3, [pc, #140]	@ (8007680 <vTaskSwitchContext+0xac>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	fab3 f383 	clz	r3, r3
 80075fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80075fe:	7afb      	ldrb	r3, [r7, #11]
 8007600:	f1c3 031f 	rsb	r3, r3, #31
 8007604:	617b      	str	r3, [r7, #20]
 8007606:	491f      	ldr	r1, [pc, #124]	@ (8007684 <vTaskSwitchContext+0xb0>)
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	4613      	mov	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	440b      	add	r3, r1
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10b      	bne.n	8007632 <vTaskSwitchContext+0x5e>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	607b      	str	r3, [r7, #4]
}
 800762c:	bf00      	nop
 800762e:	bf00      	nop
 8007630:	e7fd      	b.n	800762e <vTaskSwitchContext+0x5a>
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	4613      	mov	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4a11      	ldr	r2, [pc, #68]	@ (8007684 <vTaskSwitchContext+0xb0>)
 800763e:	4413      	add	r3, r2
 8007640:	613b      	str	r3, [r7, #16]
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	605a      	str	r2, [r3, #4]
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	3308      	adds	r3, #8
 8007654:	429a      	cmp	r2, r3
 8007656:	d104      	bne.n	8007662 <vTaskSwitchContext+0x8e>
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	605a      	str	r2, [r3, #4]
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	4a07      	ldr	r2, [pc, #28]	@ (8007688 <vTaskSwitchContext+0xb4>)
 800766a:	6013      	str	r3, [r2, #0]
}
 800766c:	bf00      	nop
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	20000628 	.word	0x20000628
 800767c:	20000614 	.word	0x20000614
 8007680:	20000608 	.word	0x20000608
 8007684:	20000504 	.word	0x20000504
 8007688:	20000500 	.word	0x20000500

0800768c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10b      	bne.n	80076b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	60fb      	str	r3, [r7, #12]
}
 80076ae:	bf00      	nop
 80076b0:	bf00      	nop
 80076b2:	e7fd      	b.n	80076b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076b4:	4b07      	ldr	r3, [pc, #28]	@ (80076d4 <vTaskPlaceOnEventList+0x48>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3318      	adds	r3, #24
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7fe fdb9 	bl	8006234 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80076c2:	2101      	movs	r1, #1
 80076c4:	6838      	ldr	r0, [r7, #0]
 80076c6:	f000 fb87 	bl	8007dd8 <prvAddCurrentTaskToDelayedList>
}
 80076ca:	bf00      	nop
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20000500 	.word	0x20000500

080076d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10b      	bne.n	8007706 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	60fb      	str	r3, [r7, #12]
}
 8007700:	bf00      	nop
 8007702:	bf00      	nop
 8007704:	e7fd      	b.n	8007702 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	3318      	adds	r3, #24
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe fdca 	bl	80062a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007710:	4b1d      	ldr	r3, [pc, #116]	@ (8007788 <xTaskRemoveFromEventList+0xb0>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d11c      	bne.n	8007752 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	3304      	adds	r3, #4
 800771c:	4618      	mov	r0, r3
 800771e:	f7fe fdc1 	bl	80062a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007726:	2201      	movs	r2, #1
 8007728:	409a      	lsls	r2, r3
 800772a:	4b18      	ldr	r3, [pc, #96]	@ (800778c <xTaskRemoveFromEventList+0xb4>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4313      	orrs	r3, r2
 8007730:	4a16      	ldr	r2, [pc, #88]	@ (800778c <xTaskRemoveFromEventList+0xb4>)
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007738:	4613      	mov	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4a13      	ldr	r2, [pc, #76]	@ (8007790 <xTaskRemoveFromEventList+0xb8>)
 8007742:	441a      	add	r2, r3
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	3304      	adds	r3, #4
 8007748:	4619      	mov	r1, r3
 800774a:	4610      	mov	r0, r2
 800774c:	f7fe fd4f 	bl	80061ee <vListInsertEnd>
 8007750:	e005      	b.n	800775e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	3318      	adds	r3, #24
 8007756:	4619      	mov	r1, r3
 8007758:	480e      	ldr	r0, [pc, #56]	@ (8007794 <xTaskRemoveFromEventList+0xbc>)
 800775a:	f7fe fd48 	bl	80061ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007762:	4b0d      	ldr	r3, [pc, #52]	@ (8007798 <xTaskRemoveFromEventList+0xc0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007768:	429a      	cmp	r2, r3
 800776a:	d905      	bls.n	8007778 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800776c:	2301      	movs	r3, #1
 800776e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007770:	4b0a      	ldr	r3, [pc, #40]	@ (800779c <xTaskRemoveFromEventList+0xc4>)
 8007772:	2201      	movs	r2, #1
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	e001      	b.n	800777c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007778:	2300      	movs	r3, #0
 800777a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800777c:	697b      	ldr	r3, [r7, #20]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20000628 	.word	0x20000628
 800778c:	20000608 	.word	0x20000608
 8007790:	20000504 	.word	0x20000504
 8007794:	200005c0 	.word	0x200005c0
 8007798:	20000500 	.word	0x20000500
 800779c:	20000614 	.word	0x20000614

080077a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80077a8:	4b06      	ldr	r3, [pc, #24]	@ (80077c4 <vTaskInternalSetTimeOutState+0x24>)
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80077b0:	4b05      	ldr	r3, [pc, #20]	@ (80077c8 <vTaskInternalSetTimeOutState+0x28>)
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	605a      	str	r2, [r3, #4]
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	bc80      	pop	{r7}
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	20000618 	.word	0x20000618
 80077c8:	20000604 	.word	0x20000604

080077cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b088      	sub	sp, #32
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10b      	bne.n	80077f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	613b      	str	r3, [r7, #16]
}
 80077ee:	bf00      	nop
 80077f0:	bf00      	nop
 80077f2:	e7fd      	b.n	80077f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10b      	bne.n	8007812 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	60fb      	str	r3, [r7, #12]
}
 800780c:	bf00      	nop
 800780e:	bf00      	nop
 8007810:	e7fd      	b.n	800780e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007812:	f000 fc3b 	bl	800808c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007816:	4b1d      	ldr	r3, [pc, #116]	@ (800788c <xTaskCheckForTimeOut+0xc0>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782e:	d102      	bne.n	8007836 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007830:	2300      	movs	r3, #0
 8007832:	61fb      	str	r3, [r7, #28]
 8007834:	e023      	b.n	800787e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	4b15      	ldr	r3, [pc, #84]	@ (8007890 <xTaskCheckForTimeOut+0xc4>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d007      	beq.n	8007852 <xTaskCheckForTimeOut+0x86>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	429a      	cmp	r2, r3
 800784a:	d302      	bcc.n	8007852 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800784c:	2301      	movs	r3, #1
 800784e:	61fb      	str	r3, [r7, #28]
 8007850:	e015      	b.n	800787e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	429a      	cmp	r2, r3
 800785a:	d20b      	bcs.n	8007874 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	1ad2      	subs	r2, r2, r3
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff ff99 	bl	80077a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800786e:	2300      	movs	r3, #0
 8007870:	61fb      	str	r3, [r7, #28]
 8007872:	e004      	b.n	800787e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800787a:	2301      	movs	r3, #1
 800787c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800787e:	f000 fc35 	bl	80080ec <vPortExitCritical>

	return xReturn;
 8007882:	69fb      	ldr	r3, [r7, #28]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3720      	adds	r7, #32
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20000604 	.word	0x20000604
 8007890:	20000618 	.word	0x20000618

08007894 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007894:	b480      	push	{r7}
 8007896:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007898:	4b03      	ldr	r3, [pc, #12]	@ (80078a8 <vTaskMissedYield+0x14>)
 800789a:	2201      	movs	r2, #1
 800789c:	601a      	str	r2, [r3, #0]
}
 800789e:	bf00      	nop
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bc80      	pop	{r7}
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	20000614 	.word	0x20000614

080078ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80078b4:	f000 f852 	bl	800795c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80078b8:	4b06      	ldr	r3, [pc, #24]	@ (80078d4 <prvIdleTask+0x28>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d9f9      	bls.n	80078b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80078c0:	4b05      	ldr	r3, [pc, #20]	@ (80078d8 <prvIdleTask+0x2c>)
 80078c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80078d0:	e7f0      	b.n	80078b4 <prvIdleTask+0x8>
 80078d2:	bf00      	nop
 80078d4:	20000504 	.word	0x20000504
 80078d8:	e000ed04 	.word	0xe000ed04

080078dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078e2:	2300      	movs	r3, #0
 80078e4:	607b      	str	r3, [r7, #4]
 80078e6:	e00c      	b.n	8007902 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4a12      	ldr	r2, [pc, #72]	@ (800793c <prvInitialiseTaskLists+0x60>)
 80078f4:	4413      	add	r3, r2
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fe fc4e 	bl	8006198 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3301      	adds	r3, #1
 8007900:	607b      	str	r3, [r7, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b06      	cmp	r3, #6
 8007906:	d9ef      	bls.n	80078e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007908:	480d      	ldr	r0, [pc, #52]	@ (8007940 <prvInitialiseTaskLists+0x64>)
 800790a:	f7fe fc45 	bl	8006198 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800790e:	480d      	ldr	r0, [pc, #52]	@ (8007944 <prvInitialiseTaskLists+0x68>)
 8007910:	f7fe fc42 	bl	8006198 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007914:	480c      	ldr	r0, [pc, #48]	@ (8007948 <prvInitialiseTaskLists+0x6c>)
 8007916:	f7fe fc3f 	bl	8006198 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800791a:	480c      	ldr	r0, [pc, #48]	@ (800794c <prvInitialiseTaskLists+0x70>)
 800791c:	f7fe fc3c 	bl	8006198 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007920:	480b      	ldr	r0, [pc, #44]	@ (8007950 <prvInitialiseTaskLists+0x74>)
 8007922:	f7fe fc39 	bl	8006198 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007926:	4b0b      	ldr	r3, [pc, #44]	@ (8007954 <prvInitialiseTaskLists+0x78>)
 8007928:	4a05      	ldr	r2, [pc, #20]	@ (8007940 <prvInitialiseTaskLists+0x64>)
 800792a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800792c:	4b0a      	ldr	r3, [pc, #40]	@ (8007958 <prvInitialiseTaskLists+0x7c>)
 800792e:	4a05      	ldr	r2, [pc, #20]	@ (8007944 <prvInitialiseTaskLists+0x68>)
 8007930:	601a      	str	r2, [r3, #0]
}
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20000504 	.word	0x20000504
 8007940:	20000590 	.word	0x20000590
 8007944:	200005a4 	.word	0x200005a4
 8007948:	200005c0 	.word	0x200005c0
 800794c:	200005d4 	.word	0x200005d4
 8007950:	200005ec 	.word	0x200005ec
 8007954:	200005b8 	.word	0x200005b8
 8007958:	200005bc 	.word	0x200005bc

0800795c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007962:	e019      	b.n	8007998 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007964:	f000 fb92 	bl	800808c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007968:	4b10      	ldr	r3, [pc, #64]	@ (80079ac <prvCheckTasksWaitingTermination+0x50>)
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	3304      	adds	r3, #4
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe fc95 	bl	80062a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800797a:	4b0d      	ldr	r3, [pc, #52]	@ (80079b0 <prvCheckTasksWaitingTermination+0x54>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3b01      	subs	r3, #1
 8007980:	4a0b      	ldr	r2, [pc, #44]	@ (80079b0 <prvCheckTasksWaitingTermination+0x54>)
 8007982:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007984:	4b0b      	ldr	r3, [pc, #44]	@ (80079b4 <prvCheckTasksWaitingTermination+0x58>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3b01      	subs	r3, #1
 800798a:	4a0a      	ldr	r2, [pc, #40]	@ (80079b4 <prvCheckTasksWaitingTermination+0x58>)
 800798c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800798e:	f000 fbad 	bl	80080ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f810 	bl	80079b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007998:	4b06      	ldr	r3, [pc, #24]	@ (80079b4 <prvCheckTasksWaitingTermination+0x58>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e1      	bne.n	8007964 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80079a0:	bf00      	nop
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	200005d4 	.word	0x200005d4
 80079b0:	20000600 	.word	0x20000600
 80079b4:	200005e8 	.word	0x200005e8

080079b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d108      	bne.n	80079dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 fd2c 	bl	800842c <vPortFree>
				vPortFree( pxTCB );
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fd29 	bl	800842c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80079da:	e019      	b.n	8007a10 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d103      	bne.n	80079ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fd20 	bl	800842c <vPortFree>
	}
 80079ec:	e010      	b.n	8007a10 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d00b      	beq.n	8007a10 <prvDeleteTCB+0x58>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	60fb      	str	r3, [r7, #12]
}
 8007a0a:	bf00      	nop
 8007a0c:	bf00      	nop
 8007a0e:	e7fd      	b.n	8007a0c <prvDeleteTCB+0x54>
	}
 8007a10:	bf00      	nop
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a50 <prvResetNextTaskUnblockTime+0x38>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d104      	bne.n	8007a32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a28:	4b0a      	ldr	r3, [pc, #40]	@ (8007a54 <prvResetNextTaskUnblockTime+0x3c>)
 8007a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a30:	e008      	b.n	8007a44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a32:	4b07      	ldr	r3, [pc, #28]	@ (8007a50 <prvResetNextTaskUnblockTime+0x38>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	4a04      	ldr	r2, [pc, #16]	@ (8007a54 <prvResetNextTaskUnblockTime+0x3c>)
 8007a42:	6013      	str	r3, [r2, #0]
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bc80      	pop	{r7}
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	200005b8 	.word	0x200005b8
 8007a54:	20000620 	.word	0x20000620

08007a58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a8c <xTaskGetSchedulerState+0x34>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d102      	bne.n	8007a6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a66:	2301      	movs	r3, #1
 8007a68:	607b      	str	r3, [r7, #4]
 8007a6a:	e008      	b.n	8007a7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a6c:	4b08      	ldr	r3, [pc, #32]	@ (8007a90 <xTaskGetSchedulerState+0x38>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d102      	bne.n	8007a7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a74:	2302      	movs	r3, #2
 8007a76:	607b      	str	r3, [r7, #4]
 8007a78:	e001      	b.n	8007a7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a7e:	687b      	ldr	r3, [r7, #4]
	}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bc80      	pop	{r7}
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	2000060c 	.word	0x2000060c
 8007a90:	20000628 	.word	0x20000628

08007a94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d05e      	beq.n	8007b68 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aae:	4b31      	ldr	r3, [pc, #196]	@ (8007b74 <xTaskPriorityInherit+0xe0>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d24e      	bcs.n	8007b56 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	db06      	blt.n	8007ace <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8007b74 <xTaskPriorityInherit+0xe0>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac6:	f1c3 0207 	rsb	r2, r3, #7
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6959      	ldr	r1, [r3, #20]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4a26      	ldr	r2, [pc, #152]	@ (8007b78 <xTaskPriorityInherit+0xe4>)
 8007ae0:	4413      	add	r3, r2
 8007ae2:	4299      	cmp	r1, r3
 8007ae4:	d12f      	bne.n	8007b46 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe fbda 	bl	80062a4 <uxListRemove>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10a      	bne.n	8007b0c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afa:	2201      	movs	r2, #1
 8007afc:	fa02 f303 	lsl.w	r3, r2, r3
 8007b00:	43da      	mvns	r2, r3
 8007b02:	4b1e      	ldr	r3, [pc, #120]	@ (8007b7c <xTaskPriorityInherit+0xe8>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4013      	ands	r3, r2
 8007b08:	4a1c      	ldr	r2, [pc, #112]	@ (8007b7c <xTaskPriorityInherit+0xe8>)
 8007b0a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b0c:	4b19      	ldr	r3, [pc, #100]	@ (8007b74 <xTaskPriorityInherit+0xe0>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	409a      	lsls	r2, r3
 8007b1e:	4b17      	ldr	r3, [pc, #92]	@ (8007b7c <xTaskPriorityInherit+0xe8>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	4a15      	ldr	r2, [pc, #84]	@ (8007b7c <xTaskPriorityInherit+0xe8>)
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4a10      	ldr	r2, [pc, #64]	@ (8007b78 <xTaskPriorityInherit+0xe4>)
 8007b36:	441a      	add	r2, r3
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4610      	mov	r0, r2
 8007b40:	f7fe fb55 	bl	80061ee <vListInsertEnd>
 8007b44:	e004      	b.n	8007b50 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b46:	4b0b      	ldr	r3, [pc, #44]	@ (8007b74 <xTaskPriorityInherit+0xe0>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007b50:	2301      	movs	r3, #1
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	e008      	b.n	8007b68 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b5a:	4b06      	ldr	r3, [pc, #24]	@ (8007b74 <xTaskPriorityInherit+0xe0>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d201      	bcs.n	8007b68 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007b64:	2301      	movs	r3, #1
 8007b66:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b68:	68fb      	ldr	r3, [r7, #12]
	}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20000500 	.word	0x20000500
 8007b78:	20000504 	.word	0x20000504
 8007b7c:	20000608 	.word	0x20000608

08007b80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d070      	beq.n	8007c78 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b96:	4b3b      	ldr	r3, [pc, #236]	@ (8007c84 <xTaskPriorityDisinherit+0x104>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d00b      	beq.n	8007bb8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	60fb      	str	r3, [r7, #12]
}
 8007bb2:	bf00      	nop
 8007bb4:	bf00      	nop
 8007bb6:	e7fd      	b.n	8007bb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10b      	bne.n	8007bd8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	60bb      	str	r3, [r7, #8]
}
 8007bd2:	bf00      	nop
 8007bd4:	bf00      	nop
 8007bd6:	e7fd      	b.n	8007bd4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bdc:	1e5a      	subs	r2, r3, #1
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d044      	beq.n	8007c78 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d140      	bne.n	8007c78 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe fb52 	bl	80062a4 <uxListRemove>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d115      	bne.n	8007c32 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c0a:	491f      	ldr	r1, [pc, #124]	@ (8007c88 <xTaskPriorityDisinherit+0x108>)
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	440b      	add	r3, r1
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10a      	bne.n	8007c32 <xTaskPriorityDisinherit+0xb2>
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c20:	2201      	movs	r2, #1
 8007c22:	fa02 f303 	lsl.w	r3, r2, r3
 8007c26:	43da      	mvns	r2, r3
 8007c28:	4b18      	ldr	r3, [pc, #96]	@ (8007c8c <xTaskPriorityDisinherit+0x10c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	4a17      	ldr	r2, [pc, #92]	@ (8007c8c <xTaskPriorityDisinherit+0x10c>)
 8007c30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3e:	f1c3 0207 	rsb	r2, r3, #7
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	409a      	lsls	r2, r3
 8007c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007c8c <xTaskPriorityDisinherit+0x10c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	4a0d      	ldr	r2, [pc, #52]	@ (8007c8c <xTaskPriorityDisinherit+0x10c>)
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4a08      	ldr	r2, [pc, #32]	@ (8007c88 <xTaskPriorityDisinherit+0x108>)
 8007c66:	441a      	add	r2, r3
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4610      	mov	r0, r2
 8007c70:	f7fe fabd 	bl	80061ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c74:	2301      	movs	r3, #1
 8007c76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c78:	697b      	ldr	r3, [r7, #20]
	}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20000500 	.word	0x20000500
 8007c88:	20000504 	.word	0x20000504
 8007c8c:	20000608 	.word	0x20000608

08007c90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b088      	sub	sp, #32
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d079      	beq.n	8007d9c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10b      	bne.n	8007cc8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
}
 8007cc2:	bf00      	nop
 8007cc4:	bf00      	nop
 8007cc6:	e7fd      	b.n	8007cc4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d902      	bls.n	8007cd8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	61fb      	str	r3, [r7, #28]
 8007cd6:	e002      	b.n	8007cde <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cdc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce2:	69fa      	ldr	r2, [r7, #28]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d059      	beq.n	8007d9c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d154      	bne.n	8007d9c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8007da4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d10b      	bne.n	8007d14 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	60bb      	str	r3, [r7, #8]
}
 8007d0e:	bf00      	nop
 8007d10:	bf00      	nop
 8007d12:	e7fd      	b.n	8007d10 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	db04      	blt.n	8007d32 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	f1c3 0207 	rsb	r2, r3, #7
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	6959      	ldr	r1, [r3, #20]
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4a19      	ldr	r2, [pc, #100]	@ (8007da8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d42:	4413      	add	r3, r2
 8007d44:	4299      	cmp	r1, r3
 8007d46:	d129      	bne.n	8007d9c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fe faa9 	bl	80062a4 <uxListRemove>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10a      	bne.n	8007d6e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d62:	43da      	mvns	r2, r3
 8007d64:	4b11      	ldr	r3, [pc, #68]	@ (8007dac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4013      	ands	r3, r2
 8007d6a:	4a10      	ldr	r2, [pc, #64]	@ (8007dac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007d6c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d72:	2201      	movs	r2, #1
 8007d74:	409a      	lsls	r2, r3
 8007d76:	4b0d      	ldr	r3, [pc, #52]	@ (8007dac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8007dac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007d7e:	6013      	str	r3, [r2, #0]
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4a06      	ldr	r2, [pc, #24]	@ (8007da8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d8e:	441a      	add	r2, r3
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	3304      	adds	r3, #4
 8007d94:	4619      	mov	r1, r3
 8007d96:	4610      	mov	r0, r2
 8007d98:	f7fe fa29 	bl	80061ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d9c:	bf00      	nop
 8007d9e:	3720      	adds	r7, #32
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20000500 	.word	0x20000500
 8007da8:	20000504 	.word	0x20000504
 8007dac:	20000608 	.word	0x20000608

08007db0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007db0:	b480      	push	{r7}
 8007db2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007db4:	4b07      	ldr	r3, [pc, #28]	@ (8007dd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d004      	beq.n	8007dc6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007dbc:	4b05      	ldr	r3, [pc, #20]	@ (8007dd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007dc2:	3201      	adds	r2, #1
 8007dc4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007dc6:	4b03      	ldr	r3, [pc, #12]	@ (8007dd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
	}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bc80      	pop	{r7}
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	20000500 	.word	0x20000500

08007dd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007de2:	4b29      	ldr	r3, [pc, #164]	@ (8007e88 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007de8:	4b28      	ldr	r3, [pc, #160]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3304      	adds	r3, #4
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fe fa58 	bl	80062a4 <uxListRemove>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10b      	bne.n	8007e12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007dfa:	4b24      	ldr	r3, [pc, #144]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e00:	2201      	movs	r2, #1
 8007e02:	fa02 f303 	lsl.w	r3, r2, r3
 8007e06:	43da      	mvns	r2, r3
 8007e08:	4b21      	ldr	r3, [pc, #132]	@ (8007e90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	4a20      	ldr	r2, [pc, #128]	@ (8007e90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e18:	d10a      	bne.n	8007e30 <prvAddCurrentTaskToDelayedList+0x58>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d007      	beq.n	8007e30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e20:	4b1a      	ldr	r3, [pc, #104]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3304      	adds	r3, #4
 8007e26:	4619      	mov	r1, r3
 8007e28:	481a      	ldr	r0, [pc, #104]	@ (8007e94 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e2a:	f7fe f9e0 	bl	80061ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e2e:	e026      	b.n	8007e7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4413      	add	r3, r2
 8007e36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e38:	4b14      	ldr	r3, [pc, #80]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d209      	bcs.n	8007e5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e48:	4b13      	ldr	r3, [pc, #76]	@ (8007e98 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3304      	adds	r3, #4
 8007e52:	4619      	mov	r1, r3
 8007e54:	4610      	mov	r0, r2
 8007e56:	f7fe f9ed 	bl	8006234 <vListInsert>
}
 8007e5a:	e010      	b.n	8007e7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8007e9c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	4b0a      	ldr	r3, [pc, #40]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3304      	adds	r3, #4
 8007e66:	4619      	mov	r1, r3
 8007e68:	4610      	mov	r0, r2
 8007e6a:	f7fe f9e3 	bl	8006234 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d202      	bcs.n	8007e7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e78:	4a09      	ldr	r2, [pc, #36]	@ (8007ea0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	6013      	str	r3, [r2, #0]
}
 8007e7e:	bf00      	nop
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20000604 	.word	0x20000604
 8007e8c:	20000500 	.word	0x20000500
 8007e90:	20000608 	.word	0x20000608
 8007e94:	200005ec 	.word	0x200005ec
 8007e98:	200005bc 	.word	0x200005bc
 8007e9c:	200005b8 	.word	0x200005b8
 8007ea0:	20000620 	.word	0x20000620

08007ea4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3b04      	subs	r3, #4
 8007eb4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3b04      	subs	r3, #4
 8007ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f023 0201 	bic.w	r2, r3, #1
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3b04      	subs	r3, #4
 8007ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ed4:	4a08      	ldr	r2, [pc, #32]	@ (8007ef8 <pxPortInitialiseStack+0x54>)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3b14      	subs	r3, #20
 8007ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3b20      	subs	r3, #32
 8007eea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007eec:	68fb      	ldr	r3, [r7, #12]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bc80      	pop	{r7}
 8007ef6:	4770      	bx	lr
 8007ef8:	08007efd 	.word	0x08007efd

08007efc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f06:	4b12      	ldr	r3, [pc, #72]	@ (8007f50 <prvTaskExitError+0x54>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0e:	d00b      	beq.n	8007f28 <prvTaskExitError+0x2c>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	60fb      	str	r3, [r7, #12]
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	e7fd      	b.n	8007f24 <prvTaskExitError+0x28>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	60bb      	str	r3, [r7, #8]
}
 8007f3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f3c:	bf00      	nop
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0fc      	beq.n	8007f3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f44:	bf00      	nop
 8007f46:	bf00      	nop
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr
 8007f50:	2000003c 	.word	0x2000003c
	...

08007f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f60:	4b07      	ldr	r3, [pc, #28]	@ (8007f80 <pxCurrentTCBConst2>)
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	6808      	ldr	r0, [r1, #0]
 8007f66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f6a:	f380 8809 	msr	PSP, r0
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f380 8811 	msr	BASEPRI, r0
 8007f7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007f7e:	4770      	bx	lr

08007f80 <pxCurrentTCBConst2>:
 8007f80:	20000500 	.word	0x20000500
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop

08007f88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007f88:	4806      	ldr	r0, [pc, #24]	@ (8007fa4 <prvPortStartFirstTask+0x1c>)
 8007f8a:	6800      	ldr	r0, [r0, #0]
 8007f8c:	6800      	ldr	r0, [r0, #0]
 8007f8e:	f380 8808 	msr	MSP, r0
 8007f92:	b662      	cpsie	i
 8007f94:	b661      	cpsie	f
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	df00      	svc	0
 8007fa0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fa2:	bf00      	nop
 8007fa4:	e000ed08 	.word	0xe000ed08

08007fa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fae:	4b32      	ldr	r3, [pc, #200]	@ (8008078 <xPortStartScheduler+0xd0>)
 8007fb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	22ff      	movs	r2, #255	@ 0xff
 8007fbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800807c <xPortStartScheduler+0xd4>)
 8007fd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8008080 <xPortStartScheduler+0xd8>)
 8007fd8:	2207      	movs	r2, #7
 8007fda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fdc:	e009      	b.n	8007ff2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007fde:	4b28      	ldr	r3, [pc, #160]	@ (8008080 <xPortStartScheduler+0xd8>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	4a26      	ldr	r2, [pc, #152]	@ (8008080 <xPortStartScheduler+0xd8>)
 8007fe6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ff2:	78fb      	ldrb	r3, [r7, #3]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ffa:	2b80      	cmp	r3, #128	@ 0x80
 8007ffc:	d0ef      	beq.n	8007fde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ffe:	4b20      	ldr	r3, [pc, #128]	@ (8008080 <xPortStartScheduler+0xd8>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f1c3 0307 	rsb	r3, r3, #7
 8008006:	2b04      	cmp	r3, #4
 8008008:	d00b      	beq.n	8008022 <xPortStartScheduler+0x7a>
	__asm volatile
 800800a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	60bb      	str	r3, [r7, #8]
}
 800801c:	bf00      	nop
 800801e:	bf00      	nop
 8008020:	e7fd      	b.n	800801e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008022:	4b17      	ldr	r3, [pc, #92]	@ (8008080 <xPortStartScheduler+0xd8>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	021b      	lsls	r3, r3, #8
 8008028:	4a15      	ldr	r2, [pc, #84]	@ (8008080 <xPortStartScheduler+0xd8>)
 800802a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800802c:	4b14      	ldr	r3, [pc, #80]	@ (8008080 <xPortStartScheduler+0xd8>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008034:	4a12      	ldr	r2, [pc, #72]	@ (8008080 <xPortStartScheduler+0xd8>)
 8008036:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	b2da      	uxtb	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008040:	4b10      	ldr	r3, [pc, #64]	@ (8008084 <xPortStartScheduler+0xdc>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a0f      	ldr	r2, [pc, #60]	@ (8008084 <xPortStartScheduler+0xdc>)
 8008046:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800804a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800804c:	4b0d      	ldr	r3, [pc, #52]	@ (8008084 <xPortStartScheduler+0xdc>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a0c      	ldr	r2, [pc, #48]	@ (8008084 <xPortStartScheduler+0xdc>)
 8008052:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008056:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008058:	f000 f8b8 	bl	80081cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800805c:	4b0a      	ldr	r3, [pc, #40]	@ (8008088 <xPortStartScheduler+0xe0>)
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008062:	f7ff ff91 	bl	8007f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008066:	f7ff fab5 	bl	80075d4 <vTaskSwitchContext>
	prvTaskExitError();
 800806a:	f7ff ff47 	bl	8007efc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	e000e400 	.word	0xe000e400
 800807c:	2000062c 	.word	0x2000062c
 8008080:	20000630 	.word	0x20000630
 8008084:	e000ed20 	.word	0xe000ed20
 8008088:	2000003c 	.word	0x2000003c

0800808c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	607b      	str	r3, [r7, #4]
}
 80080a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080a6:	4b0f      	ldr	r3, [pc, #60]	@ (80080e4 <vPortEnterCritical+0x58>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3301      	adds	r3, #1
 80080ac:	4a0d      	ldr	r2, [pc, #52]	@ (80080e4 <vPortEnterCritical+0x58>)
 80080ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080b0:	4b0c      	ldr	r3, [pc, #48]	@ (80080e4 <vPortEnterCritical+0x58>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d110      	bne.n	80080da <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080b8:	4b0b      	ldr	r3, [pc, #44]	@ (80080e8 <vPortEnterCritical+0x5c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00b      	beq.n	80080da <vPortEnterCritical+0x4e>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	603b      	str	r3, [r7, #0]
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop
 80080d8:	e7fd      	b.n	80080d6 <vPortEnterCritical+0x4a>
	}
}
 80080da:	bf00      	nop
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	bc80      	pop	{r7}
 80080e2:	4770      	bx	lr
 80080e4:	2000003c 	.word	0x2000003c
 80080e8:	e000ed04 	.word	0xe000ed04

080080ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080f2:	4b12      	ldr	r3, [pc, #72]	@ (800813c <vPortExitCritical+0x50>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10b      	bne.n	8008112 <vPortExitCritical+0x26>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	607b      	str	r3, [r7, #4]
}
 800810c:	bf00      	nop
 800810e:	bf00      	nop
 8008110:	e7fd      	b.n	800810e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008112:	4b0a      	ldr	r3, [pc, #40]	@ (800813c <vPortExitCritical+0x50>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3b01      	subs	r3, #1
 8008118:	4a08      	ldr	r2, [pc, #32]	@ (800813c <vPortExitCritical+0x50>)
 800811a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800811c:	4b07      	ldr	r3, [pc, #28]	@ (800813c <vPortExitCritical+0x50>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d105      	bne.n	8008130 <vPortExitCritical+0x44>
 8008124:	2300      	movs	r3, #0
 8008126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	f383 8811 	msr	BASEPRI, r3
}
 800812e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	bc80      	pop	{r7}
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	2000003c 	.word	0x2000003c

08008140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008140:	f3ef 8009 	mrs	r0, PSP
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	4b0d      	ldr	r3, [pc, #52]	@ (8008180 <pxCurrentTCBConst>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008150:	6010      	str	r0, [r2, #0]
 8008152:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008156:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800815a:	f380 8811 	msr	BASEPRI, r0
 800815e:	f7ff fa39 	bl	80075d4 <vTaskSwitchContext>
 8008162:	f04f 0000 	mov.w	r0, #0
 8008166:	f380 8811 	msr	BASEPRI, r0
 800816a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800816e:	6819      	ldr	r1, [r3, #0]
 8008170:	6808      	ldr	r0, [r1, #0]
 8008172:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008176:	f380 8809 	msr	PSP, r0
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	4770      	bx	lr

08008180 <pxCurrentTCBConst>:
 8008180:	20000500 	.word	0x20000500
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop

08008188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	607b      	str	r3, [r7, #4]
}
 80081a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081a2:	f7ff f95d 	bl	8007460 <xTaskIncrementTick>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081ac:	4b06      	ldr	r3, [pc, #24]	@ (80081c8 <SysTick_Handler+0x40>)
 80081ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	2300      	movs	r3, #0
 80081b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f383 8811 	msr	BASEPRI, r3
}
 80081be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	e000ed04 	.word	0xe000ed04

080081cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081d0:	4b0a      	ldr	r3, [pc, #40]	@ (80081fc <vPortSetupTimerInterrupt+0x30>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008200 <vPortSetupTimerInterrupt+0x34>)
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081dc:	4b09      	ldr	r3, [pc, #36]	@ (8008204 <vPortSetupTimerInterrupt+0x38>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a09      	ldr	r2, [pc, #36]	@ (8008208 <vPortSetupTimerInterrupt+0x3c>)
 80081e2:	fba2 2303 	umull	r2, r3, r2, r3
 80081e6:	099b      	lsrs	r3, r3, #6
 80081e8:	4a08      	ldr	r2, [pc, #32]	@ (800820c <vPortSetupTimerInterrupt+0x40>)
 80081ea:	3b01      	subs	r3, #1
 80081ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081ee:	4b03      	ldr	r3, [pc, #12]	@ (80081fc <vPortSetupTimerInterrupt+0x30>)
 80081f0:	2207      	movs	r2, #7
 80081f2:	601a      	str	r2, [r3, #0]
}
 80081f4:	bf00      	nop
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bc80      	pop	{r7}
 80081fa:	4770      	bx	lr
 80081fc:	e000e010 	.word	0xe000e010
 8008200:	e000e018 	.word	0xe000e018
 8008204:	20000030 	.word	0x20000030
 8008208:	10624dd3 	.word	0x10624dd3
 800820c:	e000e014 	.word	0xe000e014

08008210 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008216:	f3ef 8305 	mrs	r3, IPSR
 800821a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b0f      	cmp	r3, #15
 8008220:	d915      	bls.n	800824e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008222:	4a17      	ldr	r2, [pc, #92]	@ (8008280 <vPortValidateInterruptPriority+0x70>)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4413      	add	r3, r2
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800822c:	4b15      	ldr	r3, [pc, #84]	@ (8008284 <vPortValidateInterruptPriority+0x74>)
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	7afa      	ldrb	r2, [r7, #11]
 8008232:	429a      	cmp	r2, r3
 8008234:	d20b      	bcs.n	800824e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	607b      	str	r3, [r7, #4]
}
 8008248:	bf00      	nop
 800824a:	bf00      	nop
 800824c:	e7fd      	b.n	800824a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800824e:	4b0e      	ldr	r3, [pc, #56]	@ (8008288 <vPortValidateInterruptPriority+0x78>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008256:	4b0d      	ldr	r3, [pc, #52]	@ (800828c <vPortValidateInterruptPriority+0x7c>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	d90b      	bls.n	8008276 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	603b      	str	r3, [r7, #0]
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	e7fd      	b.n	8008272 <vPortValidateInterruptPriority+0x62>
	}
 8008276:	bf00      	nop
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	bc80      	pop	{r7}
 800827e:	4770      	bx	lr
 8008280:	e000e3f0 	.word	0xe000e3f0
 8008284:	2000062c 	.word	0x2000062c
 8008288:	e000ed0c 	.word	0xe000ed0c
 800828c:	20000630 	.word	0x20000630

08008290 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b08a      	sub	sp, #40	@ 0x28
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008298:	2300      	movs	r3, #0
 800829a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800829c:	f7ff f834 	bl	8007308 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082a0:	4b5c      	ldr	r3, [pc, #368]	@ (8008414 <pvPortMalloc+0x184>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082a8:	f000 f924 	bl	80084f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082ac:	4b5a      	ldr	r3, [pc, #360]	@ (8008418 <pvPortMalloc+0x188>)
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4013      	ands	r3, r2
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f040 8095 	bne.w	80083e4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d01e      	beq.n	80082fe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80082c0:	2208      	movs	r2, #8
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4413      	add	r3, r2
 80082c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d015      	beq.n	80082fe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f023 0307 	bic.w	r3, r3, #7
 80082d8:	3308      	adds	r3, #8
 80082da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f003 0307 	and.w	r3, r3, #7
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00b      	beq.n	80082fe <pvPortMalloc+0x6e>
	__asm volatile
 80082e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	617b      	str	r3, [r7, #20]
}
 80082f8:	bf00      	nop
 80082fa:	bf00      	nop
 80082fc:	e7fd      	b.n	80082fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d06f      	beq.n	80083e4 <pvPortMalloc+0x154>
 8008304:	4b45      	ldr	r3, [pc, #276]	@ (800841c <pvPortMalloc+0x18c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	429a      	cmp	r2, r3
 800830c:	d86a      	bhi.n	80083e4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800830e:	4b44      	ldr	r3, [pc, #272]	@ (8008420 <pvPortMalloc+0x190>)
 8008310:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008312:	4b43      	ldr	r3, [pc, #268]	@ (8008420 <pvPortMalloc+0x190>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008318:	e004      	b.n	8008324 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800831e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	429a      	cmp	r2, r3
 800832c:	d903      	bls.n	8008336 <pvPortMalloc+0xa6>
 800832e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1f1      	bne.n	800831a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008336:	4b37      	ldr	r3, [pc, #220]	@ (8008414 <pvPortMalloc+0x184>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800833c:	429a      	cmp	r2, r3
 800833e:	d051      	beq.n	80083e4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2208      	movs	r2, #8
 8008346:	4413      	add	r3, r2
 8008348:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800834a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	1ad2      	subs	r2, r2, r3
 800835a:	2308      	movs	r3, #8
 800835c:	005b      	lsls	r3, r3, #1
 800835e:	429a      	cmp	r2, r3
 8008360:	d920      	bls.n	80083a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4413      	add	r3, r2
 8008368:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00b      	beq.n	800838c <pvPortMalloc+0xfc>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	613b      	str	r3, [r7, #16]
}
 8008386:	bf00      	nop
 8008388:	bf00      	nop
 800838a:	e7fd      	b.n	8008388 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800838c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	1ad2      	subs	r2, r2, r3
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800839e:	69b8      	ldr	r0, [r7, #24]
 80083a0:	f000 f90a 	bl	80085b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083a4:	4b1d      	ldr	r3, [pc, #116]	@ (800841c <pvPortMalloc+0x18c>)
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	4a1b      	ldr	r2, [pc, #108]	@ (800841c <pvPortMalloc+0x18c>)
 80083b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083b2:	4b1a      	ldr	r3, [pc, #104]	@ (800841c <pvPortMalloc+0x18c>)
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008424 <pvPortMalloc+0x194>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d203      	bcs.n	80083c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083be:	4b17      	ldr	r3, [pc, #92]	@ (800841c <pvPortMalloc+0x18c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a18      	ldr	r2, [pc, #96]	@ (8008424 <pvPortMalloc+0x194>)
 80083c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	4b13      	ldr	r3, [pc, #76]	@ (8008418 <pvPortMalloc+0x188>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	431a      	orrs	r2, r3
 80083d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d6:	2200      	movs	r2, #0
 80083d8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083da:	4b13      	ldr	r3, [pc, #76]	@ (8008428 <pvPortMalloc+0x198>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3301      	adds	r3, #1
 80083e0:	4a11      	ldr	r2, [pc, #68]	@ (8008428 <pvPortMalloc+0x198>)
 80083e2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083e4:	f7fe ff9e 	bl	8007324 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00b      	beq.n	800840a <pvPortMalloc+0x17a>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	60fb      	str	r3, [r7, #12]
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	e7fd      	b.n	8008406 <pvPortMalloc+0x176>
	return pvReturn;
 800840a:	69fb      	ldr	r3, [r7, #28]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3728      	adds	r7, #40	@ 0x28
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	20001d48 	.word	0x20001d48
 8008418:	20001d5c 	.word	0x20001d5c
 800841c:	20001d4c 	.word	0x20001d4c
 8008420:	20001d40 	.word	0x20001d40
 8008424:	20001d50 	.word	0x20001d50
 8008428:	20001d54 	.word	0x20001d54

0800842c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d04f      	beq.n	80084de <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800843e:	2308      	movs	r3, #8
 8008440:	425b      	negs	r3, r3
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	4413      	add	r3, r2
 8008446:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	4b25      	ldr	r3, [pc, #148]	@ (80084e8 <vPortFree+0xbc>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4013      	ands	r3, r2
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10b      	bne.n	8008472 <vPortFree+0x46>
	__asm volatile
 800845a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	60fb      	str	r3, [r7, #12]
}
 800846c:	bf00      	nop
 800846e:	bf00      	nop
 8008470:	e7fd      	b.n	800846e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00b      	beq.n	8008492 <vPortFree+0x66>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	60bb      	str	r3, [r7, #8]
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	e7fd      	b.n	800848e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	4b14      	ldr	r3, [pc, #80]	@ (80084e8 <vPortFree+0xbc>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4013      	ands	r3, r2
 800849c:	2b00      	cmp	r3, #0
 800849e:	d01e      	beq.n	80084de <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d11a      	bne.n	80084de <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	4b0e      	ldr	r3, [pc, #56]	@ (80084e8 <vPortFree+0xbc>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	43db      	mvns	r3, r3
 80084b2:	401a      	ands	r2, r3
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084b8:	f7fe ff26 	bl	8007308 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	4b0a      	ldr	r3, [pc, #40]	@ (80084ec <vPortFree+0xc0>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4413      	add	r3, r2
 80084c6:	4a09      	ldr	r2, [pc, #36]	@ (80084ec <vPortFree+0xc0>)
 80084c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084ca:	6938      	ldr	r0, [r7, #16]
 80084cc:	f000 f874 	bl	80085b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084d0:	4b07      	ldr	r3, [pc, #28]	@ (80084f0 <vPortFree+0xc4>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3301      	adds	r3, #1
 80084d6:	4a06      	ldr	r2, [pc, #24]	@ (80084f0 <vPortFree+0xc4>)
 80084d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084da:	f7fe ff23 	bl	8007324 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084de:	bf00      	nop
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20001d5c 	.word	0x20001d5c
 80084ec:	20001d4c 	.word	0x20001d4c
 80084f0:	20001d58 	.word	0x20001d58

080084f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084fa:	f241 730c 	movw	r3, #5900	@ 0x170c
 80084fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008500:	4b27      	ldr	r3, [pc, #156]	@ (80085a0 <prvHeapInit+0xac>)
 8008502:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00c      	beq.n	8008528 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3307      	adds	r3, #7
 8008512:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0307 	bic.w	r3, r3, #7
 800851a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	4a1f      	ldr	r2, [pc, #124]	@ (80085a0 <prvHeapInit+0xac>)
 8008524:	4413      	add	r3, r2
 8008526:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800852c:	4a1d      	ldr	r2, [pc, #116]	@ (80085a4 <prvHeapInit+0xb0>)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008532:	4b1c      	ldr	r3, [pc, #112]	@ (80085a4 <prvHeapInit+0xb0>)
 8008534:	2200      	movs	r2, #0
 8008536:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	4413      	add	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008540:	2208      	movs	r2, #8
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f023 0307 	bic.w	r3, r3, #7
 800854e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4a15      	ldr	r2, [pc, #84]	@ (80085a8 <prvHeapInit+0xb4>)
 8008554:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008556:	4b14      	ldr	r3, [pc, #80]	@ (80085a8 <prvHeapInit+0xb4>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2200      	movs	r2, #0
 800855c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800855e:	4b12      	ldr	r3, [pc, #72]	@ (80085a8 <prvHeapInit+0xb4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2200      	movs	r2, #0
 8008564:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	1ad2      	subs	r2, r2, r3
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008574:	4b0c      	ldr	r3, [pc, #48]	@ (80085a8 <prvHeapInit+0xb4>)
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	4a0a      	ldr	r2, [pc, #40]	@ (80085ac <prvHeapInit+0xb8>)
 8008582:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	4a09      	ldr	r2, [pc, #36]	@ (80085b0 <prvHeapInit+0xbc>)
 800858a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800858c:	4b09      	ldr	r3, [pc, #36]	@ (80085b4 <prvHeapInit+0xc0>)
 800858e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008592:	601a      	str	r2, [r3, #0]
}
 8008594:	bf00      	nop
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	bc80      	pop	{r7}
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	20000634 	.word	0x20000634
 80085a4:	20001d40 	.word	0x20001d40
 80085a8:	20001d48 	.word	0x20001d48
 80085ac:	20001d50 	.word	0x20001d50
 80085b0:	20001d4c 	.word	0x20001d4c
 80085b4:	20001d5c 	.word	0x20001d5c

080085b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085c0:	4b27      	ldr	r3, [pc, #156]	@ (8008660 <prvInsertBlockIntoFreeList+0xa8>)
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e002      	b.n	80085cc <prvInsertBlockIntoFreeList+0x14>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d8f7      	bhi.n	80085c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	4413      	add	r3, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d108      	bne.n	80085fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	441a      	add	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	441a      	add	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d118      	bne.n	8008640 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	4b14      	ldr	r3, [pc, #80]	@ (8008664 <prvInsertBlockIntoFreeList+0xac>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d00d      	beq.n	8008636 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	441a      	add	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	e008      	b.n	8008648 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008636:	4b0b      	ldr	r3, [pc, #44]	@ (8008664 <prvInsertBlockIntoFreeList+0xac>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	e003      	b.n	8008648 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	429a      	cmp	r2, r3
 800864e:	d002      	beq.n	8008656 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008656:	bf00      	nop
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	bc80      	pop	{r7}
 800865e:	4770      	bx	lr
 8008660:	20001d40 	.word	0x20001d40
 8008664:	20001d48 	.word	0x20001d48

08008668 <sniprintf>:
 8008668:	b40c      	push	{r2, r3}
 800866a:	b530      	push	{r4, r5, lr}
 800866c:	4b17      	ldr	r3, [pc, #92]	@ (80086cc <sniprintf+0x64>)
 800866e:	1e0c      	subs	r4, r1, #0
 8008670:	681d      	ldr	r5, [r3, #0]
 8008672:	b09d      	sub	sp, #116	@ 0x74
 8008674:	da08      	bge.n	8008688 <sniprintf+0x20>
 8008676:	238b      	movs	r3, #139	@ 0x8b
 8008678:	f04f 30ff 	mov.w	r0, #4294967295
 800867c:	602b      	str	r3, [r5, #0]
 800867e:	b01d      	add	sp, #116	@ 0x74
 8008680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008684:	b002      	add	sp, #8
 8008686:	4770      	bx	lr
 8008688:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800868c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008690:	bf0c      	ite	eq
 8008692:	4623      	moveq	r3, r4
 8008694:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008698:	9304      	str	r3, [sp, #16]
 800869a:	9307      	str	r3, [sp, #28]
 800869c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80086a0:	9002      	str	r0, [sp, #8]
 80086a2:	9006      	str	r0, [sp, #24]
 80086a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80086a8:	4628      	mov	r0, r5
 80086aa:	ab21      	add	r3, sp, #132	@ 0x84
 80086ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80086ae:	a902      	add	r1, sp, #8
 80086b0:	9301      	str	r3, [sp, #4]
 80086b2:	f000 f9c1 	bl	8008a38 <_svfiprintf_r>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	bfbc      	itt	lt
 80086ba:	238b      	movlt	r3, #139	@ 0x8b
 80086bc:	602b      	strlt	r3, [r5, #0]
 80086be:	2c00      	cmp	r4, #0
 80086c0:	d0dd      	beq.n	800867e <sniprintf+0x16>
 80086c2:	2200      	movs	r2, #0
 80086c4:	9b02      	ldr	r3, [sp, #8]
 80086c6:	701a      	strb	r2, [r3, #0]
 80086c8:	e7d9      	b.n	800867e <sniprintf+0x16>
 80086ca:	bf00      	nop
 80086cc:	20000040 	.word	0x20000040

080086d0 <siprintf>:
 80086d0:	b40e      	push	{r1, r2, r3}
 80086d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80086d6:	b500      	push	{lr}
 80086d8:	b09c      	sub	sp, #112	@ 0x70
 80086da:	ab1d      	add	r3, sp, #116	@ 0x74
 80086dc:	9002      	str	r0, [sp, #8]
 80086de:	9006      	str	r0, [sp, #24]
 80086e0:	9107      	str	r1, [sp, #28]
 80086e2:	9104      	str	r1, [sp, #16]
 80086e4:	4808      	ldr	r0, [pc, #32]	@ (8008708 <siprintf+0x38>)
 80086e6:	4909      	ldr	r1, [pc, #36]	@ (800870c <siprintf+0x3c>)
 80086e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ec:	9105      	str	r1, [sp, #20]
 80086ee:	6800      	ldr	r0, [r0, #0]
 80086f0:	a902      	add	r1, sp, #8
 80086f2:	9301      	str	r3, [sp, #4]
 80086f4:	f000 f9a0 	bl	8008a38 <_svfiprintf_r>
 80086f8:	2200      	movs	r2, #0
 80086fa:	9b02      	ldr	r3, [sp, #8]
 80086fc:	701a      	strb	r2, [r3, #0]
 80086fe:	b01c      	add	sp, #112	@ 0x70
 8008700:	f85d eb04 	ldr.w	lr, [sp], #4
 8008704:	b003      	add	sp, #12
 8008706:	4770      	bx	lr
 8008708:	20000040 	.word	0x20000040
 800870c:	ffff0208 	.word	0xffff0208

08008710 <memset>:
 8008710:	4603      	mov	r3, r0
 8008712:	4402      	add	r2, r0
 8008714:	4293      	cmp	r3, r2
 8008716:	d100      	bne.n	800871a <memset+0xa>
 8008718:	4770      	bx	lr
 800871a:	f803 1b01 	strb.w	r1, [r3], #1
 800871e:	e7f9      	b.n	8008714 <memset+0x4>

08008720 <__errno>:
 8008720:	4b01      	ldr	r3, [pc, #4]	@ (8008728 <__errno+0x8>)
 8008722:	6818      	ldr	r0, [r3, #0]
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	20000040 	.word	0x20000040

0800872c <__libc_init_array>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	2600      	movs	r6, #0
 8008730:	4d0c      	ldr	r5, [pc, #48]	@ (8008764 <__libc_init_array+0x38>)
 8008732:	4c0d      	ldr	r4, [pc, #52]	@ (8008768 <__libc_init_array+0x3c>)
 8008734:	1b64      	subs	r4, r4, r5
 8008736:	10a4      	asrs	r4, r4, #2
 8008738:	42a6      	cmp	r6, r4
 800873a:	d109      	bne.n	8008750 <__libc_init_array+0x24>
 800873c:	f001 fbcc 	bl	8009ed8 <_init>
 8008740:	2600      	movs	r6, #0
 8008742:	4d0a      	ldr	r5, [pc, #40]	@ (800876c <__libc_init_array+0x40>)
 8008744:	4c0a      	ldr	r4, [pc, #40]	@ (8008770 <__libc_init_array+0x44>)
 8008746:	1b64      	subs	r4, r4, r5
 8008748:	10a4      	asrs	r4, r4, #2
 800874a:	42a6      	cmp	r6, r4
 800874c:	d105      	bne.n	800875a <__libc_init_array+0x2e>
 800874e:	bd70      	pop	{r4, r5, r6, pc}
 8008750:	f855 3b04 	ldr.w	r3, [r5], #4
 8008754:	4798      	blx	r3
 8008756:	3601      	adds	r6, #1
 8008758:	e7ee      	b.n	8008738 <__libc_init_array+0xc>
 800875a:	f855 3b04 	ldr.w	r3, [r5], #4
 800875e:	4798      	blx	r3
 8008760:	3601      	adds	r6, #1
 8008762:	e7f2      	b.n	800874a <__libc_init_array+0x1e>
 8008764:	0800a128 	.word	0x0800a128
 8008768:	0800a128 	.word	0x0800a128
 800876c:	0800a128 	.word	0x0800a128
 8008770:	0800a12c 	.word	0x0800a12c

08008774 <__retarget_lock_acquire_recursive>:
 8008774:	4770      	bx	lr

08008776 <__retarget_lock_release_recursive>:
 8008776:	4770      	bx	lr

08008778 <memcpy>:
 8008778:	440a      	add	r2, r1
 800877a:	4291      	cmp	r1, r2
 800877c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008780:	d100      	bne.n	8008784 <memcpy+0xc>
 8008782:	4770      	bx	lr
 8008784:	b510      	push	{r4, lr}
 8008786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800878a:	4291      	cmp	r1, r2
 800878c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008790:	d1f9      	bne.n	8008786 <memcpy+0xe>
 8008792:	bd10      	pop	{r4, pc}

08008794 <_free_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4605      	mov	r5, r0
 8008798:	2900      	cmp	r1, #0
 800879a:	d040      	beq.n	800881e <_free_r+0x8a>
 800879c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087a0:	1f0c      	subs	r4, r1, #4
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	bfb8      	it	lt
 80087a6:	18e4      	addlt	r4, r4, r3
 80087a8:	f000 f8de 	bl	8008968 <__malloc_lock>
 80087ac:	4a1c      	ldr	r2, [pc, #112]	@ (8008820 <_free_r+0x8c>)
 80087ae:	6813      	ldr	r3, [r2, #0]
 80087b0:	b933      	cbnz	r3, 80087c0 <_free_r+0x2c>
 80087b2:	6063      	str	r3, [r4, #4]
 80087b4:	6014      	str	r4, [r2, #0]
 80087b6:	4628      	mov	r0, r5
 80087b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087bc:	f000 b8da 	b.w	8008974 <__malloc_unlock>
 80087c0:	42a3      	cmp	r3, r4
 80087c2:	d908      	bls.n	80087d6 <_free_r+0x42>
 80087c4:	6820      	ldr	r0, [r4, #0]
 80087c6:	1821      	adds	r1, r4, r0
 80087c8:	428b      	cmp	r3, r1
 80087ca:	bf01      	itttt	eq
 80087cc:	6819      	ldreq	r1, [r3, #0]
 80087ce:	685b      	ldreq	r3, [r3, #4]
 80087d0:	1809      	addeq	r1, r1, r0
 80087d2:	6021      	streq	r1, [r4, #0]
 80087d4:	e7ed      	b.n	80087b2 <_free_r+0x1e>
 80087d6:	461a      	mov	r2, r3
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	b10b      	cbz	r3, 80087e0 <_free_r+0x4c>
 80087dc:	42a3      	cmp	r3, r4
 80087de:	d9fa      	bls.n	80087d6 <_free_r+0x42>
 80087e0:	6811      	ldr	r1, [r2, #0]
 80087e2:	1850      	adds	r0, r2, r1
 80087e4:	42a0      	cmp	r0, r4
 80087e6:	d10b      	bne.n	8008800 <_free_r+0x6c>
 80087e8:	6820      	ldr	r0, [r4, #0]
 80087ea:	4401      	add	r1, r0
 80087ec:	1850      	adds	r0, r2, r1
 80087ee:	4283      	cmp	r3, r0
 80087f0:	6011      	str	r1, [r2, #0]
 80087f2:	d1e0      	bne.n	80087b6 <_free_r+0x22>
 80087f4:	6818      	ldr	r0, [r3, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	4408      	add	r0, r1
 80087fa:	6010      	str	r0, [r2, #0]
 80087fc:	6053      	str	r3, [r2, #4]
 80087fe:	e7da      	b.n	80087b6 <_free_r+0x22>
 8008800:	d902      	bls.n	8008808 <_free_r+0x74>
 8008802:	230c      	movs	r3, #12
 8008804:	602b      	str	r3, [r5, #0]
 8008806:	e7d6      	b.n	80087b6 <_free_r+0x22>
 8008808:	6820      	ldr	r0, [r4, #0]
 800880a:	1821      	adds	r1, r4, r0
 800880c:	428b      	cmp	r3, r1
 800880e:	bf01      	itttt	eq
 8008810:	6819      	ldreq	r1, [r3, #0]
 8008812:	685b      	ldreq	r3, [r3, #4]
 8008814:	1809      	addeq	r1, r1, r0
 8008816:	6021      	streq	r1, [r4, #0]
 8008818:	6063      	str	r3, [r4, #4]
 800881a:	6054      	str	r4, [r2, #4]
 800881c:	e7cb      	b.n	80087b6 <_free_r+0x22>
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	20001ea4 	.word	0x20001ea4

08008824 <sbrk_aligned>:
 8008824:	b570      	push	{r4, r5, r6, lr}
 8008826:	4e0f      	ldr	r6, [pc, #60]	@ (8008864 <sbrk_aligned+0x40>)
 8008828:	460c      	mov	r4, r1
 800882a:	6831      	ldr	r1, [r6, #0]
 800882c:	4605      	mov	r5, r0
 800882e:	b911      	cbnz	r1, 8008836 <sbrk_aligned+0x12>
 8008830:	f000 fbaa 	bl	8008f88 <_sbrk_r>
 8008834:	6030      	str	r0, [r6, #0]
 8008836:	4621      	mov	r1, r4
 8008838:	4628      	mov	r0, r5
 800883a:	f000 fba5 	bl	8008f88 <_sbrk_r>
 800883e:	1c43      	adds	r3, r0, #1
 8008840:	d103      	bne.n	800884a <sbrk_aligned+0x26>
 8008842:	f04f 34ff 	mov.w	r4, #4294967295
 8008846:	4620      	mov	r0, r4
 8008848:	bd70      	pop	{r4, r5, r6, pc}
 800884a:	1cc4      	adds	r4, r0, #3
 800884c:	f024 0403 	bic.w	r4, r4, #3
 8008850:	42a0      	cmp	r0, r4
 8008852:	d0f8      	beq.n	8008846 <sbrk_aligned+0x22>
 8008854:	1a21      	subs	r1, r4, r0
 8008856:	4628      	mov	r0, r5
 8008858:	f000 fb96 	bl	8008f88 <_sbrk_r>
 800885c:	3001      	adds	r0, #1
 800885e:	d1f2      	bne.n	8008846 <sbrk_aligned+0x22>
 8008860:	e7ef      	b.n	8008842 <sbrk_aligned+0x1e>
 8008862:	bf00      	nop
 8008864:	20001ea0 	.word	0x20001ea0

08008868 <_malloc_r>:
 8008868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800886c:	1ccd      	adds	r5, r1, #3
 800886e:	f025 0503 	bic.w	r5, r5, #3
 8008872:	3508      	adds	r5, #8
 8008874:	2d0c      	cmp	r5, #12
 8008876:	bf38      	it	cc
 8008878:	250c      	movcc	r5, #12
 800887a:	2d00      	cmp	r5, #0
 800887c:	4606      	mov	r6, r0
 800887e:	db01      	blt.n	8008884 <_malloc_r+0x1c>
 8008880:	42a9      	cmp	r1, r5
 8008882:	d904      	bls.n	800888e <_malloc_r+0x26>
 8008884:	230c      	movs	r3, #12
 8008886:	6033      	str	r3, [r6, #0]
 8008888:	2000      	movs	r0, #0
 800888a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800888e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008964 <_malloc_r+0xfc>
 8008892:	f000 f869 	bl	8008968 <__malloc_lock>
 8008896:	f8d8 3000 	ldr.w	r3, [r8]
 800889a:	461c      	mov	r4, r3
 800889c:	bb44      	cbnz	r4, 80088f0 <_malloc_r+0x88>
 800889e:	4629      	mov	r1, r5
 80088a0:	4630      	mov	r0, r6
 80088a2:	f7ff ffbf 	bl	8008824 <sbrk_aligned>
 80088a6:	1c43      	adds	r3, r0, #1
 80088a8:	4604      	mov	r4, r0
 80088aa:	d158      	bne.n	800895e <_malloc_r+0xf6>
 80088ac:	f8d8 4000 	ldr.w	r4, [r8]
 80088b0:	4627      	mov	r7, r4
 80088b2:	2f00      	cmp	r7, #0
 80088b4:	d143      	bne.n	800893e <_malloc_r+0xd6>
 80088b6:	2c00      	cmp	r4, #0
 80088b8:	d04b      	beq.n	8008952 <_malloc_r+0xea>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	4639      	mov	r1, r7
 80088be:	4630      	mov	r0, r6
 80088c0:	eb04 0903 	add.w	r9, r4, r3
 80088c4:	f000 fb60 	bl	8008f88 <_sbrk_r>
 80088c8:	4581      	cmp	r9, r0
 80088ca:	d142      	bne.n	8008952 <_malloc_r+0xea>
 80088cc:	6821      	ldr	r1, [r4, #0]
 80088ce:	4630      	mov	r0, r6
 80088d0:	1a6d      	subs	r5, r5, r1
 80088d2:	4629      	mov	r1, r5
 80088d4:	f7ff ffa6 	bl	8008824 <sbrk_aligned>
 80088d8:	3001      	adds	r0, #1
 80088da:	d03a      	beq.n	8008952 <_malloc_r+0xea>
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	442b      	add	r3, r5
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	f8d8 3000 	ldr.w	r3, [r8]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	bb62      	cbnz	r2, 8008944 <_malloc_r+0xdc>
 80088ea:	f8c8 7000 	str.w	r7, [r8]
 80088ee:	e00f      	b.n	8008910 <_malloc_r+0xa8>
 80088f0:	6822      	ldr	r2, [r4, #0]
 80088f2:	1b52      	subs	r2, r2, r5
 80088f4:	d420      	bmi.n	8008938 <_malloc_r+0xd0>
 80088f6:	2a0b      	cmp	r2, #11
 80088f8:	d917      	bls.n	800892a <_malloc_r+0xc2>
 80088fa:	1961      	adds	r1, r4, r5
 80088fc:	42a3      	cmp	r3, r4
 80088fe:	6025      	str	r5, [r4, #0]
 8008900:	bf18      	it	ne
 8008902:	6059      	strne	r1, [r3, #4]
 8008904:	6863      	ldr	r3, [r4, #4]
 8008906:	bf08      	it	eq
 8008908:	f8c8 1000 	streq.w	r1, [r8]
 800890c:	5162      	str	r2, [r4, r5]
 800890e:	604b      	str	r3, [r1, #4]
 8008910:	4630      	mov	r0, r6
 8008912:	f000 f82f 	bl	8008974 <__malloc_unlock>
 8008916:	f104 000b 	add.w	r0, r4, #11
 800891a:	1d23      	adds	r3, r4, #4
 800891c:	f020 0007 	bic.w	r0, r0, #7
 8008920:	1ac2      	subs	r2, r0, r3
 8008922:	bf1c      	itt	ne
 8008924:	1a1b      	subne	r3, r3, r0
 8008926:	50a3      	strne	r3, [r4, r2]
 8008928:	e7af      	b.n	800888a <_malloc_r+0x22>
 800892a:	6862      	ldr	r2, [r4, #4]
 800892c:	42a3      	cmp	r3, r4
 800892e:	bf0c      	ite	eq
 8008930:	f8c8 2000 	streq.w	r2, [r8]
 8008934:	605a      	strne	r2, [r3, #4]
 8008936:	e7eb      	b.n	8008910 <_malloc_r+0xa8>
 8008938:	4623      	mov	r3, r4
 800893a:	6864      	ldr	r4, [r4, #4]
 800893c:	e7ae      	b.n	800889c <_malloc_r+0x34>
 800893e:	463c      	mov	r4, r7
 8008940:	687f      	ldr	r7, [r7, #4]
 8008942:	e7b6      	b.n	80088b2 <_malloc_r+0x4a>
 8008944:	461a      	mov	r2, r3
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	42a3      	cmp	r3, r4
 800894a:	d1fb      	bne.n	8008944 <_malloc_r+0xdc>
 800894c:	2300      	movs	r3, #0
 800894e:	6053      	str	r3, [r2, #4]
 8008950:	e7de      	b.n	8008910 <_malloc_r+0xa8>
 8008952:	230c      	movs	r3, #12
 8008954:	4630      	mov	r0, r6
 8008956:	6033      	str	r3, [r6, #0]
 8008958:	f000 f80c 	bl	8008974 <__malloc_unlock>
 800895c:	e794      	b.n	8008888 <_malloc_r+0x20>
 800895e:	6005      	str	r5, [r0, #0]
 8008960:	e7d6      	b.n	8008910 <_malloc_r+0xa8>
 8008962:	bf00      	nop
 8008964:	20001ea4 	.word	0x20001ea4

08008968 <__malloc_lock>:
 8008968:	4801      	ldr	r0, [pc, #4]	@ (8008970 <__malloc_lock+0x8>)
 800896a:	f7ff bf03 	b.w	8008774 <__retarget_lock_acquire_recursive>
 800896e:	bf00      	nop
 8008970:	20001e9c 	.word	0x20001e9c

08008974 <__malloc_unlock>:
 8008974:	4801      	ldr	r0, [pc, #4]	@ (800897c <__malloc_unlock+0x8>)
 8008976:	f7ff befe 	b.w	8008776 <__retarget_lock_release_recursive>
 800897a:	bf00      	nop
 800897c:	20001e9c 	.word	0x20001e9c

08008980 <__ssputs_r>:
 8008980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008984:	461f      	mov	r7, r3
 8008986:	688e      	ldr	r6, [r1, #8]
 8008988:	4682      	mov	sl, r0
 800898a:	42be      	cmp	r6, r7
 800898c:	460c      	mov	r4, r1
 800898e:	4690      	mov	r8, r2
 8008990:	680b      	ldr	r3, [r1, #0]
 8008992:	d82d      	bhi.n	80089f0 <__ssputs_r+0x70>
 8008994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008998:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800899c:	d026      	beq.n	80089ec <__ssputs_r+0x6c>
 800899e:	6965      	ldr	r5, [r4, #20]
 80089a0:	6909      	ldr	r1, [r1, #16]
 80089a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089a6:	eba3 0901 	sub.w	r9, r3, r1
 80089aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089ae:	1c7b      	adds	r3, r7, #1
 80089b0:	444b      	add	r3, r9
 80089b2:	106d      	asrs	r5, r5, #1
 80089b4:	429d      	cmp	r5, r3
 80089b6:	bf38      	it	cc
 80089b8:	461d      	movcc	r5, r3
 80089ba:	0553      	lsls	r3, r2, #21
 80089bc:	d527      	bpl.n	8008a0e <__ssputs_r+0x8e>
 80089be:	4629      	mov	r1, r5
 80089c0:	f7ff ff52 	bl	8008868 <_malloc_r>
 80089c4:	4606      	mov	r6, r0
 80089c6:	b360      	cbz	r0, 8008a22 <__ssputs_r+0xa2>
 80089c8:	464a      	mov	r2, r9
 80089ca:	6921      	ldr	r1, [r4, #16]
 80089cc:	f7ff fed4 	bl	8008778 <memcpy>
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80089d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089da:	81a3      	strh	r3, [r4, #12]
 80089dc:	6126      	str	r6, [r4, #16]
 80089de:	444e      	add	r6, r9
 80089e0:	6026      	str	r6, [r4, #0]
 80089e2:	463e      	mov	r6, r7
 80089e4:	6165      	str	r5, [r4, #20]
 80089e6:	eba5 0509 	sub.w	r5, r5, r9
 80089ea:	60a5      	str	r5, [r4, #8]
 80089ec:	42be      	cmp	r6, r7
 80089ee:	d900      	bls.n	80089f2 <__ssputs_r+0x72>
 80089f0:	463e      	mov	r6, r7
 80089f2:	4632      	mov	r2, r6
 80089f4:	4641      	mov	r1, r8
 80089f6:	6820      	ldr	r0, [r4, #0]
 80089f8:	f000 faac 	bl	8008f54 <memmove>
 80089fc:	2000      	movs	r0, #0
 80089fe:	68a3      	ldr	r3, [r4, #8]
 8008a00:	1b9b      	subs	r3, r3, r6
 8008a02:	60a3      	str	r3, [r4, #8]
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	4433      	add	r3, r6
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0e:	462a      	mov	r2, r5
 8008a10:	f000 fad8 	bl	8008fc4 <_realloc_r>
 8008a14:	4606      	mov	r6, r0
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d1e0      	bne.n	80089dc <__ssputs_r+0x5c>
 8008a1a:	4650      	mov	r0, sl
 8008a1c:	6921      	ldr	r1, [r4, #16]
 8008a1e:	f7ff feb9 	bl	8008794 <_free_r>
 8008a22:	230c      	movs	r3, #12
 8008a24:	f8ca 3000 	str.w	r3, [sl]
 8008a28:	89a3      	ldrh	r3, [r4, #12]
 8008a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a32:	81a3      	strh	r3, [r4, #12]
 8008a34:	e7e9      	b.n	8008a0a <__ssputs_r+0x8a>
	...

08008a38 <_svfiprintf_r>:
 8008a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3c:	4698      	mov	r8, r3
 8008a3e:	898b      	ldrh	r3, [r1, #12]
 8008a40:	4607      	mov	r7, r0
 8008a42:	061b      	lsls	r3, r3, #24
 8008a44:	460d      	mov	r5, r1
 8008a46:	4614      	mov	r4, r2
 8008a48:	b09d      	sub	sp, #116	@ 0x74
 8008a4a:	d510      	bpl.n	8008a6e <_svfiprintf_r+0x36>
 8008a4c:	690b      	ldr	r3, [r1, #16]
 8008a4e:	b973      	cbnz	r3, 8008a6e <_svfiprintf_r+0x36>
 8008a50:	2140      	movs	r1, #64	@ 0x40
 8008a52:	f7ff ff09 	bl	8008868 <_malloc_r>
 8008a56:	6028      	str	r0, [r5, #0]
 8008a58:	6128      	str	r0, [r5, #16]
 8008a5a:	b930      	cbnz	r0, 8008a6a <_svfiprintf_r+0x32>
 8008a5c:	230c      	movs	r3, #12
 8008a5e:	603b      	str	r3, [r7, #0]
 8008a60:	f04f 30ff 	mov.w	r0, #4294967295
 8008a64:	b01d      	add	sp, #116	@ 0x74
 8008a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6a:	2340      	movs	r3, #64	@ 0x40
 8008a6c:	616b      	str	r3, [r5, #20]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a72:	2320      	movs	r3, #32
 8008a74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a78:	2330      	movs	r3, #48	@ 0x30
 8008a7a:	f04f 0901 	mov.w	r9, #1
 8008a7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a82:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008c1c <_svfiprintf_r+0x1e4>
 8008a86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a8a:	4623      	mov	r3, r4
 8008a8c:	469a      	mov	sl, r3
 8008a8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a92:	b10a      	cbz	r2, 8008a98 <_svfiprintf_r+0x60>
 8008a94:	2a25      	cmp	r2, #37	@ 0x25
 8008a96:	d1f9      	bne.n	8008a8c <_svfiprintf_r+0x54>
 8008a98:	ebba 0b04 	subs.w	fp, sl, r4
 8008a9c:	d00b      	beq.n	8008ab6 <_svfiprintf_r+0x7e>
 8008a9e:	465b      	mov	r3, fp
 8008aa0:	4622      	mov	r2, r4
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	f7ff ff6b 	bl	8008980 <__ssputs_r>
 8008aaa:	3001      	adds	r0, #1
 8008aac:	f000 80a7 	beq.w	8008bfe <_svfiprintf_r+0x1c6>
 8008ab0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ab2:	445a      	add	r2, fp
 8008ab4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f000 809f 	beq.w	8008bfe <_svfiprintf_r+0x1c6>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aca:	f10a 0a01 	add.w	sl, sl, #1
 8008ace:	9304      	str	r3, [sp, #16]
 8008ad0:	9307      	str	r3, [sp, #28]
 8008ad2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ad6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ad8:	4654      	mov	r4, sl
 8008ada:	2205      	movs	r2, #5
 8008adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae0:	484e      	ldr	r0, [pc, #312]	@ (8008c1c <_svfiprintf_r+0x1e4>)
 8008ae2:	f000 fa61 	bl	8008fa8 <memchr>
 8008ae6:	9a04      	ldr	r2, [sp, #16]
 8008ae8:	b9d8      	cbnz	r0, 8008b22 <_svfiprintf_r+0xea>
 8008aea:	06d0      	lsls	r0, r2, #27
 8008aec:	bf44      	itt	mi
 8008aee:	2320      	movmi	r3, #32
 8008af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008af4:	0711      	lsls	r1, r2, #28
 8008af6:	bf44      	itt	mi
 8008af8:	232b      	movmi	r3, #43	@ 0x2b
 8008afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008afe:	f89a 3000 	ldrb.w	r3, [sl]
 8008b02:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b04:	d015      	beq.n	8008b32 <_svfiprintf_r+0xfa>
 8008b06:	4654      	mov	r4, sl
 8008b08:	2000      	movs	r0, #0
 8008b0a:	f04f 0c0a 	mov.w	ip, #10
 8008b0e:	9a07      	ldr	r2, [sp, #28]
 8008b10:	4621      	mov	r1, r4
 8008b12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b16:	3b30      	subs	r3, #48	@ 0x30
 8008b18:	2b09      	cmp	r3, #9
 8008b1a:	d94b      	bls.n	8008bb4 <_svfiprintf_r+0x17c>
 8008b1c:	b1b0      	cbz	r0, 8008b4c <_svfiprintf_r+0x114>
 8008b1e:	9207      	str	r2, [sp, #28]
 8008b20:	e014      	b.n	8008b4c <_svfiprintf_r+0x114>
 8008b22:	eba0 0308 	sub.w	r3, r0, r8
 8008b26:	fa09 f303 	lsl.w	r3, r9, r3
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	46a2      	mov	sl, r4
 8008b2e:	9304      	str	r3, [sp, #16]
 8008b30:	e7d2      	b.n	8008ad8 <_svfiprintf_r+0xa0>
 8008b32:	9b03      	ldr	r3, [sp, #12]
 8008b34:	1d19      	adds	r1, r3, #4
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	9103      	str	r1, [sp, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	bfbb      	ittet	lt
 8008b3e:	425b      	neglt	r3, r3
 8008b40:	f042 0202 	orrlt.w	r2, r2, #2
 8008b44:	9307      	strge	r3, [sp, #28]
 8008b46:	9307      	strlt	r3, [sp, #28]
 8008b48:	bfb8      	it	lt
 8008b4a:	9204      	strlt	r2, [sp, #16]
 8008b4c:	7823      	ldrb	r3, [r4, #0]
 8008b4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b50:	d10a      	bne.n	8008b68 <_svfiprintf_r+0x130>
 8008b52:	7863      	ldrb	r3, [r4, #1]
 8008b54:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b56:	d132      	bne.n	8008bbe <_svfiprintf_r+0x186>
 8008b58:	9b03      	ldr	r3, [sp, #12]
 8008b5a:	3402      	adds	r4, #2
 8008b5c:	1d1a      	adds	r2, r3, #4
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	9203      	str	r2, [sp, #12]
 8008b62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b66:	9305      	str	r3, [sp, #20]
 8008b68:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008c20 <_svfiprintf_r+0x1e8>
 8008b6c:	2203      	movs	r2, #3
 8008b6e:	4650      	mov	r0, sl
 8008b70:	7821      	ldrb	r1, [r4, #0]
 8008b72:	f000 fa19 	bl	8008fa8 <memchr>
 8008b76:	b138      	cbz	r0, 8008b88 <_svfiprintf_r+0x150>
 8008b78:	2240      	movs	r2, #64	@ 0x40
 8008b7a:	9b04      	ldr	r3, [sp, #16]
 8008b7c:	eba0 000a 	sub.w	r0, r0, sl
 8008b80:	4082      	lsls	r2, r0
 8008b82:	4313      	orrs	r3, r2
 8008b84:	3401      	adds	r4, #1
 8008b86:	9304      	str	r3, [sp, #16]
 8008b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b8c:	2206      	movs	r2, #6
 8008b8e:	4825      	ldr	r0, [pc, #148]	@ (8008c24 <_svfiprintf_r+0x1ec>)
 8008b90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b94:	f000 fa08 	bl	8008fa8 <memchr>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d036      	beq.n	8008c0a <_svfiprintf_r+0x1d2>
 8008b9c:	4b22      	ldr	r3, [pc, #136]	@ (8008c28 <_svfiprintf_r+0x1f0>)
 8008b9e:	bb1b      	cbnz	r3, 8008be8 <_svfiprintf_r+0x1b0>
 8008ba0:	9b03      	ldr	r3, [sp, #12]
 8008ba2:	3307      	adds	r3, #7
 8008ba4:	f023 0307 	bic.w	r3, r3, #7
 8008ba8:	3308      	adds	r3, #8
 8008baa:	9303      	str	r3, [sp, #12]
 8008bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bae:	4433      	add	r3, r6
 8008bb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bb2:	e76a      	b.n	8008a8a <_svfiprintf_r+0x52>
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	2001      	movs	r0, #1
 8008bb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bbc:	e7a8      	b.n	8008b10 <_svfiprintf_r+0xd8>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f04f 0c0a 	mov.w	ip, #10
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	3401      	adds	r4, #1
 8008bc8:	9305      	str	r3, [sp, #20]
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bd0:	3a30      	subs	r2, #48	@ 0x30
 8008bd2:	2a09      	cmp	r2, #9
 8008bd4:	d903      	bls.n	8008bde <_svfiprintf_r+0x1a6>
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0c6      	beq.n	8008b68 <_svfiprintf_r+0x130>
 8008bda:	9105      	str	r1, [sp, #20]
 8008bdc:	e7c4      	b.n	8008b68 <_svfiprintf_r+0x130>
 8008bde:	4604      	mov	r4, r0
 8008be0:	2301      	movs	r3, #1
 8008be2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008be6:	e7f0      	b.n	8008bca <_svfiprintf_r+0x192>
 8008be8:	ab03      	add	r3, sp, #12
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	462a      	mov	r2, r5
 8008bee:	4638      	mov	r0, r7
 8008bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8008c2c <_svfiprintf_r+0x1f4>)
 8008bf2:	a904      	add	r1, sp, #16
 8008bf4:	f3af 8000 	nop.w
 8008bf8:	1c42      	adds	r2, r0, #1
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	d1d6      	bne.n	8008bac <_svfiprintf_r+0x174>
 8008bfe:	89ab      	ldrh	r3, [r5, #12]
 8008c00:	065b      	lsls	r3, r3, #25
 8008c02:	f53f af2d 	bmi.w	8008a60 <_svfiprintf_r+0x28>
 8008c06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c08:	e72c      	b.n	8008a64 <_svfiprintf_r+0x2c>
 8008c0a:	ab03      	add	r3, sp, #12
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	462a      	mov	r2, r5
 8008c10:	4638      	mov	r0, r7
 8008c12:	4b06      	ldr	r3, [pc, #24]	@ (8008c2c <_svfiprintf_r+0x1f4>)
 8008c14:	a904      	add	r1, sp, #16
 8008c16:	f000 f87d 	bl	8008d14 <_printf_i>
 8008c1a:	e7ed      	b.n	8008bf8 <_svfiprintf_r+0x1c0>
 8008c1c:	0800a0ba 	.word	0x0800a0ba
 8008c20:	0800a0c0 	.word	0x0800a0c0
 8008c24:	0800a0c4 	.word	0x0800a0c4
 8008c28:	00000000 	.word	0x00000000
 8008c2c:	08008981 	.word	0x08008981

08008c30 <_printf_common>:
 8008c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c34:	4616      	mov	r6, r2
 8008c36:	4698      	mov	r8, r3
 8008c38:	688a      	ldr	r2, [r1, #8]
 8008c3a:	690b      	ldr	r3, [r1, #16]
 8008c3c:	4607      	mov	r7, r0
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	bfb8      	it	lt
 8008c42:	4613      	movlt	r3, r2
 8008c44:	6033      	str	r3, [r6, #0]
 8008c46:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c50:	b10a      	cbz	r2, 8008c56 <_printf_common+0x26>
 8008c52:	3301      	adds	r3, #1
 8008c54:	6033      	str	r3, [r6, #0]
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	0699      	lsls	r1, r3, #26
 8008c5a:	bf42      	ittt	mi
 8008c5c:	6833      	ldrmi	r3, [r6, #0]
 8008c5e:	3302      	addmi	r3, #2
 8008c60:	6033      	strmi	r3, [r6, #0]
 8008c62:	6825      	ldr	r5, [r4, #0]
 8008c64:	f015 0506 	ands.w	r5, r5, #6
 8008c68:	d106      	bne.n	8008c78 <_printf_common+0x48>
 8008c6a:	f104 0a19 	add.w	sl, r4, #25
 8008c6e:	68e3      	ldr	r3, [r4, #12]
 8008c70:	6832      	ldr	r2, [r6, #0]
 8008c72:	1a9b      	subs	r3, r3, r2
 8008c74:	42ab      	cmp	r3, r5
 8008c76:	dc2b      	bgt.n	8008cd0 <_printf_common+0xa0>
 8008c78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c7c:	6822      	ldr	r2, [r4, #0]
 8008c7e:	3b00      	subs	r3, #0
 8008c80:	bf18      	it	ne
 8008c82:	2301      	movne	r3, #1
 8008c84:	0692      	lsls	r2, r2, #26
 8008c86:	d430      	bmi.n	8008cea <_printf_common+0xba>
 8008c88:	4641      	mov	r1, r8
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c90:	47c8      	blx	r9
 8008c92:	3001      	adds	r0, #1
 8008c94:	d023      	beq.n	8008cde <_printf_common+0xae>
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	6922      	ldr	r2, [r4, #16]
 8008c9a:	f003 0306 	and.w	r3, r3, #6
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	bf14      	ite	ne
 8008ca2:	2500      	movne	r5, #0
 8008ca4:	6833      	ldreq	r3, [r6, #0]
 8008ca6:	f04f 0600 	mov.w	r6, #0
 8008caa:	bf08      	it	eq
 8008cac:	68e5      	ldreq	r5, [r4, #12]
 8008cae:	f104 041a 	add.w	r4, r4, #26
 8008cb2:	bf08      	it	eq
 8008cb4:	1aed      	subeq	r5, r5, r3
 8008cb6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008cba:	bf08      	it	eq
 8008cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	bfc4      	itt	gt
 8008cc4:	1a9b      	subgt	r3, r3, r2
 8008cc6:	18ed      	addgt	r5, r5, r3
 8008cc8:	42b5      	cmp	r5, r6
 8008cca:	d11a      	bne.n	8008d02 <_printf_common+0xd2>
 8008ccc:	2000      	movs	r0, #0
 8008cce:	e008      	b.n	8008ce2 <_printf_common+0xb2>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	4652      	mov	r2, sl
 8008cd4:	4641      	mov	r1, r8
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	47c8      	blx	r9
 8008cda:	3001      	adds	r0, #1
 8008cdc:	d103      	bne.n	8008ce6 <_printf_common+0xb6>
 8008cde:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce6:	3501      	adds	r5, #1
 8008ce8:	e7c1      	b.n	8008c6e <_printf_common+0x3e>
 8008cea:	2030      	movs	r0, #48	@ 0x30
 8008cec:	18e1      	adds	r1, r4, r3
 8008cee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008cf8:	4422      	add	r2, r4
 8008cfa:	3302      	adds	r3, #2
 8008cfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d00:	e7c2      	b.n	8008c88 <_printf_common+0x58>
 8008d02:	2301      	movs	r3, #1
 8008d04:	4622      	mov	r2, r4
 8008d06:	4641      	mov	r1, r8
 8008d08:	4638      	mov	r0, r7
 8008d0a:	47c8      	blx	r9
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d0e6      	beq.n	8008cde <_printf_common+0xae>
 8008d10:	3601      	adds	r6, #1
 8008d12:	e7d9      	b.n	8008cc8 <_printf_common+0x98>

08008d14 <_printf_i>:
 8008d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d18:	7e0f      	ldrb	r7, [r1, #24]
 8008d1a:	4691      	mov	r9, r2
 8008d1c:	2f78      	cmp	r7, #120	@ 0x78
 8008d1e:	4680      	mov	r8, r0
 8008d20:	460c      	mov	r4, r1
 8008d22:	469a      	mov	sl, r3
 8008d24:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d2a:	d807      	bhi.n	8008d3c <_printf_i+0x28>
 8008d2c:	2f62      	cmp	r7, #98	@ 0x62
 8008d2e:	d80a      	bhi.n	8008d46 <_printf_i+0x32>
 8008d30:	2f00      	cmp	r7, #0
 8008d32:	f000 80d3 	beq.w	8008edc <_printf_i+0x1c8>
 8008d36:	2f58      	cmp	r7, #88	@ 0x58
 8008d38:	f000 80ba 	beq.w	8008eb0 <_printf_i+0x19c>
 8008d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d44:	e03a      	b.n	8008dbc <_printf_i+0xa8>
 8008d46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d4a:	2b15      	cmp	r3, #21
 8008d4c:	d8f6      	bhi.n	8008d3c <_printf_i+0x28>
 8008d4e:	a101      	add	r1, pc, #4	@ (adr r1, 8008d54 <_printf_i+0x40>)
 8008d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d54:	08008dad 	.word	0x08008dad
 8008d58:	08008dc1 	.word	0x08008dc1
 8008d5c:	08008d3d 	.word	0x08008d3d
 8008d60:	08008d3d 	.word	0x08008d3d
 8008d64:	08008d3d 	.word	0x08008d3d
 8008d68:	08008d3d 	.word	0x08008d3d
 8008d6c:	08008dc1 	.word	0x08008dc1
 8008d70:	08008d3d 	.word	0x08008d3d
 8008d74:	08008d3d 	.word	0x08008d3d
 8008d78:	08008d3d 	.word	0x08008d3d
 8008d7c:	08008d3d 	.word	0x08008d3d
 8008d80:	08008ec3 	.word	0x08008ec3
 8008d84:	08008deb 	.word	0x08008deb
 8008d88:	08008e7d 	.word	0x08008e7d
 8008d8c:	08008d3d 	.word	0x08008d3d
 8008d90:	08008d3d 	.word	0x08008d3d
 8008d94:	08008ee5 	.word	0x08008ee5
 8008d98:	08008d3d 	.word	0x08008d3d
 8008d9c:	08008deb 	.word	0x08008deb
 8008da0:	08008d3d 	.word	0x08008d3d
 8008da4:	08008d3d 	.word	0x08008d3d
 8008da8:	08008e85 	.word	0x08008e85
 8008dac:	6833      	ldr	r3, [r6, #0]
 8008dae:	1d1a      	adds	r2, r3, #4
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6032      	str	r2, [r6, #0]
 8008db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008db8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e09e      	b.n	8008efe <_printf_i+0x1ea>
 8008dc0:	6833      	ldr	r3, [r6, #0]
 8008dc2:	6820      	ldr	r0, [r4, #0]
 8008dc4:	1d19      	adds	r1, r3, #4
 8008dc6:	6031      	str	r1, [r6, #0]
 8008dc8:	0606      	lsls	r6, r0, #24
 8008dca:	d501      	bpl.n	8008dd0 <_printf_i+0xbc>
 8008dcc:	681d      	ldr	r5, [r3, #0]
 8008dce:	e003      	b.n	8008dd8 <_printf_i+0xc4>
 8008dd0:	0645      	lsls	r5, r0, #25
 8008dd2:	d5fb      	bpl.n	8008dcc <_printf_i+0xb8>
 8008dd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008dd8:	2d00      	cmp	r5, #0
 8008dda:	da03      	bge.n	8008de4 <_printf_i+0xd0>
 8008ddc:	232d      	movs	r3, #45	@ 0x2d
 8008dde:	426d      	negs	r5, r5
 8008de0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008de4:	230a      	movs	r3, #10
 8008de6:	4859      	ldr	r0, [pc, #356]	@ (8008f4c <_printf_i+0x238>)
 8008de8:	e011      	b.n	8008e0e <_printf_i+0xfa>
 8008dea:	6821      	ldr	r1, [r4, #0]
 8008dec:	6833      	ldr	r3, [r6, #0]
 8008dee:	0608      	lsls	r0, r1, #24
 8008df0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008df4:	d402      	bmi.n	8008dfc <_printf_i+0xe8>
 8008df6:	0649      	lsls	r1, r1, #25
 8008df8:	bf48      	it	mi
 8008dfa:	b2ad      	uxthmi	r5, r5
 8008dfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008dfe:	6033      	str	r3, [r6, #0]
 8008e00:	bf14      	ite	ne
 8008e02:	230a      	movne	r3, #10
 8008e04:	2308      	moveq	r3, #8
 8008e06:	4851      	ldr	r0, [pc, #324]	@ (8008f4c <_printf_i+0x238>)
 8008e08:	2100      	movs	r1, #0
 8008e0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e0e:	6866      	ldr	r6, [r4, #4]
 8008e10:	2e00      	cmp	r6, #0
 8008e12:	bfa8      	it	ge
 8008e14:	6821      	ldrge	r1, [r4, #0]
 8008e16:	60a6      	str	r6, [r4, #8]
 8008e18:	bfa4      	itt	ge
 8008e1a:	f021 0104 	bicge.w	r1, r1, #4
 8008e1e:	6021      	strge	r1, [r4, #0]
 8008e20:	b90d      	cbnz	r5, 8008e26 <_printf_i+0x112>
 8008e22:	2e00      	cmp	r6, #0
 8008e24:	d04b      	beq.n	8008ebe <_printf_i+0x1aa>
 8008e26:	4616      	mov	r6, r2
 8008e28:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e2c:	fb03 5711 	mls	r7, r3, r1, r5
 8008e30:	5dc7      	ldrb	r7, [r0, r7]
 8008e32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e36:	462f      	mov	r7, r5
 8008e38:	42bb      	cmp	r3, r7
 8008e3a:	460d      	mov	r5, r1
 8008e3c:	d9f4      	bls.n	8008e28 <_printf_i+0x114>
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	d10b      	bne.n	8008e5a <_printf_i+0x146>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	07df      	lsls	r7, r3, #31
 8008e46:	d508      	bpl.n	8008e5a <_printf_i+0x146>
 8008e48:	6923      	ldr	r3, [r4, #16]
 8008e4a:	6861      	ldr	r1, [r4, #4]
 8008e4c:	4299      	cmp	r1, r3
 8008e4e:	bfde      	ittt	le
 8008e50:	2330      	movle	r3, #48	@ 0x30
 8008e52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e5a:	1b92      	subs	r2, r2, r6
 8008e5c:	6122      	str	r2, [r4, #16]
 8008e5e:	464b      	mov	r3, r9
 8008e60:	4621      	mov	r1, r4
 8008e62:	4640      	mov	r0, r8
 8008e64:	f8cd a000 	str.w	sl, [sp]
 8008e68:	aa03      	add	r2, sp, #12
 8008e6a:	f7ff fee1 	bl	8008c30 <_printf_common>
 8008e6e:	3001      	adds	r0, #1
 8008e70:	d14a      	bne.n	8008f08 <_printf_i+0x1f4>
 8008e72:	f04f 30ff 	mov.w	r0, #4294967295
 8008e76:	b004      	add	sp, #16
 8008e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	f043 0320 	orr.w	r3, r3, #32
 8008e82:	6023      	str	r3, [r4, #0]
 8008e84:	2778      	movs	r7, #120	@ 0x78
 8008e86:	4832      	ldr	r0, [pc, #200]	@ (8008f50 <_printf_i+0x23c>)
 8008e88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	6831      	ldr	r1, [r6, #0]
 8008e90:	061f      	lsls	r7, r3, #24
 8008e92:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e96:	d402      	bmi.n	8008e9e <_printf_i+0x18a>
 8008e98:	065f      	lsls	r7, r3, #25
 8008e9a:	bf48      	it	mi
 8008e9c:	b2ad      	uxthmi	r5, r5
 8008e9e:	6031      	str	r1, [r6, #0]
 8008ea0:	07d9      	lsls	r1, r3, #31
 8008ea2:	bf44      	itt	mi
 8008ea4:	f043 0320 	orrmi.w	r3, r3, #32
 8008ea8:	6023      	strmi	r3, [r4, #0]
 8008eaa:	b11d      	cbz	r5, 8008eb4 <_printf_i+0x1a0>
 8008eac:	2310      	movs	r3, #16
 8008eae:	e7ab      	b.n	8008e08 <_printf_i+0xf4>
 8008eb0:	4826      	ldr	r0, [pc, #152]	@ (8008f4c <_printf_i+0x238>)
 8008eb2:	e7e9      	b.n	8008e88 <_printf_i+0x174>
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	f023 0320 	bic.w	r3, r3, #32
 8008eba:	6023      	str	r3, [r4, #0]
 8008ebc:	e7f6      	b.n	8008eac <_printf_i+0x198>
 8008ebe:	4616      	mov	r6, r2
 8008ec0:	e7bd      	b.n	8008e3e <_printf_i+0x12a>
 8008ec2:	6833      	ldr	r3, [r6, #0]
 8008ec4:	6825      	ldr	r5, [r4, #0]
 8008ec6:	1d18      	adds	r0, r3, #4
 8008ec8:	6961      	ldr	r1, [r4, #20]
 8008eca:	6030      	str	r0, [r6, #0]
 8008ecc:	062e      	lsls	r6, r5, #24
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	d501      	bpl.n	8008ed6 <_printf_i+0x1c2>
 8008ed2:	6019      	str	r1, [r3, #0]
 8008ed4:	e002      	b.n	8008edc <_printf_i+0x1c8>
 8008ed6:	0668      	lsls	r0, r5, #25
 8008ed8:	d5fb      	bpl.n	8008ed2 <_printf_i+0x1be>
 8008eda:	8019      	strh	r1, [r3, #0]
 8008edc:	2300      	movs	r3, #0
 8008ede:	4616      	mov	r6, r2
 8008ee0:	6123      	str	r3, [r4, #16]
 8008ee2:	e7bc      	b.n	8008e5e <_printf_i+0x14a>
 8008ee4:	6833      	ldr	r3, [r6, #0]
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	1d1a      	adds	r2, r3, #4
 8008eea:	6032      	str	r2, [r6, #0]
 8008eec:	681e      	ldr	r6, [r3, #0]
 8008eee:	6862      	ldr	r2, [r4, #4]
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	f000 f859 	bl	8008fa8 <memchr>
 8008ef6:	b108      	cbz	r0, 8008efc <_printf_i+0x1e8>
 8008ef8:	1b80      	subs	r0, r0, r6
 8008efa:	6060      	str	r0, [r4, #4]
 8008efc:	6863      	ldr	r3, [r4, #4]
 8008efe:	6123      	str	r3, [r4, #16]
 8008f00:	2300      	movs	r3, #0
 8008f02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f06:	e7aa      	b.n	8008e5e <_printf_i+0x14a>
 8008f08:	4632      	mov	r2, r6
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	4640      	mov	r0, r8
 8008f0e:	6923      	ldr	r3, [r4, #16]
 8008f10:	47d0      	blx	sl
 8008f12:	3001      	adds	r0, #1
 8008f14:	d0ad      	beq.n	8008e72 <_printf_i+0x15e>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	079b      	lsls	r3, r3, #30
 8008f1a:	d413      	bmi.n	8008f44 <_printf_i+0x230>
 8008f1c:	68e0      	ldr	r0, [r4, #12]
 8008f1e:	9b03      	ldr	r3, [sp, #12]
 8008f20:	4298      	cmp	r0, r3
 8008f22:	bfb8      	it	lt
 8008f24:	4618      	movlt	r0, r3
 8008f26:	e7a6      	b.n	8008e76 <_printf_i+0x162>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	4632      	mov	r2, r6
 8008f2c:	4649      	mov	r1, r9
 8008f2e:	4640      	mov	r0, r8
 8008f30:	47d0      	blx	sl
 8008f32:	3001      	adds	r0, #1
 8008f34:	d09d      	beq.n	8008e72 <_printf_i+0x15e>
 8008f36:	3501      	adds	r5, #1
 8008f38:	68e3      	ldr	r3, [r4, #12]
 8008f3a:	9903      	ldr	r1, [sp, #12]
 8008f3c:	1a5b      	subs	r3, r3, r1
 8008f3e:	42ab      	cmp	r3, r5
 8008f40:	dcf2      	bgt.n	8008f28 <_printf_i+0x214>
 8008f42:	e7eb      	b.n	8008f1c <_printf_i+0x208>
 8008f44:	2500      	movs	r5, #0
 8008f46:	f104 0619 	add.w	r6, r4, #25
 8008f4a:	e7f5      	b.n	8008f38 <_printf_i+0x224>
 8008f4c:	0800a0cb 	.word	0x0800a0cb
 8008f50:	0800a0dc 	.word	0x0800a0dc

08008f54 <memmove>:
 8008f54:	4288      	cmp	r0, r1
 8008f56:	b510      	push	{r4, lr}
 8008f58:	eb01 0402 	add.w	r4, r1, r2
 8008f5c:	d902      	bls.n	8008f64 <memmove+0x10>
 8008f5e:	4284      	cmp	r4, r0
 8008f60:	4623      	mov	r3, r4
 8008f62:	d807      	bhi.n	8008f74 <memmove+0x20>
 8008f64:	1e43      	subs	r3, r0, #1
 8008f66:	42a1      	cmp	r1, r4
 8008f68:	d008      	beq.n	8008f7c <memmove+0x28>
 8008f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f72:	e7f8      	b.n	8008f66 <memmove+0x12>
 8008f74:	4601      	mov	r1, r0
 8008f76:	4402      	add	r2, r0
 8008f78:	428a      	cmp	r2, r1
 8008f7a:	d100      	bne.n	8008f7e <memmove+0x2a>
 8008f7c:	bd10      	pop	{r4, pc}
 8008f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f86:	e7f7      	b.n	8008f78 <memmove+0x24>

08008f88 <_sbrk_r>:
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	4d05      	ldr	r5, [pc, #20]	@ (8008fa4 <_sbrk_r+0x1c>)
 8008f8e:	4604      	mov	r4, r0
 8008f90:	4608      	mov	r0, r1
 8008f92:	602b      	str	r3, [r5, #0]
 8008f94:	f7f9 f816 	bl	8001fc4 <_sbrk>
 8008f98:	1c43      	adds	r3, r0, #1
 8008f9a:	d102      	bne.n	8008fa2 <_sbrk_r+0x1a>
 8008f9c:	682b      	ldr	r3, [r5, #0]
 8008f9e:	b103      	cbz	r3, 8008fa2 <_sbrk_r+0x1a>
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
 8008fa4:	20001e98 	.word	0x20001e98

08008fa8 <memchr>:
 8008fa8:	4603      	mov	r3, r0
 8008faa:	b510      	push	{r4, lr}
 8008fac:	b2c9      	uxtb	r1, r1
 8008fae:	4402      	add	r2, r0
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	d101      	bne.n	8008fba <memchr+0x12>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	e003      	b.n	8008fc2 <memchr+0x1a>
 8008fba:	7804      	ldrb	r4, [r0, #0]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	428c      	cmp	r4, r1
 8008fc0:	d1f6      	bne.n	8008fb0 <memchr+0x8>
 8008fc2:	bd10      	pop	{r4, pc}

08008fc4 <_realloc_r>:
 8008fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc8:	4680      	mov	r8, r0
 8008fca:	4615      	mov	r5, r2
 8008fcc:	460c      	mov	r4, r1
 8008fce:	b921      	cbnz	r1, 8008fda <_realloc_r+0x16>
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd6:	f7ff bc47 	b.w	8008868 <_malloc_r>
 8008fda:	b92a      	cbnz	r2, 8008fe8 <_realloc_r+0x24>
 8008fdc:	f7ff fbda 	bl	8008794 <_free_r>
 8008fe0:	2400      	movs	r4, #0
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe8:	f000 f81a 	bl	8009020 <_malloc_usable_size_r>
 8008fec:	4285      	cmp	r5, r0
 8008fee:	4606      	mov	r6, r0
 8008ff0:	d802      	bhi.n	8008ff8 <_realloc_r+0x34>
 8008ff2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008ff6:	d8f4      	bhi.n	8008fe2 <_realloc_r+0x1e>
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	f7ff fc34 	bl	8008868 <_malloc_r>
 8009000:	4607      	mov	r7, r0
 8009002:	2800      	cmp	r0, #0
 8009004:	d0ec      	beq.n	8008fe0 <_realloc_r+0x1c>
 8009006:	42b5      	cmp	r5, r6
 8009008:	462a      	mov	r2, r5
 800900a:	4621      	mov	r1, r4
 800900c:	bf28      	it	cs
 800900e:	4632      	movcs	r2, r6
 8009010:	f7ff fbb2 	bl	8008778 <memcpy>
 8009014:	4621      	mov	r1, r4
 8009016:	4640      	mov	r0, r8
 8009018:	f7ff fbbc 	bl	8008794 <_free_r>
 800901c:	463c      	mov	r4, r7
 800901e:	e7e0      	b.n	8008fe2 <_realloc_r+0x1e>

08009020 <_malloc_usable_size_r>:
 8009020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009024:	1f18      	subs	r0, r3, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	bfbc      	itt	lt
 800902a:	580b      	ldrlt	r3, [r1, r0]
 800902c:	18c0      	addlt	r0, r0, r3
 800902e:	4770      	bx	lr

08009030 <pow>:
 8009030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009034:	4614      	mov	r4, r2
 8009036:	461d      	mov	r5, r3
 8009038:	4680      	mov	r8, r0
 800903a:	4689      	mov	r9, r1
 800903c:	f000 f8ac 	bl	8009198 <__ieee754_pow>
 8009040:	4622      	mov	r2, r4
 8009042:	4606      	mov	r6, r0
 8009044:	460f      	mov	r7, r1
 8009046:	462b      	mov	r3, r5
 8009048:	4620      	mov	r0, r4
 800904a:	4629      	mov	r1, r5
 800904c:	f7f7 fcde 	bl	8000a0c <__aeabi_dcmpun>
 8009050:	bbc8      	cbnz	r0, 80090c6 <pow+0x96>
 8009052:	2200      	movs	r2, #0
 8009054:	2300      	movs	r3, #0
 8009056:	4640      	mov	r0, r8
 8009058:	4649      	mov	r1, r9
 800905a:	f7f7 fca5 	bl	80009a8 <__aeabi_dcmpeq>
 800905e:	b1b8      	cbz	r0, 8009090 <pow+0x60>
 8009060:	2200      	movs	r2, #0
 8009062:	2300      	movs	r3, #0
 8009064:	4620      	mov	r0, r4
 8009066:	4629      	mov	r1, r5
 8009068:	f7f7 fc9e 	bl	80009a8 <__aeabi_dcmpeq>
 800906c:	2800      	cmp	r0, #0
 800906e:	d141      	bne.n	80090f4 <pow+0xc4>
 8009070:	4620      	mov	r0, r4
 8009072:	4629      	mov	r1, r5
 8009074:	f000 f844 	bl	8009100 <finite>
 8009078:	b328      	cbz	r0, 80090c6 <pow+0x96>
 800907a:	2200      	movs	r2, #0
 800907c:	2300      	movs	r3, #0
 800907e:	4620      	mov	r0, r4
 8009080:	4629      	mov	r1, r5
 8009082:	f7f7 fc9b 	bl	80009bc <__aeabi_dcmplt>
 8009086:	b1f0      	cbz	r0, 80090c6 <pow+0x96>
 8009088:	f7ff fb4a 	bl	8008720 <__errno>
 800908c:	2322      	movs	r3, #34	@ 0x22
 800908e:	e019      	b.n	80090c4 <pow+0x94>
 8009090:	4630      	mov	r0, r6
 8009092:	4639      	mov	r1, r7
 8009094:	f000 f834 	bl	8009100 <finite>
 8009098:	b9c8      	cbnz	r0, 80090ce <pow+0x9e>
 800909a:	4640      	mov	r0, r8
 800909c:	4649      	mov	r1, r9
 800909e:	f000 f82f 	bl	8009100 <finite>
 80090a2:	b1a0      	cbz	r0, 80090ce <pow+0x9e>
 80090a4:	4620      	mov	r0, r4
 80090a6:	4629      	mov	r1, r5
 80090a8:	f000 f82a 	bl	8009100 <finite>
 80090ac:	b178      	cbz	r0, 80090ce <pow+0x9e>
 80090ae:	4632      	mov	r2, r6
 80090b0:	463b      	mov	r3, r7
 80090b2:	4630      	mov	r0, r6
 80090b4:	4639      	mov	r1, r7
 80090b6:	f7f7 fca9 	bl	8000a0c <__aeabi_dcmpun>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d0e4      	beq.n	8009088 <pow+0x58>
 80090be:	f7ff fb2f 	bl	8008720 <__errno>
 80090c2:	2321      	movs	r3, #33	@ 0x21
 80090c4:	6003      	str	r3, [r0, #0]
 80090c6:	4630      	mov	r0, r6
 80090c8:	4639      	mov	r1, r7
 80090ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ce:	2200      	movs	r2, #0
 80090d0:	2300      	movs	r3, #0
 80090d2:	4630      	mov	r0, r6
 80090d4:	4639      	mov	r1, r7
 80090d6:	f7f7 fc67 	bl	80009a8 <__aeabi_dcmpeq>
 80090da:	2800      	cmp	r0, #0
 80090dc:	d0f3      	beq.n	80090c6 <pow+0x96>
 80090de:	4640      	mov	r0, r8
 80090e0:	4649      	mov	r1, r9
 80090e2:	f000 f80d 	bl	8009100 <finite>
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d0ed      	beq.n	80090c6 <pow+0x96>
 80090ea:	4620      	mov	r0, r4
 80090ec:	4629      	mov	r1, r5
 80090ee:	f000 f807 	bl	8009100 <finite>
 80090f2:	e7c8      	b.n	8009086 <pow+0x56>
 80090f4:	2600      	movs	r6, #0
 80090f6:	4f01      	ldr	r7, [pc, #4]	@ (80090fc <pow+0xcc>)
 80090f8:	e7e5      	b.n	80090c6 <pow+0x96>
 80090fa:	bf00      	nop
 80090fc:	3ff00000 	.word	0x3ff00000

08009100 <finite>:
 8009100:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8009104:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009108:	0fc0      	lsrs	r0, r0, #31
 800910a:	4770      	bx	lr

0800910c <round>:
 800910c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009112:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8009116:	2a13      	cmp	r2, #19
 8009118:	4604      	mov	r4, r0
 800911a:	460d      	mov	r5, r1
 800911c:	460b      	mov	r3, r1
 800911e:	dc1a      	bgt.n	8009156 <round+0x4a>
 8009120:	2a00      	cmp	r2, #0
 8009122:	da0b      	bge.n	800913c <round+0x30>
 8009124:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8009128:	3201      	adds	r2, #1
 800912a:	bf04      	itt	eq
 800912c:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8009130:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8009134:	2200      	movs	r2, #0
 8009136:	461d      	mov	r5, r3
 8009138:	4614      	mov	r4, r2
 800913a:	e016      	b.n	800916a <round+0x5e>
 800913c:	4815      	ldr	r0, [pc, #84]	@ (8009194 <round+0x88>)
 800913e:	4110      	asrs	r0, r2
 8009140:	4001      	ands	r1, r0
 8009142:	4321      	orrs	r1, r4
 8009144:	d011      	beq.n	800916a <round+0x5e>
 8009146:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800914a:	fa41 f202 	asr.w	r2, r1, r2
 800914e:	4413      	add	r3, r2
 8009150:	ea23 0300 	bic.w	r3, r3, r0
 8009154:	e7ee      	b.n	8009134 <round+0x28>
 8009156:	2a33      	cmp	r2, #51	@ 0x33
 8009158:	dd0a      	ble.n	8009170 <round+0x64>
 800915a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800915e:	d104      	bne.n	800916a <round+0x5e>
 8009160:	4602      	mov	r2, r0
 8009162:	f7f7 f803 	bl	800016c <__adddf3>
 8009166:	4604      	mov	r4, r0
 8009168:	460d      	mov	r5, r1
 800916a:	4620      	mov	r0, r4
 800916c:	4629      	mov	r1, r5
 800916e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009170:	f04f 30ff 	mov.w	r0, #4294967295
 8009174:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8009178:	40f8      	lsrs	r0, r7
 800917a:	4220      	tst	r0, r4
 800917c:	d0f5      	beq.n	800916a <round+0x5e>
 800917e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8009182:	2201      	movs	r2, #1
 8009184:	408a      	lsls	r2, r1
 8009186:	1912      	adds	r2, r2, r4
 8009188:	bf28      	it	cs
 800918a:	3301      	addcs	r3, #1
 800918c:	ea22 0200 	bic.w	r2, r2, r0
 8009190:	e7d1      	b.n	8009136 <round+0x2a>
 8009192:	bf00      	nop
 8009194:	000fffff 	.word	0x000fffff

08009198 <__ieee754_pow>:
 8009198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800919c:	b091      	sub	sp, #68	@ 0x44
 800919e:	e9cd 2300 	strd	r2, r3, [sp]
 80091a2:	468b      	mov	fp, r1
 80091a4:	e9dd 1800 	ldrd	r1, r8, [sp]
 80091a8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80091ac:	4682      	mov	sl, r0
 80091ae:	ea57 0001 	orrs.w	r0, r7, r1
 80091b2:	d112      	bne.n	80091da <__ieee754_pow+0x42>
 80091b4:	4653      	mov	r3, sl
 80091b6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80091ba:	18db      	adds	r3, r3, r3
 80091bc:	4152      	adcs	r2, r2
 80091be:	4298      	cmp	r0, r3
 80091c0:	4b91      	ldr	r3, [pc, #580]	@ (8009408 <__ieee754_pow+0x270>)
 80091c2:	4193      	sbcs	r3, r2
 80091c4:	f080 84ce 	bcs.w	8009b64 <__ieee754_pow+0x9cc>
 80091c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091cc:	4650      	mov	r0, sl
 80091ce:	4659      	mov	r1, fp
 80091d0:	f7f6 ffcc 	bl	800016c <__adddf3>
 80091d4:	b011      	add	sp, #68	@ 0x44
 80091d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091da:	4b8c      	ldr	r3, [pc, #560]	@ (800940c <__ieee754_pow+0x274>)
 80091dc:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 80091e0:	429e      	cmp	r6, r3
 80091e2:	465d      	mov	r5, fp
 80091e4:	46d1      	mov	r9, sl
 80091e6:	d807      	bhi.n	80091f8 <__ieee754_pow+0x60>
 80091e8:	d102      	bne.n	80091f0 <__ieee754_pow+0x58>
 80091ea:	f1ba 0f00 	cmp.w	sl, #0
 80091ee:	d1eb      	bne.n	80091c8 <__ieee754_pow+0x30>
 80091f0:	429f      	cmp	r7, r3
 80091f2:	d801      	bhi.n	80091f8 <__ieee754_pow+0x60>
 80091f4:	d10f      	bne.n	8009216 <__ieee754_pow+0x7e>
 80091f6:	b171      	cbz	r1, 8009216 <__ieee754_pow+0x7e>
 80091f8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80091fc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009200:	ea55 0509 	orrs.w	r5, r5, r9
 8009204:	d1e0      	bne.n	80091c8 <__ieee754_pow+0x30>
 8009206:	e9dd 3200 	ldrd	r3, r2, [sp]
 800920a:	18db      	adds	r3, r3, r3
 800920c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009210:	4152      	adcs	r2, r2
 8009212:	429d      	cmp	r5, r3
 8009214:	e7d4      	b.n	80091c0 <__ieee754_pow+0x28>
 8009216:	2d00      	cmp	r5, #0
 8009218:	4633      	mov	r3, r6
 800921a:	da39      	bge.n	8009290 <__ieee754_pow+0xf8>
 800921c:	4a7c      	ldr	r2, [pc, #496]	@ (8009410 <__ieee754_pow+0x278>)
 800921e:	4297      	cmp	r7, r2
 8009220:	d84e      	bhi.n	80092c0 <__ieee754_pow+0x128>
 8009222:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009226:	4297      	cmp	r7, r2
 8009228:	f240 84ab 	bls.w	8009b82 <__ieee754_pow+0x9ea>
 800922c:	153a      	asrs	r2, r7, #20
 800922e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009232:	2a14      	cmp	r2, #20
 8009234:	dd0f      	ble.n	8009256 <__ieee754_pow+0xbe>
 8009236:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800923a:	fa21 f402 	lsr.w	r4, r1, r2
 800923e:	fa04 f202 	lsl.w	r2, r4, r2
 8009242:	428a      	cmp	r2, r1
 8009244:	f040 849d 	bne.w	8009b82 <__ieee754_pow+0x9ea>
 8009248:	f004 0401 	and.w	r4, r4, #1
 800924c:	f1c4 0402 	rsb	r4, r4, #2
 8009250:	2900      	cmp	r1, #0
 8009252:	d15a      	bne.n	800930a <__ieee754_pow+0x172>
 8009254:	e00e      	b.n	8009274 <__ieee754_pow+0xdc>
 8009256:	2900      	cmp	r1, #0
 8009258:	d156      	bne.n	8009308 <__ieee754_pow+0x170>
 800925a:	f1c2 0214 	rsb	r2, r2, #20
 800925e:	fa47 f402 	asr.w	r4, r7, r2
 8009262:	fa04 f202 	lsl.w	r2, r4, r2
 8009266:	42ba      	cmp	r2, r7
 8009268:	f040 8488 	bne.w	8009b7c <__ieee754_pow+0x9e4>
 800926c:	f004 0401 	and.w	r4, r4, #1
 8009270:	f1c4 0402 	rsb	r4, r4, #2
 8009274:	4a67      	ldr	r2, [pc, #412]	@ (8009414 <__ieee754_pow+0x27c>)
 8009276:	4297      	cmp	r7, r2
 8009278:	d130      	bne.n	80092dc <__ieee754_pow+0x144>
 800927a:	f1b8 0f00 	cmp.w	r8, #0
 800927e:	f280 8479 	bge.w	8009b74 <__ieee754_pow+0x9dc>
 8009282:	4652      	mov	r2, sl
 8009284:	465b      	mov	r3, fp
 8009286:	2000      	movs	r0, #0
 8009288:	4962      	ldr	r1, [pc, #392]	@ (8009414 <__ieee754_pow+0x27c>)
 800928a:	f7f7 fa4f 	bl	800072c <__aeabi_ddiv>
 800928e:	e7a1      	b.n	80091d4 <__ieee754_pow+0x3c>
 8009290:	2400      	movs	r4, #0
 8009292:	2900      	cmp	r1, #0
 8009294:	d139      	bne.n	800930a <__ieee754_pow+0x172>
 8009296:	4a5d      	ldr	r2, [pc, #372]	@ (800940c <__ieee754_pow+0x274>)
 8009298:	4297      	cmp	r7, r2
 800929a:	d1eb      	bne.n	8009274 <__ieee754_pow+0xdc>
 800929c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80092a0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80092a4:	ea53 0309 	orrs.w	r3, r3, r9
 80092a8:	f000 845c 	beq.w	8009b64 <__ieee754_pow+0x9cc>
 80092ac:	4b5a      	ldr	r3, [pc, #360]	@ (8009418 <__ieee754_pow+0x280>)
 80092ae:	429e      	cmp	r6, r3
 80092b0:	d908      	bls.n	80092c4 <__ieee754_pow+0x12c>
 80092b2:	f1b8 0f00 	cmp.w	r8, #0
 80092b6:	f2c0 8459 	blt.w	8009b6c <__ieee754_pow+0x9d4>
 80092ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092be:	e789      	b.n	80091d4 <__ieee754_pow+0x3c>
 80092c0:	2402      	movs	r4, #2
 80092c2:	e7e6      	b.n	8009292 <__ieee754_pow+0xfa>
 80092c4:	f1b8 0f00 	cmp.w	r8, #0
 80092c8:	f04f 0000 	mov.w	r0, #0
 80092cc:	f04f 0100 	mov.w	r1, #0
 80092d0:	da80      	bge.n	80091d4 <__ieee754_pow+0x3c>
 80092d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80092d6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80092da:	e77b      	b.n	80091d4 <__ieee754_pow+0x3c>
 80092dc:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80092e0:	d106      	bne.n	80092f0 <__ieee754_pow+0x158>
 80092e2:	4652      	mov	r2, sl
 80092e4:	465b      	mov	r3, fp
 80092e6:	4650      	mov	r0, sl
 80092e8:	4659      	mov	r1, fp
 80092ea:	f7f7 f8f5 	bl	80004d8 <__aeabi_dmul>
 80092ee:	e771      	b.n	80091d4 <__ieee754_pow+0x3c>
 80092f0:	4a4a      	ldr	r2, [pc, #296]	@ (800941c <__ieee754_pow+0x284>)
 80092f2:	4590      	cmp	r8, r2
 80092f4:	d109      	bne.n	800930a <__ieee754_pow+0x172>
 80092f6:	2d00      	cmp	r5, #0
 80092f8:	db07      	blt.n	800930a <__ieee754_pow+0x172>
 80092fa:	4650      	mov	r0, sl
 80092fc:	4659      	mov	r1, fp
 80092fe:	b011      	add	sp, #68	@ 0x44
 8009300:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	f000 bd12 	b.w	8009d2c <__ieee754_sqrt>
 8009308:	2400      	movs	r4, #0
 800930a:	4650      	mov	r0, sl
 800930c:	4659      	mov	r1, fp
 800930e:	9302      	str	r3, [sp, #8]
 8009310:	f000 fc6a 	bl	8009be8 <fabs>
 8009314:	9b02      	ldr	r3, [sp, #8]
 8009316:	f1b9 0f00 	cmp.w	r9, #0
 800931a:	d127      	bne.n	800936c <__ieee754_pow+0x1d4>
 800931c:	4a3d      	ldr	r2, [pc, #244]	@ (8009414 <__ieee754_pow+0x27c>)
 800931e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8009322:	4594      	cmp	ip, r2
 8009324:	d000      	beq.n	8009328 <__ieee754_pow+0x190>
 8009326:	bb0e      	cbnz	r6, 800936c <__ieee754_pow+0x1d4>
 8009328:	f1b8 0f00 	cmp.w	r8, #0
 800932c:	da05      	bge.n	800933a <__ieee754_pow+0x1a2>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	2000      	movs	r0, #0
 8009334:	4937      	ldr	r1, [pc, #220]	@ (8009414 <__ieee754_pow+0x27c>)
 8009336:	f7f7 f9f9 	bl	800072c <__aeabi_ddiv>
 800933a:	2d00      	cmp	r5, #0
 800933c:	f6bf af4a 	bge.w	80091d4 <__ieee754_pow+0x3c>
 8009340:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8009344:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009348:	4326      	orrs	r6, r4
 800934a:	d108      	bne.n	800935e <__ieee754_pow+0x1c6>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4610      	mov	r0, r2
 8009352:	4619      	mov	r1, r3
 8009354:	f7f6 ff08 	bl	8000168 <__aeabi_dsub>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	e795      	b.n	800928a <__ieee754_pow+0xf2>
 800935e:	2c01      	cmp	r4, #1
 8009360:	f47f af38 	bne.w	80091d4 <__ieee754_pow+0x3c>
 8009364:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009368:	4619      	mov	r1, r3
 800936a:	e733      	b.n	80091d4 <__ieee754_pow+0x3c>
 800936c:	0fea      	lsrs	r2, r5, #31
 800936e:	3a01      	subs	r2, #1
 8009370:	ea52 0c04 	orrs.w	ip, r2, r4
 8009374:	d102      	bne.n	800937c <__ieee754_pow+0x1e4>
 8009376:	4652      	mov	r2, sl
 8009378:	465b      	mov	r3, fp
 800937a:	e7e9      	b.n	8009350 <__ieee754_pow+0x1b8>
 800937c:	f04f 0900 	mov.w	r9, #0
 8009380:	3c01      	subs	r4, #1
 8009382:	4314      	orrs	r4, r2
 8009384:	bf14      	ite	ne
 8009386:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8009414 <__ieee754_pow+0x27c>
 800938a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8009420 <__ieee754_pow+0x288>
 800938e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8009392:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8009396:	f240 8107 	bls.w	80095a8 <__ieee754_pow+0x410>
 800939a:	4b22      	ldr	r3, [pc, #136]	@ (8009424 <__ieee754_pow+0x28c>)
 800939c:	429f      	cmp	r7, r3
 800939e:	4b1e      	ldr	r3, [pc, #120]	@ (8009418 <__ieee754_pow+0x280>)
 80093a0:	d913      	bls.n	80093ca <__ieee754_pow+0x232>
 80093a2:	429e      	cmp	r6, r3
 80093a4:	d808      	bhi.n	80093b8 <__ieee754_pow+0x220>
 80093a6:	f1b8 0f00 	cmp.w	r8, #0
 80093aa:	da08      	bge.n	80093be <__ieee754_pow+0x226>
 80093ac:	2000      	movs	r0, #0
 80093ae:	b011      	add	sp, #68	@ 0x44
 80093b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	f000 bcb4 	b.w	8009d20 <__math_oflow>
 80093b8:	f1b8 0f00 	cmp.w	r8, #0
 80093bc:	dcf6      	bgt.n	80093ac <__ieee754_pow+0x214>
 80093be:	2000      	movs	r0, #0
 80093c0:	b011      	add	sp, #68	@ 0x44
 80093c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c6:	f000 bca6 	b.w	8009d16 <__math_uflow>
 80093ca:	429e      	cmp	r6, r3
 80093cc:	d20c      	bcs.n	80093e8 <__ieee754_pow+0x250>
 80093ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093d2:	2200      	movs	r2, #0
 80093d4:	2300      	movs	r3, #0
 80093d6:	f7f7 faf1 	bl	80009bc <__aeabi_dcmplt>
 80093da:	3800      	subs	r0, #0
 80093dc:	bf18      	it	ne
 80093de:	2001      	movne	r0, #1
 80093e0:	f1b8 0f00 	cmp.w	r8, #0
 80093e4:	daec      	bge.n	80093c0 <__ieee754_pow+0x228>
 80093e6:	e7e2      	b.n	80093ae <__ieee754_pow+0x216>
 80093e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009414 <__ieee754_pow+0x27c>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	429e      	cmp	r6, r3
 80093ee:	d91b      	bls.n	8009428 <__ieee754_pow+0x290>
 80093f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093f4:	2300      	movs	r3, #0
 80093f6:	f7f7 fae1 	bl	80009bc <__aeabi_dcmplt>
 80093fa:	3800      	subs	r0, #0
 80093fc:	bf18      	it	ne
 80093fe:	2001      	movne	r0, #1
 8009400:	f1b8 0f00 	cmp.w	r8, #0
 8009404:	dcd3      	bgt.n	80093ae <__ieee754_pow+0x216>
 8009406:	e7db      	b.n	80093c0 <__ieee754_pow+0x228>
 8009408:	fff00000 	.word	0xfff00000
 800940c:	7ff00000 	.word	0x7ff00000
 8009410:	433fffff 	.word	0x433fffff
 8009414:	3ff00000 	.word	0x3ff00000
 8009418:	3fefffff 	.word	0x3fefffff
 800941c:	3fe00000 	.word	0x3fe00000
 8009420:	bff00000 	.word	0xbff00000
 8009424:	43f00000 	.word	0x43f00000
 8009428:	4b5b      	ldr	r3, [pc, #364]	@ (8009598 <__ieee754_pow+0x400>)
 800942a:	f7f6 fe9d 	bl	8000168 <__aeabi_dsub>
 800942e:	a352      	add	r3, pc, #328	@ (adr r3, 8009578 <__ieee754_pow+0x3e0>)
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	4604      	mov	r4, r0
 8009436:	460d      	mov	r5, r1
 8009438:	f7f7 f84e 	bl	80004d8 <__aeabi_dmul>
 800943c:	a350      	add	r3, pc, #320	@ (adr r3, 8009580 <__ieee754_pow+0x3e8>)
 800943e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009442:	4606      	mov	r6, r0
 8009444:	460f      	mov	r7, r1
 8009446:	4620      	mov	r0, r4
 8009448:	4629      	mov	r1, r5
 800944a:	f7f7 f845 	bl	80004d8 <__aeabi_dmul>
 800944e:	2200      	movs	r2, #0
 8009450:	4682      	mov	sl, r0
 8009452:	468b      	mov	fp, r1
 8009454:	4620      	mov	r0, r4
 8009456:	4629      	mov	r1, r5
 8009458:	4b50      	ldr	r3, [pc, #320]	@ (800959c <__ieee754_pow+0x404>)
 800945a:	f7f7 f83d 	bl	80004d8 <__aeabi_dmul>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	a149      	add	r1, pc, #292	@ (adr r1, 8009588 <__ieee754_pow+0x3f0>)
 8009464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009468:	f7f6 fe7e 	bl	8000168 <__aeabi_dsub>
 800946c:	4622      	mov	r2, r4
 800946e:	462b      	mov	r3, r5
 8009470:	f7f7 f832 	bl	80004d8 <__aeabi_dmul>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	2000      	movs	r0, #0
 800947a:	4949      	ldr	r1, [pc, #292]	@ (80095a0 <__ieee754_pow+0x408>)
 800947c:	f7f6 fe74 	bl	8000168 <__aeabi_dsub>
 8009480:	4622      	mov	r2, r4
 8009482:	4680      	mov	r8, r0
 8009484:	4689      	mov	r9, r1
 8009486:	462b      	mov	r3, r5
 8009488:	4620      	mov	r0, r4
 800948a:	4629      	mov	r1, r5
 800948c:	f7f7 f824 	bl	80004d8 <__aeabi_dmul>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4640      	mov	r0, r8
 8009496:	4649      	mov	r1, r9
 8009498:	f7f7 f81e 	bl	80004d8 <__aeabi_dmul>
 800949c:	a33c      	add	r3, pc, #240	@ (adr r3, 8009590 <__ieee754_pow+0x3f8>)
 800949e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a2:	f7f7 f819 	bl	80004d8 <__aeabi_dmul>
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	4650      	mov	r0, sl
 80094ac:	4659      	mov	r1, fp
 80094ae:	f7f6 fe5b 	bl	8000168 <__aeabi_dsub>
 80094b2:	2400      	movs	r4, #0
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4680      	mov	r8, r0
 80094ba:	4689      	mov	r9, r1
 80094bc:	4630      	mov	r0, r6
 80094be:	4639      	mov	r1, r7
 80094c0:	f7f6 fe54 	bl	800016c <__adddf3>
 80094c4:	4632      	mov	r2, r6
 80094c6:	463b      	mov	r3, r7
 80094c8:	4620      	mov	r0, r4
 80094ca:	460d      	mov	r5, r1
 80094cc:	f7f6 fe4c 	bl	8000168 <__aeabi_dsub>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	4640      	mov	r0, r8
 80094d6:	4649      	mov	r1, r9
 80094d8:	f7f6 fe46 	bl	8000168 <__aeabi_dsub>
 80094dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094e4:	2300      	movs	r3, #0
 80094e6:	9304      	str	r3, [sp, #16]
 80094e8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80094ec:	4606      	mov	r6, r0
 80094ee:	460f      	mov	r7, r1
 80094f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094f4:	4652      	mov	r2, sl
 80094f6:	465b      	mov	r3, fp
 80094f8:	f7f6 fe36 	bl	8000168 <__aeabi_dsub>
 80094fc:	4622      	mov	r2, r4
 80094fe:	462b      	mov	r3, r5
 8009500:	f7f6 ffea 	bl	80004d8 <__aeabi_dmul>
 8009504:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009508:	4680      	mov	r8, r0
 800950a:	4689      	mov	r9, r1
 800950c:	4630      	mov	r0, r6
 800950e:	4639      	mov	r1, r7
 8009510:	f7f6 ffe2 	bl	80004d8 <__aeabi_dmul>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	4640      	mov	r0, r8
 800951a:	4649      	mov	r1, r9
 800951c:	f7f6 fe26 	bl	800016c <__adddf3>
 8009520:	4652      	mov	r2, sl
 8009522:	465b      	mov	r3, fp
 8009524:	4606      	mov	r6, r0
 8009526:	460f      	mov	r7, r1
 8009528:	4620      	mov	r0, r4
 800952a:	4629      	mov	r1, r5
 800952c:	f7f6 ffd4 	bl	80004d8 <__aeabi_dmul>
 8009530:	460b      	mov	r3, r1
 8009532:	4602      	mov	r2, r0
 8009534:	4680      	mov	r8, r0
 8009536:	4689      	mov	r9, r1
 8009538:	4630      	mov	r0, r6
 800953a:	4639      	mov	r1, r7
 800953c:	f7f6 fe16 	bl	800016c <__adddf3>
 8009540:	4b18      	ldr	r3, [pc, #96]	@ (80095a4 <__ieee754_pow+0x40c>)
 8009542:	4604      	mov	r4, r0
 8009544:	4299      	cmp	r1, r3
 8009546:	460d      	mov	r5, r1
 8009548:	468a      	mov	sl, r1
 800954a:	468b      	mov	fp, r1
 800954c:	f340 82e0 	ble.w	8009b10 <__ieee754_pow+0x978>
 8009550:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009554:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009558:	4303      	orrs	r3, r0
 800955a:	f000 81df 	beq.w	800991c <__ieee754_pow+0x784>
 800955e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009562:	2200      	movs	r2, #0
 8009564:	2300      	movs	r3, #0
 8009566:	f7f7 fa29 	bl	80009bc <__aeabi_dcmplt>
 800956a:	3800      	subs	r0, #0
 800956c:	bf18      	it	ne
 800956e:	2001      	movne	r0, #1
 8009570:	e71d      	b.n	80093ae <__ieee754_pow+0x216>
 8009572:	bf00      	nop
 8009574:	f3af 8000 	nop.w
 8009578:	60000000 	.word	0x60000000
 800957c:	3ff71547 	.word	0x3ff71547
 8009580:	f85ddf44 	.word	0xf85ddf44
 8009584:	3e54ae0b 	.word	0x3e54ae0b
 8009588:	55555555 	.word	0x55555555
 800958c:	3fd55555 	.word	0x3fd55555
 8009590:	652b82fe 	.word	0x652b82fe
 8009594:	3ff71547 	.word	0x3ff71547
 8009598:	3ff00000 	.word	0x3ff00000
 800959c:	3fd00000 	.word	0x3fd00000
 80095a0:	3fe00000 	.word	0x3fe00000
 80095a4:	408fffff 	.word	0x408fffff
 80095a8:	4ad3      	ldr	r2, [pc, #844]	@ (80098f8 <__ieee754_pow+0x760>)
 80095aa:	402a      	ands	r2, r5
 80095ac:	2a00      	cmp	r2, #0
 80095ae:	f040 817a 	bne.w	80098a6 <__ieee754_pow+0x70e>
 80095b2:	4bd2      	ldr	r3, [pc, #840]	@ (80098fc <__ieee754_pow+0x764>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	f7f6 ff8f 	bl	80004d8 <__aeabi_dmul>
 80095ba:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80095be:	460b      	mov	r3, r1
 80095c0:	151a      	asrs	r2, r3, #20
 80095c2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80095c6:	4422      	add	r2, r4
 80095c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80095ca:	4acd      	ldr	r2, [pc, #820]	@ (8009900 <__ieee754_pow+0x768>)
 80095cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095d0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80095d4:	4293      	cmp	r3, r2
 80095d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80095da:	dd08      	ble.n	80095ee <__ieee754_pow+0x456>
 80095dc:	4ac9      	ldr	r2, [pc, #804]	@ (8009904 <__ieee754_pow+0x76c>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	f340 8163 	ble.w	80098aa <__ieee754_pow+0x712>
 80095e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095e6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80095ea:	3301      	adds	r3, #1
 80095ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80095ee:	2600      	movs	r6, #0
 80095f0:	00f3      	lsls	r3, r6, #3
 80095f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095f4:	4bc4      	ldr	r3, [pc, #784]	@ (8009908 <__ieee754_pow+0x770>)
 80095f6:	4629      	mov	r1, r5
 80095f8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009600:	461a      	mov	r2, r3
 8009602:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009606:	4623      	mov	r3, r4
 8009608:	4682      	mov	sl, r0
 800960a:	f7f6 fdad 	bl	8000168 <__aeabi_dsub>
 800960e:	4652      	mov	r2, sl
 8009610:	462b      	mov	r3, r5
 8009612:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009616:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800961a:	f7f6 fda7 	bl	800016c <__adddf3>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	2000      	movs	r0, #0
 8009624:	49b9      	ldr	r1, [pc, #740]	@ (800990c <__ieee754_pow+0x774>)
 8009626:	f7f7 f881 	bl	800072c <__aeabi_ddiv>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009632:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009636:	f7f6 ff4f 	bl	80004d8 <__aeabi_dmul>
 800963a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800963e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009642:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009646:	2300      	movs	r3, #0
 8009648:	2200      	movs	r2, #0
 800964a:	46ab      	mov	fp, r5
 800964c:	106d      	asrs	r5, r5, #1
 800964e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009652:	9304      	str	r3, [sp, #16]
 8009654:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009658:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800965c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009660:	4640      	mov	r0, r8
 8009662:	4649      	mov	r1, r9
 8009664:	4614      	mov	r4, r2
 8009666:	461d      	mov	r5, r3
 8009668:	f7f6 ff36 	bl	80004d8 <__aeabi_dmul>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009674:	f7f6 fd78 	bl	8000168 <__aeabi_dsub>
 8009678:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800967c:	4606      	mov	r6, r0
 800967e:	460f      	mov	r7, r1
 8009680:	4620      	mov	r0, r4
 8009682:	4629      	mov	r1, r5
 8009684:	f7f6 fd70 	bl	8000168 <__aeabi_dsub>
 8009688:	4602      	mov	r2, r0
 800968a:	460b      	mov	r3, r1
 800968c:	4650      	mov	r0, sl
 800968e:	4659      	mov	r1, fp
 8009690:	f7f6 fd6a 	bl	8000168 <__aeabi_dsub>
 8009694:	4642      	mov	r2, r8
 8009696:	464b      	mov	r3, r9
 8009698:	f7f6 ff1e 	bl	80004d8 <__aeabi_dmul>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4630      	mov	r0, r6
 80096a2:	4639      	mov	r1, r7
 80096a4:	f7f6 fd60 	bl	8000168 <__aeabi_dsub>
 80096a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80096ac:	f7f6 ff14 	bl	80004d8 <__aeabi_dmul>
 80096b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80096b8:	4610      	mov	r0, r2
 80096ba:	4619      	mov	r1, r3
 80096bc:	f7f6 ff0c 	bl	80004d8 <__aeabi_dmul>
 80096c0:	a37b      	add	r3, pc, #492	@ (adr r3, 80098b0 <__ieee754_pow+0x718>)
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	4604      	mov	r4, r0
 80096c8:	460d      	mov	r5, r1
 80096ca:	f7f6 ff05 	bl	80004d8 <__aeabi_dmul>
 80096ce:	a37a      	add	r3, pc, #488	@ (adr r3, 80098b8 <__ieee754_pow+0x720>)
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	f7f6 fd4a 	bl	800016c <__adddf3>
 80096d8:	4622      	mov	r2, r4
 80096da:	462b      	mov	r3, r5
 80096dc:	f7f6 fefc 	bl	80004d8 <__aeabi_dmul>
 80096e0:	a377      	add	r3, pc, #476	@ (adr r3, 80098c0 <__ieee754_pow+0x728>)
 80096e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e6:	f7f6 fd41 	bl	800016c <__adddf3>
 80096ea:	4622      	mov	r2, r4
 80096ec:	462b      	mov	r3, r5
 80096ee:	f7f6 fef3 	bl	80004d8 <__aeabi_dmul>
 80096f2:	a375      	add	r3, pc, #468	@ (adr r3, 80098c8 <__ieee754_pow+0x730>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	f7f6 fd38 	bl	800016c <__adddf3>
 80096fc:	4622      	mov	r2, r4
 80096fe:	462b      	mov	r3, r5
 8009700:	f7f6 feea 	bl	80004d8 <__aeabi_dmul>
 8009704:	a372      	add	r3, pc, #456	@ (adr r3, 80098d0 <__ieee754_pow+0x738>)
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	f7f6 fd2f 	bl	800016c <__adddf3>
 800970e:	4622      	mov	r2, r4
 8009710:	462b      	mov	r3, r5
 8009712:	f7f6 fee1 	bl	80004d8 <__aeabi_dmul>
 8009716:	a370      	add	r3, pc, #448	@ (adr r3, 80098d8 <__ieee754_pow+0x740>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	f7f6 fd26 	bl	800016c <__adddf3>
 8009720:	4622      	mov	r2, r4
 8009722:	4606      	mov	r6, r0
 8009724:	460f      	mov	r7, r1
 8009726:	462b      	mov	r3, r5
 8009728:	4620      	mov	r0, r4
 800972a:	4629      	mov	r1, r5
 800972c:	f7f6 fed4 	bl	80004d8 <__aeabi_dmul>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	4630      	mov	r0, r6
 8009736:	4639      	mov	r1, r7
 8009738:	f7f6 fece 	bl	80004d8 <__aeabi_dmul>
 800973c:	4604      	mov	r4, r0
 800973e:	460d      	mov	r5, r1
 8009740:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009744:	4642      	mov	r2, r8
 8009746:	464b      	mov	r3, r9
 8009748:	f7f6 fd10 	bl	800016c <__adddf3>
 800974c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009750:	f7f6 fec2 	bl	80004d8 <__aeabi_dmul>
 8009754:	4622      	mov	r2, r4
 8009756:	462b      	mov	r3, r5
 8009758:	f7f6 fd08 	bl	800016c <__adddf3>
 800975c:	4642      	mov	r2, r8
 800975e:	4682      	mov	sl, r0
 8009760:	468b      	mov	fp, r1
 8009762:	464b      	mov	r3, r9
 8009764:	4640      	mov	r0, r8
 8009766:	4649      	mov	r1, r9
 8009768:	f7f6 feb6 	bl	80004d8 <__aeabi_dmul>
 800976c:	2200      	movs	r2, #0
 800976e:	4b68      	ldr	r3, [pc, #416]	@ (8009910 <__ieee754_pow+0x778>)
 8009770:	4606      	mov	r6, r0
 8009772:	460f      	mov	r7, r1
 8009774:	f7f6 fcfa 	bl	800016c <__adddf3>
 8009778:	4652      	mov	r2, sl
 800977a:	465b      	mov	r3, fp
 800977c:	f7f6 fcf6 	bl	800016c <__adddf3>
 8009780:	2400      	movs	r4, #0
 8009782:	460d      	mov	r5, r1
 8009784:	4622      	mov	r2, r4
 8009786:	460b      	mov	r3, r1
 8009788:	4640      	mov	r0, r8
 800978a:	4649      	mov	r1, r9
 800978c:	f7f6 fea4 	bl	80004d8 <__aeabi_dmul>
 8009790:	2200      	movs	r2, #0
 8009792:	4680      	mov	r8, r0
 8009794:	4689      	mov	r9, r1
 8009796:	4620      	mov	r0, r4
 8009798:	4629      	mov	r1, r5
 800979a:	4b5d      	ldr	r3, [pc, #372]	@ (8009910 <__ieee754_pow+0x778>)
 800979c:	f7f6 fce4 	bl	8000168 <__aeabi_dsub>
 80097a0:	4632      	mov	r2, r6
 80097a2:	463b      	mov	r3, r7
 80097a4:	f7f6 fce0 	bl	8000168 <__aeabi_dsub>
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	4650      	mov	r0, sl
 80097ae:	4659      	mov	r1, fp
 80097b0:	f7f6 fcda 	bl	8000168 <__aeabi_dsub>
 80097b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097b8:	f7f6 fe8e 	bl	80004d8 <__aeabi_dmul>
 80097bc:	4622      	mov	r2, r4
 80097be:	4606      	mov	r6, r0
 80097c0:	460f      	mov	r7, r1
 80097c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80097c6:	462b      	mov	r3, r5
 80097c8:	f7f6 fe86 	bl	80004d8 <__aeabi_dmul>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	4630      	mov	r0, r6
 80097d2:	4639      	mov	r1, r7
 80097d4:	f7f6 fcca 	bl	800016c <__adddf3>
 80097d8:	2400      	movs	r4, #0
 80097da:	4606      	mov	r6, r0
 80097dc:	460f      	mov	r7, r1
 80097de:	4602      	mov	r2, r0
 80097e0:	460b      	mov	r3, r1
 80097e2:	4640      	mov	r0, r8
 80097e4:	4649      	mov	r1, r9
 80097e6:	f7f6 fcc1 	bl	800016c <__adddf3>
 80097ea:	a33d      	add	r3, pc, #244	@ (adr r3, 80098e0 <__ieee754_pow+0x748>)
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	4620      	mov	r0, r4
 80097f2:	460d      	mov	r5, r1
 80097f4:	f7f6 fe70 	bl	80004d8 <__aeabi_dmul>
 80097f8:	4642      	mov	r2, r8
 80097fa:	464b      	mov	r3, r9
 80097fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009800:	4620      	mov	r0, r4
 8009802:	4629      	mov	r1, r5
 8009804:	f7f6 fcb0 	bl	8000168 <__aeabi_dsub>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	4630      	mov	r0, r6
 800980e:	4639      	mov	r1, r7
 8009810:	f7f6 fcaa 	bl	8000168 <__aeabi_dsub>
 8009814:	a334      	add	r3, pc, #208	@ (adr r3, 80098e8 <__ieee754_pow+0x750>)
 8009816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981a:	f7f6 fe5d 	bl	80004d8 <__aeabi_dmul>
 800981e:	a334      	add	r3, pc, #208	@ (adr r3, 80098f0 <__ieee754_pow+0x758>)
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	4606      	mov	r6, r0
 8009826:	460f      	mov	r7, r1
 8009828:	4620      	mov	r0, r4
 800982a:	4629      	mov	r1, r5
 800982c:	f7f6 fe54 	bl	80004d8 <__aeabi_dmul>
 8009830:	4602      	mov	r2, r0
 8009832:	460b      	mov	r3, r1
 8009834:	4630      	mov	r0, r6
 8009836:	4639      	mov	r1, r7
 8009838:	f7f6 fc98 	bl	800016c <__adddf3>
 800983c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800983e:	4b35      	ldr	r3, [pc, #212]	@ (8009914 <__ieee754_pow+0x77c>)
 8009840:	2400      	movs	r4, #0
 8009842:	4413      	add	r3, r2
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f7f6 fc90 	bl	800016c <__adddf3>
 800984c:	4682      	mov	sl, r0
 800984e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009850:	468b      	mov	fp, r1
 8009852:	f7f6 fdd7 	bl	8000404 <__aeabi_i2d>
 8009856:	4606      	mov	r6, r0
 8009858:	460f      	mov	r7, r1
 800985a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800985c:	4b2e      	ldr	r3, [pc, #184]	@ (8009918 <__ieee754_pow+0x780>)
 800985e:	4413      	add	r3, r2
 8009860:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009864:	4652      	mov	r2, sl
 8009866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800986a:	465b      	mov	r3, fp
 800986c:	f7f6 fc7e 	bl	800016c <__adddf3>
 8009870:	4642      	mov	r2, r8
 8009872:	464b      	mov	r3, r9
 8009874:	f7f6 fc7a 	bl	800016c <__adddf3>
 8009878:	4632      	mov	r2, r6
 800987a:	463b      	mov	r3, r7
 800987c:	f7f6 fc76 	bl	800016c <__adddf3>
 8009880:	4632      	mov	r2, r6
 8009882:	463b      	mov	r3, r7
 8009884:	4620      	mov	r0, r4
 8009886:	460d      	mov	r5, r1
 8009888:	f7f6 fc6e 	bl	8000168 <__aeabi_dsub>
 800988c:	4642      	mov	r2, r8
 800988e:	464b      	mov	r3, r9
 8009890:	f7f6 fc6a 	bl	8000168 <__aeabi_dsub>
 8009894:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009898:	f7f6 fc66 	bl	8000168 <__aeabi_dsub>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	4650      	mov	r0, sl
 80098a2:	4659      	mov	r1, fp
 80098a4:	e618      	b.n	80094d8 <__ieee754_pow+0x340>
 80098a6:	2400      	movs	r4, #0
 80098a8:	e68a      	b.n	80095c0 <__ieee754_pow+0x428>
 80098aa:	2601      	movs	r6, #1
 80098ac:	e6a0      	b.n	80095f0 <__ieee754_pow+0x458>
 80098ae:	bf00      	nop
 80098b0:	4a454eef 	.word	0x4a454eef
 80098b4:	3fca7e28 	.word	0x3fca7e28
 80098b8:	93c9db65 	.word	0x93c9db65
 80098bc:	3fcd864a 	.word	0x3fcd864a
 80098c0:	a91d4101 	.word	0xa91d4101
 80098c4:	3fd17460 	.word	0x3fd17460
 80098c8:	518f264d 	.word	0x518f264d
 80098cc:	3fd55555 	.word	0x3fd55555
 80098d0:	db6fabff 	.word	0xdb6fabff
 80098d4:	3fdb6db6 	.word	0x3fdb6db6
 80098d8:	33333303 	.word	0x33333303
 80098dc:	3fe33333 	.word	0x3fe33333
 80098e0:	e0000000 	.word	0xe0000000
 80098e4:	3feec709 	.word	0x3feec709
 80098e8:	dc3a03fd 	.word	0xdc3a03fd
 80098ec:	3feec709 	.word	0x3feec709
 80098f0:	145b01f5 	.word	0x145b01f5
 80098f4:	be3e2fe0 	.word	0xbe3e2fe0
 80098f8:	7ff00000 	.word	0x7ff00000
 80098fc:	43400000 	.word	0x43400000
 8009900:	0003988e 	.word	0x0003988e
 8009904:	000bb679 	.word	0x000bb679
 8009908:	0800a110 	.word	0x0800a110
 800990c:	3ff00000 	.word	0x3ff00000
 8009910:	40080000 	.word	0x40080000
 8009914:	0800a0f0 	.word	0x0800a0f0
 8009918:	0800a100 	.word	0x0800a100
 800991c:	a39a      	add	r3, pc, #616	@ (adr r3, 8009b88 <__ieee754_pow+0x9f0>)
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	4630      	mov	r0, r6
 8009924:	4639      	mov	r1, r7
 8009926:	f7f6 fc21 	bl	800016c <__adddf3>
 800992a:	4642      	mov	r2, r8
 800992c:	e9cd 0100 	strd	r0, r1, [sp]
 8009930:	464b      	mov	r3, r9
 8009932:	4620      	mov	r0, r4
 8009934:	4629      	mov	r1, r5
 8009936:	f7f6 fc17 	bl	8000168 <__aeabi_dsub>
 800993a:	4602      	mov	r2, r0
 800993c:	460b      	mov	r3, r1
 800993e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009942:	f7f7 f859 	bl	80009f8 <__aeabi_dcmpgt>
 8009946:	2800      	cmp	r0, #0
 8009948:	f47f ae09 	bne.w	800955e <__ieee754_pow+0x3c6>
 800994c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009950:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009954:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8009958:	fa43 fa0a 	asr.w	sl, r3, sl
 800995c:	44da      	add	sl, fp
 800995e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009962:	489b      	ldr	r0, [pc, #620]	@ (8009bd0 <__ieee754_pow+0xa38>)
 8009964:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009968:	4108      	asrs	r0, r1
 800996a:	ea00 030a 	and.w	r3, r0, sl
 800996e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009972:	f1c1 0114 	rsb	r1, r1, #20
 8009976:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800997a:	4640      	mov	r0, r8
 800997c:	fa4a fa01 	asr.w	sl, sl, r1
 8009980:	f1bb 0f00 	cmp.w	fp, #0
 8009984:	4649      	mov	r1, r9
 8009986:	f04f 0200 	mov.w	r2, #0
 800998a:	bfb8      	it	lt
 800998c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009990:	f7f6 fbea 	bl	8000168 <__aeabi_dsub>
 8009994:	4680      	mov	r8, r0
 8009996:	4689      	mov	r9, r1
 8009998:	2400      	movs	r4, #0
 800999a:	4632      	mov	r2, r6
 800999c:	463b      	mov	r3, r7
 800999e:	4640      	mov	r0, r8
 80099a0:	4649      	mov	r1, r9
 80099a2:	f7f6 fbe3 	bl	800016c <__adddf3>
 80099a6:	a37a      	add	r3, pc, #488	@ (adr r3, 8009b90 <__ieee754_pow+0x9f8>)
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	4620      	mov	r0, r4
 80099ae:	460d      	mov	r5, r1
 80099b0:	f7f6 fd92 	bl	80004d8 <__aeabi_dmul>
 80099b4:	4642      	mov	r2, r8
 80099b6:	464b      	mov	r3, r9
 80099b8:	e9cd 0100 	strd	r0, r1, [sp]
 80099bc:	4620      	mov	r0, r4
 80099be:	4629      	mov	r1, r5
 80099c0:	f7f6 fbd2 	bl	8000168 <__aeabi_dsub>
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	4630      	mov	r0, r6
 80099ca:	4639      	mov	r1, r7
 80099cc:	f7f6 fbcc 	bl	8000168 <__aeabi_dsub>
 80099d0:	a371      	add	r3, pc, #452	@ (adr r3, 8009b98 <__ieee754_pow+0xa00>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	f7f6 fd7f 	bl	80004d8 <__aeabi_dmul>
 80099da:	a371      	add	r3, pc, #452	@ (adr r3, 8009ba0 <__ieee754_pow+0xa08>)
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	4680      	mov	r8, r0
 80099e2:	4689      	mov	r9, r1
 80099e4:	4620      	mov	r0, r4
 80099e6:	4629      	mov	r1, r5
 80099e8:	f7f6 fd76 	bl	80004d8 <__aeabi_dmul>
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	4640      	mov	r0, r8
 80099f2:	4649      	mov	r1, r9
 80099f4:	f7f6 fbba 	bl	800016c <__adddf3>
 80099f8:	4604      	mov	r4, r0
 80099fa:	460d      	mov	r5, r1
 80099fc:	4602      	mov	r2, r0
 80099fe:	460b      	mov	r3, r1
 8009a00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a04:	f7f6 fbb2 	bl	800016c <__adddf3>
 8009a08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a0c:	4680      	mov	r8, r0
 8009a0e:	4689      	mov	r9, r1
 8009a10:	f7f6 fbaa 	bl	8000168 <__aeabi_dsub>
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	4620      	mov	r0, r4
 8009a1a:	4629      	mov	r1, r5
 8009a1c:	f7f6 fba4 	bl	8000168 <__aeabi_dsub>
 8009a20:	4642      	mov	r2, r8
 8009a22:	4606      	mov	r6, r0
 8009a24:	460f      	mov	r7, r1
 8009a26:	464b      	mov	r3, r9
 8009a28:	4640      	mov	r0, r8
 8009a2a:	4649      	mov	r1, r9
 8009a2c:	f7f6 fd54 	bl	80004d8 <__aeabi_dmul>
 8009a30:	a35d      	add	r3, pc, #372	@ (adr r3, 8009ba8 <__ieee754_pow+0xa10>)
 8009a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a36:	4604      	mov	r4, r0
 8009a38:	460d      	mov	r5, r1
 8009a3a:	f7f6 fd4d 	bl	80004d8 <__aeabi_dmul>
 8009a3e:	a35c      	add	r3, pc, #368	@ (adr r3, 8009bb0 <__ieee754_pow+0xa18>)
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	f7f6 fb90 	bl	8000168 <__aeabi_dsub>
 8009a48:	4622      	mov	r2, r4
 8009a4a:	462b      	mov	r3, r5
 8009a4c:	f7f6 fd44 	bl	80004d8 <__aeabi_dmul>
 8009a50:	a359      	add	r3, pc, #356	@ (adr r3, 8009bb8 <__ieee754_pow+0xa20>)
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	f7f6 fb89 	bl	800016c <__adddf3>
 8009a5a:	4622      	mov	r2, r4
 8009a5c:	462b      	mov	r3, r5
 8009a5e:	f7f6 fd3b 	bl	80004d8 <__aeabi_dmul>
 8009a62:	a357      	add	r3, pc, #348	@ (adr r3, 8009bc0 <__ieee754_pow+0xa28>)
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	f7f6 fb7e 	bl	8000168 <__aeabi_dsub>
 8009a6c:	4622      	mov	r2, r4
 8009a6e:	462b      	mov	r3, r5
 8009a70:	f7f6 fd32 	bl	80004d8 <__aeabi_dmul>
 8009a74:	a354      	add	r3, pc, #336	@ (adr r3, 8009bc8 <__ieee754_pow+0xa30>)
 8009a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7a:	f7f6 fb77 	bl	800016c <__adddf3>
 8009a7e:	4622      	mov	r2, r4
 8009a80:	462b      	mov	r3, r5
 8009a82:	f7f6 fd29 	bl	80004d8 <__aeabi_dmul>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	4640      	mov	r0, r8
 8009a8c:	4649      	mov	r1, r9
 8009a8e:	f7f6 fb6b 	bl	8000168 <__aeabi_dsub>
 8009a92:	4604      	mov	r4, r0
 8009a94:	460d      	mov	r5, r1
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	4649      	mov	r1, r9
 8009a9e:	f7f6 fd1b 	bl	80004d8 <__aeabi_dmul>
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	e9cd 0100 	strd	r0, r1, [sp]
 8009aa8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009aac:	4620      	mov	r0, r4
 8009aae:	4629      	mov	r1, r5
 8009ab0:	f7f6 fb5a 	bl	8000168 <__aeabi_dsub>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009abc:	f7f6 fe36 	bl	800072c <__aeabi_ddiv>
 8009ac0:	4632      	mov	r2, r6
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	460d      	mov	r5, r1
 8009ac6:	463b      	mov	r3, r7
 8009ac8:	4640      	mov	r0, r8
 8009aca:	4649      	mov	r1, r9
 8009acc:	f7f6 fd04 	bl	80004d8 <__aeabi_dmul>
 8009ad0:	4632      	mov	r2, r6
 8009ad2:	463b      	mov	r3, r7
 8009ad4:	f7f6 fb4a 	bl	800016c <__adddf3>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4620      	mov	r0, r4
 8009ade:	4629      	mov	r1, r5
 8009ae0:	f7f6 fb42 	bl	8000168 <__aeabi_dsub>
 8009ae4:	4642      	mov	r2, r8
 8009ae6:	464b      	mov	r3, r9
 8009ae8:	f7f6 fb3e 	bl	8000168 <__aeabi_dsub>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	2000      	movs	r0, #0
 8009af2:	4938      	ldr	r1, [pc, #224]	@ (8009bd4 <__ieee754_pow+0xa3c>)
 8009af4:	f7f6 fb38 	bl	8000168 <__aeabi_dsub>
 8009af8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009afc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8009b00:	da2e      	bge.n	8009b60 <__ieee754_pow+0x9c8>
 8009b02:	4652      	mov	r2, sl
 8009b04:	f000 f874 	bl	8009bf0 <scalbn>
 8009b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b0c:	f7ff bbed 	b.w	80092ea <__ieee754_pow+0x152>
 8009b10:	4c31      	ldr	r4, [pc, #196]	@ (8009bd8 <__ieee754_pow+0xa40>)
 8009b12:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009b16:	42a3      	cmp	r3, r4
 8009b18:	d91a      	bls.n	8009b50 <__ieee754_pow+0x9b8>
 8009b1a:	4b30      	ldr	r3, [pc, #192]	@ (8009bdc <__ieee754_pow+0xa44>)
 8009b1c:	440b      	add	r3, r1
 8009b1e:	4303      	orrs	r3, r0
 8009b20:	d009      	beq.n	8009b36 <__ieee754_pow+0x99e>
 8009b22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b26:	2200      	movs	r2, #0
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f7f6 ff47 	bl	80009bc <__aeabi_dcmplt>
 8009b2e:	3800      	subs	r0, #0
 8009b30:	bf18      	it	ne
 8009b32:	2001      	movne	r0, #1
 8009b34:	e444      	b.n	80093c0 <__ieee754_pow+0x228>
 8009b36:	4642      	mov	r2, r8
 8009b38:	464b      	mov	r3, r9
 8009b3a:	f7f6 fb15 	bl	8000168 <__aeabi_dsub>
 8009b3e:	4632      	mov	r2, r6
 8009b40:	463b      	mov	r3, r7
 8009b42:	f7f6 ff4f 	bl	80009e4 <__aeabi_dcmpge>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d1eb      	bne.n	8009b22 <__ieee754_pow+0x98a>
 8009b4a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8009be0 <__ieee754_pow+0xa48>
 8009b4e:	e6fd      	b.n	800994c <__ieee754_pow+0x7b4>
 8009b50:	469a      	mov	sl, r3
 8009b52:	4b24      	ldr	r3, [pc, #144]	@ (8009be4 <__ieee754_pow+0xa4c>)
 8009b54:	459a      	cmp	sl, r3
 8009b56:	f63f aef9 	bhi.w	800994c <__ieee754_pow+0x7b4>
 8009b5a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009b5e:	e71b      	b.n	8009998 <__ieee754_pow+0x800>
 8009b60:	4621      	mov	r1, r4
 8009b62:	e7d1      	b.n	8009b08 <__ieee754_pow+0x970>
 8009b64:	2000      	movs	r0, #0
 8009b66:	491b      	ldr	r1, [pc, #108]	@ (8009bd4 <__ieee754_pow+0xa3c>)
 8009b68:	f7ff bb34 	b.w	80091d4 <__ieee754_pow+0x3c>
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	2100      	movs	r1, #0
 8009b70:	f7ff bb30 	b.w	80091d4 <__ieee754_pow+0x3c>
 8009b74:	4650      	mov	r0, sl
 8009b76:	4659      	mov	r1, fp
 8009b78:	f7ff bb2c 	b.w	80091d4 <__ieee754_pow+0x3c>
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	f7ff bb79 	b.w	8009274 <__ieee754_pow+0xdc>
 8009b82:	2400      	movs	r4, #0
 8009b84:	f7ff bb64 	b.w	8009250 <__ieee754_pow+0xb8>
 8009b88:	652b82fe 	.word	0x652b82fe
 8009b8c:	3c971547 	.word	0x3c971547
 8009b90:	00000000 	.word	0x00000000
 8009b94:	3fe62e43 	.word	0x3fe62e43
 8009b98:	fefa39ef 	.word	0xfefa39ef
 8009b9c:	3fe62e42 	.word	0x3fe62e42
 8009ba0:	0ca86c39 	.word	0x0ca86c39
 8009ba4:	be205c61 	.word	0xbe205c61
 8009ba8:	72bea4d0 	.word	0x72bea4d0
 8009bac:	3e663769 	.word	0x3e663769
 8009bb0:	c5d26bf1 	.word	0xc5d26bf1
 8009bb4:	3ebbbd41 	.word	0x3ebbbd41
 8009bb8:	af25de2c 	.word	0xaf25de2c
 8009bbc:	3f11566a 	.word	0x3f11566a
 8009bc0:	16bebd93 	.word	0x16bebd93
 8009bc4:	3f66c16c 	.word	0x3f66c16c
 8009bc8:	5555553e 	.word	0x5555553e
 8009bcc:	3fc55555 	.word	0x3fc55555
 8009bd0:	fff00000 	.word	0xfff00000
 8009bd4:	3ff00000 	.word	0x3ff00000
 8009bd8:	4090cbff 	.word	0x4090cbff
 8009bdc:	3f6f3400 	.word	0x3f6f3400
 8009be0:	4090cc00 	.word	0x4090cc00
 8009be4:	3fe00000 	.word	0x3fe00000

08009be8 <fabs>:
 8009be8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009bec:	4619      	mov	r1, r3
 8009bee:	4770      	bx	lr

08009bf0 <scalbn>:
 8009bf0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8009bf4:	4616      	mov	r6, r2
 8009bf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009bfa:	4683      	mov	fp, r0
 8009bfc:	468c      	mov	ip, r1
 8009bfe:	460b      	mov	r3, r1
 8009c00:	b982      	cbnz	r2, 8009c24 <scalbn+0x34>
 8009c02:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009c06:	4303      	orrs	r3, r0
 8009c08:	d039      	beq.n	8009c7e <scalbn+0x8e>
 8009c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8009cc8 <scalbn+0xd8>)
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f7f6 fc63 	bl	80004d8 <__aeabi_dmul>
 8009c12:	4b2e      	ldr	r3, [pc, #184]	@ (8009ccc <scalbn+0xdc>)
 8009c14:	4683      	mov	fp, r0
 8009c16:	429e      	cmp	r6, r3
 8009c18:	468c      	mov	ip, r1
 8009c1a:	da0d      	bge.n	8009c38 <scalbn+0x48>
 8009c1c:	a326      	add	r3, pc, #152	@ (adr r3, 8009cb8 <scalbn+0xc8>)
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	e01b      	b.n	8009c5c <scalbn+0x6c>
 8009c24:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8009c28:	42ba      	cmp	r2, r7
 8009c2a:	d109      	bne.n	8009c40 <scalbn+0x50>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	f7f6 fa9d 	bl	800016c <__adddf3>
 8009c32:	4683      	mov	fp, r0
 8009c34:	468c      	mov	ip, r1
 8009c36:	e022      	b.n	8009c7e <scalbn+0x8e>
 8009c38:	460b      	mov	r3, r1
 8009c3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009c3e:	3a36      	subs	r2, #54	@ 0x36
 8009c40:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009c44:	428e      	cmp	r6, r1
 8009c46:	dd0c      	ble.n	8009c62 <scalbn+0x72>
 8009c48:	a31d      	add	r3, pc, #116	@ (adr r3, 8009cc0 <scalbn+0xd0>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	461c      	mov	r4, r3
 8009c50:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8009c54:	f361 74df 	bfi	r4, r1, #31, #1
 8009c58:	4621      	mov	r1, r4
 8009c5a:	481d      	ldr	r0, [pc, #116]	@ (8009cd0 <scalbn+0xe0>)
 8009c5c:	f7f6 fc3c 	bl	80004d8 <__aeabi_dmul>
 8009c60:	e7e7      	b.n	8009c32 <scalbn+0x42>
 8009c62:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009c66:	4432      	add	r2, r6
 8009c68:	428a      	cmp	r2, r1
 8009c6a:	dced      	bgt.n	8009c48 <scalbn+0x58>
 8009c6c:	2a00      	cmp	r2, #0
 8009c6e:	dd0a      	ble.n	8009c86 <scalbn+0x96>
 8009c70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009c74:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009c78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009c7c:	46ac      	mov	ip, r5
 8009c7e:	4658      	mov	r0, fp
 8009c80:	4661      	mov	r1, ip
 8009c82:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8009c86:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009c8a:	da09      	bge.n	8009ca0 <scalbn+0xb0>
 8009c8c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8009c90:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8009c94:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8009c98:	480e      	ldr	r0, [pc, #56]	@ (8009cd4 <scalbn+0xe4>)
 8009c9a:	f041 011f 	orr.w	r1, r1, #31
 8009c9e:	e7bd      	b.n	8009c1c <scalbn+0x2c>
 8009ca0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009ca4:	3236      	adds	r2, #54	@ 0x36
 8009ca6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009caa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009cae:	4658      	mov	r0, fp
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	4b08      	ldr	r3, [pc, #32]	@ (8009cd8 <scalbn+0xe8>)
 8009cb6:	e7d1      	b.n	8009c5c <scalbn+0x6c>
 8009cb8:	c2f8f359 	.word	0xc2f8f359
 8009cbc:	01a56e1f 	.word	0x01a56e1f
 8009cc0:	8800759c 	.word	0x8800759c
 8009cc4:	7e37e43c 	.word	0x7e37e43c
 8009cc8:	43500000 	.word	0x43500000
 8009ccc:	ffff3cb0 	.word	0xffff3cb0
 8009cd0:	8800759c 	.word	0x8800759c
 8009cd4:	c2f8f359 	.word	0xc2f8f359
 8009cd8:	3c900000 	.word	0x3c900000

08009cdc <with_errno>:
 8009cdc:	b570      	push	{r4, r5, r6, lr}
 8009cde:	4604      	mov	r4, r0
 8009ce0:	460d      	mov	r5, r1
 8009ce2:	4616      	mov	r6, r2
 8009ce4:	f7fe fd1c 	bl	8008720 <__errno>
 8009ce8:	4629      	mov	r1, r5
 8009cea:	6006      	str	r6, [r0, #0]
 8009cec:	4620      	mov	r0, r4
 8009cee:	bd70      	pop	{r4, r5, r6, pc}

08009cf0 <xflow>:
 8009cf0:	b513      	push	{r0, r1, r4, lr}
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	b10c      	cbz	r4, 8009cfe <xflow+0xe>
 8009cfa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009cfe:	e9cd 2300 	strd	r2, r3, [sp]
 8009d02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d06:	f7f6 fbe7 	bl	80004d8 <__aeabi_dmul>
 8009d0a:	2222      	movs	r2, #34	@ 0x22
 8009d0c:	b002      	add	sp, #8
 8009d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d12:	f7ff bfe3 	b.w	8009cdc <with_errno>

08009d16 <__math_uflow>:
 8009d16:	2200      	movs	r2, #0
 8009d18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009d1c:	f7ff bfe8 	b.w	8009cf0 <xflow>

08009d20 <__math_oflow>:
 8009d20:	2200      	movs	r2, #0
 8009d22:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8009d26:	f7ff bfe3 	b.w	8009cf0 <xflow>
	...

08009d2c <__ieee754_sqrt>:
 8009d2c:	4a67      	ldr	r2, [pc, #412]	@ (8009ecc <__ieee754_sqrt+0x1a0>)
 8009d2e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d32:	438a      	bics	r2, r1
 8009d34:	4606      	mov	r6, r0
 8009d36:	460f      	mov	r7, r1
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	d10e      	bne.n	8009d5c <__ieee754_sqrt+0x30>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	f7f6 fbca 	bl	80004d8 <__aeabi_dmul>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	4630      	mov	r0, r6
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	f7f6 fa0e 	bl	800016c <__adddf3>
 8009d50:	4606      	mov	r6, r0
 8009d52:	460f      	mov	r7, r1
 8009d54:	4630      	mov	r0, r6
 8009d56:	4639      	mov	r1, r7
 8009d58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5c:	2900      	cmp	r1, #0
 8009d5e:	dc0c      	bgt.n	8009d7a <__ieee754_sqrt+0x4e>
 8009d60:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009d64:	4302      	orrs	r2, r0
 8009d66:	d0f5      	beq.n	8009d54 <__ieee754_sqrt+0x28>
 8009d68:	b189      	cbz	r1, 8009d8e <__ieee754_sqrt+0x62>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	f7f6 f9fc 	bl	8000168 <__aeabi_dsub>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	f7f6 fcda 	bl	800072c <__aeabi_ddiv>
 8009d78:	e7ea      	b.n	8009d50 <__ieee754_sqrt+0x24>
 8009d7a:	150a      	asrs	r2, r1, #20
 8009d7c:	d115      	bne.n	8009daa <__ieee754_sqrt+0x7e>
 8009d7e:	2100      	movs	r1, #0
 8009d80:	e009      	b.n	8009d96 <__ieee754_sqrt+0x6a>
 8009d82:	0ae3      	lsrs	r3, r4, #11
 8009d84:	3a15      	subs	r2, #21
 8009d86:	0564      	lsls	r4, r4, #21
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d0fa      	beq.n	8009d82 <__ieee754_sqrt+0x56>
 8009d8c:	e7f7      	b.n	8009d7e <__ieee754_sqrt+0x52>
 8009d8e:	460a      	mov	r2, r1
 8009d90:	e7fa      	b.n	8009d88 <__ieee754_sqrt+0x5c>
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	3101      	adds	r1, #1
 8009d96:	02d8      	lsls	r0, r3, #11
 8009d98:	d5fb      	bpl.n	8009d92 <__ieee754_sqrt+0x66>
 8009d9a:	1e48      	subs	r0, r1, #1
 8009d9c:	1a12      	subs	r2, r2, r0
 8009d9e:	f1c1 0020 	rsb	r0, r1, #32
 8009da2:	fa24 f000 	lsr.w	r0, r4, r0
 8009da6:	4303      	orrs	r3, r0
 8009da8:	408c      	lsls	r4, r1
 8009daa:	2600      	movs	r6, #0
 8009dac:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009db0:	2116      	movs	r1, #22
 8009db2:	07d2      	lsls	r2, r2, #31
 8009db4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009db8:	4632      	mov	r2, r6
 8009dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dc2:	bf5c      	itt	pl
 8009dc4:	005b      	lslpl	r3, r3, #1
 8009dc6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009dca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009dce:	bf58      	it	pl
 8009dd0:	0064      	lslpl	r4, r4, #1
 8009dd2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009dd6:	107f      	asrs	r7, r7, #1
 8009dd8:	0064      	lsls	r4, r4, #1
 8009dda:	1815      	adds	r5, r2, r0
 8009ddc:	429d      	cmp	r5, r3
 8009dde:	bfde      	ittt	le
 8009de0:	182a      	addle	r2, r5, r0
 8009de2:	1b5b      	suble	r3, r3, r5
 8009de4:	1836      	addle	r6, r6, r0
 8009de6:	0fe5      	lsrs	r5, r4, #31
 8009de8:	3901      	subs	r1, #1
 8009dea:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009dee:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009df2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009df6:	d1f0      	bne.n	8009dda <__ieee754_sqrt+0xae>
 8009df8:	460d      	mov	r5, r1
 8009dfa:	f04f 0a20 	mov.w	sl, #32
 8009dfe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009e02:	429a      	cmp	r2, r3
 8009e04:	eb01 0c00 	add.w	ip, r1, r0
 8009e08:	db02      	blt.n	8009e10 <__ieee754_sqrt+0xe4>
 8009e0a:	d113      	bne.n	8009e34 <__ieee754_sqrt+0x108>
 8009e0c:	45a4      	cmp	ip, r4
 8009e0e:	d811      	bhi.n	8009e34 <__ieee754_sqrt+0x108>
 8009e10:	f1bc 0f00 	cmp.w	ip, #0
 8009e14:	eb0c 0100 	add.w	r1, ip, r0
 8009e18:	da42      	bge.n	8009ea0 <__ieee754_sqrt+0x174>
 8009e1a:	2900      	cmp	r1, #0
 8009e1c:	db40      	blt.n	8009ea0 <__ieee754_sqrt+0x174>
 8009e1e:	f102 0e01 	add.w	lr, r2, #1
 8009e22:	1a9b      	subs	r3, r3, r2
 8009e24:	4672      	mov	r2, lr
 8009e26:	45a4      	cmp	ip, r4
 8009e28:	bf88      	it	hi
 8009e2a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009e2e:	eba4 040c 	sub.w	r4, r4, ip
 8009e32:	4405      	add	r5, r0
 8009e34:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009e38:	f1ba 0a01 	subs.w	sl, sl, #1
 8009e3c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009e40:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009e44:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009e48:	d1db      	bne.n	8009e02 <__ieee754_sqrt+0xd6>
 8009e4a:	431c      	orrs	r4, r3
 8009e4c:	d01a      	beq.n	8009e84 <__ieee754_sqrt+0x158>
 8009e4e:	4c20      	ldr	r4, [pc, #128]	@ (8009ed0 <__ieee754_sqrt+0x1a4>)
 8009e50:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8009ed4 <__ieee754_sqrt+0x1a8>
 8009e54:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009e58:	e9db 2300 	ldrd	r2, r3, [fp]
 8009e5c:	f7f6 f984 	bl	8000168 <__aeabi_dsub>
 8009e60:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4640      	mov	r0, r8
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	f7f6 fdb0 	bl	80009d0 <__aeabi_dcmple>
 8009e70:	b140      	cbz	r0, 8009e84 <__ieee754_sqrt+0x158>
 8009e72:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009e76:	e9db 2300 	ldrd	r2, r3, [fp]
 8009e7a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009e7e:	d111      	bne.n	8009ea4 <__ieee754_sqrt+0x178>
 8009e80:	4655      	mov	r5, sl
 8009e82:	3601      	adds	r6, #1
 8009e84:	1072      	asrs	r2, r6, #1
 8009e86:	086b      	lsrs	r3, r5, #1
 8009e88:	07f1      	lsls	r1, r6, #31
 8009e8a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009e8e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009e92:	bf48      	it	mi
 8009e94:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009e98:	4618      	mov	r0, r3
 8009e9a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8009e9e:	e757      	b.n	8009d50 <__ieee754_sqrt+0x24>
 8009ea0:	4696      	mov	lr, r2
 8009ea2:	e7be      	b.n	8009e22 <__ieee754_sqrt+0xf6>
 8009ea4:	f7f6 f962 	bl	800016c <__adddf3>
 8009ea8:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	4640      	mov	r0, r8
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	f7f6 fd82 	bl	80009bc <__aeabi_dcmplt>
 8009eb8:	b120      	cbz	r0, 8009ec4 <__ieee754_sqrt+0x198>
 8009eba:	1ca8      	adds	r0, r5, #2
 8009ebc:	bf08      	it	eq
 8009ebe:	3601      	addeq	r6, #1
 8009ec0:	3502      	adds	r5, #2
 8009ec2:	e7df      	b.n	8009e84 <__ieee754_sqrt+0x158>
 8009ec4:	1c6b      	adds	r3, r5, #1
 8009ec6:	f023 0501 	bic.w	r5, r3, #1
 8009eca:	e7db      	b.n	8009e84 <__ieee754_sqrt+0x158>
 8009ecc:	7ff00000 	.word	0x7ff00000
 8009ed0:	20000098 	.word	0x20000098
 8009ed4:	20000090 	.word	0x20000090

08009ed8 <_init>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	bf00      	nop
 8009edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ede:	bc08      	pop	{r3}
 8009ee0:	469e      	mov	lr, r3
 8009ee2:	4770      	bx	lr

08009ee4 <_fini>:
 8009ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee6:	bf00      	nop
 8009ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eea:	bc08      	pop	{r3}
 8009eec:	469e      	mov	lr, r3
 8009eee:	4770      	bx	lr
