
BTL_DonNhiem_CyclicExcutiveV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007498  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080075a8  080075a8  000085a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a8  080076a8  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  080076a8  080076a8  000086a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b0  080076b0  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b0  080076b0  000086b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076b4  080076b4  000086b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080076b8  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000070  08007728  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08007728  00009394  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011239  00000000  00000000  00009099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027eb  00000000  00000000  0001a2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  0001cac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d98  00000000  00000000  0001dc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001931f  00000000  00000000  0001e9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e8f  00000000  00000000  00037cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092986  00000000  00000000  0004cb4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df4d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005344  00000000  00000000  000df518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000e485c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08007590 	.word	0x08007590

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08007590 	.word	0x08007590

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <CCS811_ReadReg>:
extern I2C_HandleTypeDef hi2c2;

#define hi2cxc hi2c2
// Hàm đọc từ 1 thanh ghi (1byte)
uint8_t CCS811_ReadReg(uint8_t addr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af04      	add	r7, sp, #16
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, &result, 1, 100);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	2364      	movs	r3, #100	@ 0x64
 8000d58:	9302      	str	r3, [sp, #8]
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	f107 030f 	add.w	r3, r7, #15
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	2301      	movs	r3, #1
 8000d66:	21b4      	movs	r1, #180	@ 0xb4
 8000d68:	4803      	ldr	r0, [pc, #12]	@ (8000d78 <CCS811_ReadReg+0x34>)
 8000d6a:	f002 fa61 	bl	8003230 <HAL_I2C_Mem_Read>
    return result;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000110 	.word	0x20000110

08000d7c <CCS811_ReadRegMulti>:
// hàm đọc nhiều byte từ thanh ghi
void CCS811_ReadRegMulti(uint8_t addr, uint8_t * val,uint8_t size)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af04      	add	r7, sp, #16
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read( &hi2cxc, CCS811_ADDR, ( uint8_t )addr, I2C_MEMADD_SIZE_8BIT, val, size,100 );
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	79bb      	ldrb	r3, [r7, #6]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	2164      	movs	r1, #100	@ 0x64
 8000d96:	9102      	str	r1, [sp, #8]
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	21b4      	movs	r1, #180	@ 0xb4
 8000da2:	4803      	ldr	r0, [pc, #12]	@ (8000db0 <CCS811_ReadRegMulti+0x34>)
 8000da4:	f002 fa44 	bl	8003230 <HAL_I2C_Mem_Read>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000110 	.word	0x20000110

08000db4 <CCS811_WriteReg>:

// Hàm viết vào 1 thanh ghi 1byte
void CCS811_WriteReg(uint8_t addr, uint8_t val)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af04      	add	r7, sp, #16
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	71fb      	strb	r3, [r7, #7]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	2364      	movs	r3, #100	@ 0x64
 8000dca:	9302      	str	r3, [sp, #8]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	1dbb      	adds	r3, r7, #6
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	21b4      	movs	r1, #180	@ 0xb4
 8000dd8:	4803      	ldr	r0, [pc, #12]	@ (8000de8 <CCS811_WriteReg+0x34>)
 8000dda:	f002 f92f 	bl	800303c <HAL_I2C_Mem_Write>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000110 	.word	0x20000110

08000dec <CCS811_Init>:
void CCS811_WriteRegMulti(uint8_t addr, uint8_t *data, uint8_t length)
{
    HAL_I2C_Mem_Write(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, data, length, 100);
}
// Hàm khởi tạo CCS811
void CCS811_Init() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af02      	add	r7, sp, #8
    uint8_t status[1] = {0};
 8000df2:	2300      	movs	r3, #0
 8000df4:	723b      	strb	r3, [r7, #8]
    int Init_OK = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
    while(!Init_OK)
 8000dfa:	e026      	b.n	8000e4a <CCS811_Init+0x5e>
    {
		// Kiểm tra trạng thái cảm biến
    	status[0]=CCS811_ReadReg(CCS811_STATUS);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ffa1 	bl	8000d44 <CCS811_ReadReg>
 8000e02:	4603      	mov	r3, r0
 8000e04:	723b      	strb	r3, [r7, #8]
		if ((status[0] & 0x10) == 0)
 8000e06:	7a3b      	ldrb	r3, [r7, #8]
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <CCS811_Init+0x2a>
		{  // Kiểm tra nếu chưa sẵn sàng (bit 4 là 0)
			Init_OK = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	e019      	b.n	8000e4a <CCS811_Init+0x5e>
		}
		else
		{
			// Gửi lệnh bắt đầu ứng dụng
			uint8_t app_start = CCS811_APP_START;
 8000e16:	23f4      	movs	r3, #244	@ 0xf4
 8000e18:	71fb      	strb	r3, [r7, #7]
			HAL_I2C_Master_Transmit(&hi2cxc, CCS811_ADDR, &app_start, 1, HAL_MAX_DELAY);
 8000e1a:	1dfa      	adds	r2, r7, #7
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	21b4      	movs	r1, #180	@ 0xb4
 8000e26:	480d      	ldr	r0, [pc, #52]	@ (8000e5c <CCS811_Init+0x70>)
 8000e28:	f002 f80a 	bl	8002e40 <HAL_I2C_Master_Transmit>
			// Kiểm tra lại trạng thái
			status[0]=CCS811_ReadReg(CCS811_STATUS);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff89 	bl	8000d44 <CCS811_ReadReg>
 8000e32:	4603      	mov	r3, r0
 8000e34:	723b      	strb	r3, [r7, #8]
			if ((status[0] & 0x90) != 0x90) //bit 7 và 4=1
 8000e36:	7a3b      	ldrb	r3, [r7, #8]
 8000e38:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 8000e3c:	2b90      	cmp	r3, #144	@ 0x90
 8000e3e:	d002      	beq.n	8000e46 <CCS811_Init+0x5a>
			{  // Kiểm tra nếu sẵn sàng và không có lỗi
				Init_OK = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	e001      	b.n	8000e4a <CCS811_Init+0x5e>
			}
			else
			{
				Init_OK = 1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
    while(!Init_OK)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0d5      	beq.n	8000dfc <CCS811_Init+0x10>
			}

		}
    }
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000110 	.word	0x20000110

08000e60 <CCS811_Set_Mode>:
void CCS811_Set_Mode(uint8_t mode)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
   // Chế độ đo
	mode = mode <<4;
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	71fb      	strb	r3, [r7, #7]
    CCS811_WriteReg(CCS811_MEAS_MODE, mode);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	4619      	mov	r1, r3
 8000e74:	2001      	movs	r0, #1
 8000e76:	f7ff ff9d 	bl	8000db4 <CCS811_WriteReg>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <CCS811_Read_Co2>:
	    //Mode 4 = RAW mode.
 */

//Hàm đọc giá trị Co2
void CCS811_Read_Co2(uint16_t *eCO2)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
    uint8_t buf[8]={0};
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
    CCS811_ReadRegMulti(CCS811_ALG_RESULT_DATA, buf, 8);
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	2208      	movs	r2, #8
 8000e98:	4619      	mov	r1, r3
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f7ff ff6e 	bl	8000d7c <CCS811_ReadRegMulti>
    // Ghép hai byte đầu để lấy giá trị eCO2
    *eCO2 = (buf[0] << 8) | buf[1];
 8000ea0:	7a3b      	ldrb	r3, [r7, #8]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	7a7b      	ldrb	r3, [r7, #9]
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	801a      	strh	r2, [r3, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <CCS811_Read_TVOC>:

void CCS811_Read_TVOC(uint16_t *Tvoc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    uint8_t buf[8]={0};
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
    CCS811_ReadRegMulti(CCS811_ALG_RESULT_DATA, buf, 8);
 8000ecc:	f107 0308 	add.w	r3, r7, #8
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f7ff ff51 	bl	8000d7c <CCS811_ReadRegMulti>
    // Ghép hai byte đầu để lấy giá trị eCO2
    *Tvoc = (buf[2] << 8) | buf[3];
 8000eda:	7abb      	ldrb	r3, [r7, #10]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	7afb      	ldrb	r3, [r7, #11]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	801a      	strh	r2, [r3, #0]
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <CCS811_EnableInt>:
    }
}

//Enable the nINT signal
void CCS811_EnableInt(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
	uint8_t setting = CCS811_ReadReg(CCS811_MEAS_MODE); //đọc giá trị lúc trước
 8000efc:	2001      	movs	r0, #1
 8000efe:	f7ff ff21 	bl	8000d44 <CCS811_ReadReg>
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
	setting |= (1 << 3); //Set INTERRUPT bit ( chế độ khi có giá trị mới sẽ ngắt)
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	71fb      	strb	r3, [r7, #7]
	CCS811_WriteReg(CCS811_MEAS_MODE, setting);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	4619      	mov	r1, r3
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff ff4e 	bl	8000db4 <CCS811_WriteReg>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <lcd_send_cmd>:
/* vì chỉ dùng 4 bit cao làm 4 bit truyền dữ liệu nên phải truyền mỗi byte thành 2 lần */
/* 3 bit thấp là các chân En, RW, RS nên cũng cần phải đặt luôn trong mỗi lần truyền */

// hàm truyền lệnh, rs=0 để truyền lệnh
void lcd_send_cmd (char cmd)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af02      	add	r7, sp, #8
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f023 030f 	bic.w	r3, r3, #15
 8000f30:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  // en=1, rs=0
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	f043 030c 	orr.w	r3, r3, #12
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  // en=0, rs=0
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  // en=1, rs=0
 8000f4c:	7bbb      	ldrb	r3, [r7, #14]
 8000f4e:	f043 030c 	orr.w	r3, r3, #12
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  // en=0, rs=0
 8000f56:	7bbb      	ldrb	r3, [r7, #14]
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000f60:	f107 0208 	add.w	r2, r7, #8
 8000f64:	2364      	movs	r3, #100	@ 0x64
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2304      	movs	r3, #4
 8000f6a:	214e      	movs	r1, #78	@ 0x4e
 8000f6c:	4803      	ldr	r0, [pc, #12]	@ (8000f7c <lcd_send_cmd+0x5c>)
 8000f6e:	f001 ff67 	bl	8002e40 <HAL_I2C_Master_Transmit>
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200000bc 	.word	0x200000bc

08000f80 <lcd_send_data>:

// hàm truyền dữ liệu, 1 byte, rs=1 để truyền dữ liệu
void lcd_send_data (char data)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f023 030f 	bic.w	r3, r3, #15
 8000f90:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	011b      	lsls	r3, r3, #4
 8000f96:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  // en=1, rs=1
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	f043 030d 	orr.w	r3, r3, #13
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  // en=0, rs=1
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	f043 0309 	orr.w	r3, r3, #9
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  // en=1, rs=1
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
 8000fae:	f043 030d 	orr.w	r3, r3, #13
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  // en=0, rs=1
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	f043 0309 	orr.w	r3, r3, #9
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000fc0:	f107 0208 	add.w	r2, r7, #8
 8000fc4:	2364      	movs	r3, #100	@ 0x64
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2304      	movs	r3, #4
 8000fca:	214e      	movs	r1, #78	@ 0x4e
 8000fcc:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <lcd_send_data+0x5c>)
 8000fce:	f001 ff37 	bl	8002e40 <HAL_I2C_Master_Transmit>
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200000bc 	.word	0x200000bc

08000fe0 <lcd_clear>:

void lcd_clear (void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 8000fe6:	2080      	movs	r0, #128	@ 0x80
 8000fe8:	f7ff ff9a 	bl	8000f20 <lcd_send_cmd>
	for (int i = 0; i < 70; i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	e005      	b.n	8000ffe <lcd_clear+0x1e>
	{
		lcd_send_data(' ');
 8000ff2:	2020      	movs	r0, #32
 8000ff4:	f7ff ffc4 	bl	8000f80 <lcd_send_data>
	for (int i = 0; i < 70; i++)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b45      	cmp	r3, #69	@ 0x45
 8001002:	ddf6      	ble.n	8000ff2 <lcd_clear+0x12>
	}
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
    switch (row)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <lcd_put_cur+0x18>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d005      	beq.n	8001030 <lcd_put_cur+0x22>
 8001024:	e009      	b.n	800103a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800102c:	603b      	str	r3, [r7, #0]
            break;
 800102e:	e004      	b.n	800103a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001036:	603b      	str	r3, [r7, #0]
            break;
 8001038:	bf00      	nop
    }

    lcd_send_cmd(col);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff6e 	bl	8000f20 <lcd_send_cmd>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <lcd_init>:

void lcd_init (void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	// khởi tạo 4 bit
	HAL_Delay(50);  // đợi >40ms
 8001050:	2032      	movs	r0, #50	@ 0x32
 8001052:	f000 ff0b 	bl	8001e6c <HAL_Delay>
	lcd_send_cmd(0x30);
 8001056:	2030      	movs	r0, #48	@ 0x30
 8001058:	f7ff ff62 	bl	8000f20 <lcd_send_cmd>
	HAL_Delay(5);  // đợi >4.1ms
 800105c:	2005      	movs	r0, #5
 800105e:	f000 ff05 	bl	8001e6c <HAL_Delay>
	lcd_send_cmd(0x30);
 8001062:	2030      	movs	r0, #48	@ 0x30
 8001064:	f7ff ff5c 	bl	8000f20 <lcd_send_cmd>
	HAL_Delay(1);  // đợi >100us
 8001068:	2001      	movs	r0, #1
 800106a:	f000 feff 	bl	8001e6c <HAL_Delay>
	lcd_send_cmd(0x30);
 800106e:	2030      	movs	r0, #48	@ 0x30
 8001070:	f7ff ff56 	bl	8000f20 <lcd_send_cmd>
	HAL_Delay(10);
 8001074:	200a      	movs	r0, #10
 8001076:	f000 fef9 	bl	8001e6c <HAL_Delay>
	lcd_send_cmd(0x20);  // chế độ 4 bit
 800107a:	2020      	movs	r0, #32
 800107c:	f7ff ff50 	bl	8000f20 <lcd_send_cmd>
	HAL_Delay(10);
 8001080:	200a      	movs	r0, #10
 8001082:	f000 fef3 	bl	8001e6c <HAL_Delay>

  // khởi tạo hiển thị
	lcd_send_cmd(0x28); // Cài đặt chức năng --> DL=0 (chế độ 4 bit), N=1 (hiển thị 2 dòng), F=0 (ký tự 5x8)
 8001086:	2028      	movs	r0, #40	@ 0x28
 8001088:	f7ff ff4a 	bl	8000f20 <lcd_send_cmd>
	HAL_Delay(1);
 800108c:	2001      	movs	r0, #1
 800108e:	f000 feed 	bl	8001e6c <HAL_Delay>
	lcd_send_cmd(0x08); // Điều khiển bật/tắt hiển thị --> D=0, C=0, B=0 ---> tắt hiển thị
 8001092:	2008      	movs	r0, #8
 8001094:	f7ff ff44 	bl	8000f20 <lcd_send_cmd>
	HAL_Delay(1);
 8001098:	2001      	movs	r0, #1
 800109a:	f000 fee7 	bl	8001e6c <HAL_Delay>
	lcd_send_cmd(0x01);  // xóa màn hình
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff ff3e 	bl	8000f20 <lcd_send_cmd>
	HAL_Delay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f000 fee1 	bl	8001e6c <HAL_Delay>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f000 fede 	bl	8001e6c <HAL_Delay>
	lcd_send_cmd(0x06); // Cài đặt chế độ nhập --> I/D=1 (tăng con trỏ) & S=0 (không dịch chuyển)
 80010b0:	2006      	movs	r0, #6
 80010b2:	f7ff ff35 	bl	8000f20 <lcd_send_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f000 fed8 	bl	8001e6c <HAL_Delay>
	lcd_send_cmd(0x0C); // Điều khiển bật/tắt hiển thị --> D=1, C và B=0. (Con trỏ và nhấp nháy, hai bit cuối)
 80010bc:	200c      	movs	r0, #12
 80010be:	f7ff ff2f 	bl	8000f20 <lcd_send_cmd>
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 80010ce:	e006      	b.n	80010de <lcd_send_string+0x18>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff51 	bl	8000f80 <lcd_send_data>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f4      	bne.n	80010d0 <lcd_send_string+0xa>
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <CO_ppm_convert>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int CO_ppm_convert(float CO_vol) {
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    float a = ((5.0 - CO_vol) / CO_vol) * (10/10);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff f995 	bl	8000428 <__aeabi_f2d>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	491e      	ldr	r1, [pc, #120]	@ (8001180 <CO_ppm_convert+0x90>)
 8001108:	f7ff f82e 	bl	8000168 <__aeabi_dsub>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4614      	mov	r4, r2
 8001112:	461d      	mov	r5, r3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff f987 	bl	8000428 <__aeabi_f2d>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4620      	mov	r0, r4
 8001120:	4629      	mov	r1, r5
 8001122:	f7ff fb03 	bl	800072c <__aeabi_ddiv>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fcab 	bl	8000a88 <__aeabi_d2f>
 8001132:	4603      	mov	r3, r0
 8001134:	60fb      	str	r3, [r7, #12]
    return (int)round(100 * pow(a, -1.559));
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff f976 	bl	8000428 <__aeabi_f2d>
 800113c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001178 <CO_ppm_convert+0x88>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f005 fad1 	bl	80066e8 <pow>
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <CO_ppm_convert+0x94>)
 800114c:	f7ff f9c4 	bl	80004d8 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f005 fb34 	bl	80067c4 <round>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fc68 	bl	8000a38 <__aeabi_d2iz>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bdb0      	pop	{r4, r5, r7, pc}
 8001172:	bf00      	nop
 8001174:	f3af 8000 	nop.w
 8001178:	fbe76c8b 	.word	0xfbe76c8b
 800117c:	bff8f1a9 	.word	0xbff8f1a9
 8001180:	40140000 	.word	0x40140000
 8001184:	40590000 	.word	0x40590000

08001188 <CO_measure>:
void CO_measure()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	CO_adc_val = HAL_ADC_GetValue(&hadc1);
 800118c:	481a      	ldr	r0, [pc, #104]	@ (80011f8 <CO_measure+0x70>)
 800118e:	f001 f817 	bl	80021c0 <HAL_ADC_GetValue>
 8001192:	4603      	mov	r3, r0
 8001194:	4a19      	ldr	r2, [pc, #100]	@ (80011fc <CO_measure+0x74>)
 8001196:	6013      	str	r3, [r2, #0]
	CO_vol = ((float)CO_adc_val / 4095.0) * 5;
 8001198:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <CO_measure+0x74>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fd79 	bl	8000c94 <__aeabi_ui2f>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f93f 	bl	8000428 <__aeabi_f2d>
 80011aa:	a311      	add	r3, pc, #68	@ (adr r3, 80011f0 <CO_measure+0x68>)
 80011ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b0:	f7ff fabc 	bl	800072c <__aeabi_ddiv>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <CO_measure+0x78>)
 80011c2:	f7ff f989 	bl	80004d8 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f7ff fc5b 	bl	8000a88 <__aeabi_d2f>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001204 <CO_measure+0x7c>)
 80011d6:	6013      	str	r3, [r2, #0]
	CO_ppm = (uint16_t)(CO_ppm_convert(CO_vol));
 80011d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <CO_measure+0x7c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff87 	bl	80010f0 <CO_ppm_convert>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <CO_measure+0x80>)
 80011e8:	801a      	strh	r2, [r3, #0]
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40affe00 	.word	0x40affe00
 80011f8:	2000008c 	.word	0x2000008c
 80011fc:	200001f8 	.word	0x200001f8
 8001200:	40140000 	.word	0x40140000
 8001204:	20000200 	.word	0x20000200
 8001208:	20000204 	.word	0x20000204

0800120c <TVOC_measure>:
void TVOC_measure()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	CCS811_Read_TVOC(&Tvoc);
 8001210:	4804      	ldr	r0, [pc, #16]	@ (8001224 <TVOC_measure+0x18>)
 8001212:	f7ff fe53 	bl	8000ebc <CCS811_Read_TVOC>
	Tvoc_ppb=Tvoc;
 8001216:	4b03      	ldr	r3, [pc, #12]	@ (8001224 <TVOC_measure+0x18>)
 8001218:	881a      	ldrh	r2, [r3, #0]
 800121a:	4b03      	ldr	r3, [pc, #12]	@ (8001228 <TVOC_measure+0x1c>)
 800121c:	801a      	strh	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200001f4 	.word	0x200001f4
 8001228:	200001f6 	.word	0x200001f6

0800122c <CO2_measure>:
void CO2_measure()
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	CCS811_Read_Co2(&eCO2);
 8001230:	4804      	ldr	r0, [pc, #16]	@ (8001244 <CO2_measure+0x18>)
 8001232:	f7ff fe26 	bl	8000e82 <CCS811_Read_Co2>
	CO2_ppm=eCO2;
 8001236:	4b03      	ldr	r3, [pc, #12]	@ (8001244 <CO2_measure+0x18>)
 8001238:	881a      	ldrh	r2, [r3, #0]
 800123a:	4b03      	ldr	r3, [pc, #12]	@ (8001248 <CO2_measure+0x1c>)
 800123c:	801a      	strh	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200001fc 	.word	0x200001fc
 8001248:	200001fe 	.word	0x200001fe

0800124c <LCD_Display_CO>:
void LCD_Display_CO()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af02      	add	r7, sp, #8
	lcd_clear();
 8001252:	f7ff fec5 	bl	8000fe0 <lcd_clear>
	lcd_put_cur(0,0);
 8001256:	2100      	movs	r1, #0
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff fed8 	bl	800100e <lcd_put_cur>
	lcd_send_string ("CO:");
 800125e:	480c      	ldr	r0, [pc, #48]	@ (8001290 <LCD_Display_CO+0x44>)
 8001260:	f7ff ff31 	bl	80010c6 <lcd_send_string>
	lcd_put_cur(1,0);
 8001264:	2100      	movs	r1, #0
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff fed1 	bl	800100e <lcd_put_cur>
	snprintf(Lcd_buf, sizeof(Lcd_buf), "%d %s", CO_ppm, "ppm");
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <LCD_Display_CO+0x48>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <LCD_Display_CO+0x4c>)
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	4613      	mov	r3, r2
 8001278:	4a08      	ldr	r2, [pc, #32]	@ (800129c <LCD_Display_CO+0x50>)
 800127a:	2110      	movs	r1, #16
 800127c:	4808      	ldr	r0, [pc, #32]	@ (80012a0 <LCD_Display_CO+0x54>)
 800127e:	f004 fd4f 	bl	8005d20 <sniprintf>
	lcd_send_string (Lcd_buf);
 8001282:	4807      	ldr	r0, [pc, #28]	@ (80012a0 <LCD_Display_CO+0x54>)
 8001284:	f7ff ff1f 	bl	80010c6 <lcd_send_string>
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	080075a8 	.word	0x080075a8
 8001294:	20000204 	.word	0x20000204
 8001298:	080075b4 	.word	0x080075b4
 800129c:	080075ac 	.word	0x080075ac
 80012a0:	20000208 	.word	0x20000208

080012a4 <LCD_Display_CO2>:

void LCD_Display_CO2()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af02      	add	r7, sp, #8
	lcd_clear();
 80012aa:	f7ff fe99 	bl	8000fe0 <lcd_clear>
	lcd_put_cur(0,0);
 80012ae:	2100      	movs	r1, #0
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff feac 	bl	800100e <lcd_put_cur>
	lcd_send_string ("CO2:");
 80012b6:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <LCD_Display_CO2+0x44>)
 80012b8:	f7ff ff05 	bl	80010c6 <lcd_send_string>
	lcd_put_cur(1,0);
 80012bc:	2100      	movs	r1, #0
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff fea5 	bl	800100e <lcd_put_cur>
	snprintf(Lcd_buf, sizeof(Lcd_buf), "%d %s", CO2_ppm, "ppm");
 80012c4:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <LCD_Display_CO2+0x48>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <LCD_Display_CO2+0x4c>)
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	4613      	mov	r3, r2
 80012d0:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <LCD_Display_CO2+0x50>)
 80012d2:	2110      	movs	r1, #16
 80012d4:	4808      	ldr	r0, [pc, #32]	@ (80012f8 <LCD_Display_CO2+0x54>)
 80012d6:	f004 fd23 	bl	8005d20 <sniprintf>
	lcd_send_string (Lcd_buf);
 80012da:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <LCD_Display_CO2+0x54>)
 80012dc:	f7ff fef3 	bl	80010c6 <lcd_send_string>
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	080075b8 	.word	0x080075b8
 80012ec:	200001fe 	.word	0x200001fe
 80012f0:	080075b4 	.word	0x080075b4
 80012f4:	080075ac 	.word	0x080075ac
 80012f8:	20000208 	.word	0x20000208

080012fc <LCD_Display_TVOC>:
void LCD_Display_TVOC()
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af02      	add	r7, sp, #8
	lcd_clear();
 8001302:	f7ff fe6d 	bl	8000fe0 <lcd_clear>
	lcd_put_cur(0,0);
 8001306:	2100      	movs	r1, #0
 8001308:	2000      	movs	r0, #0
 800130a:	f7ff fe80 	bl	800100e <lcd_put_cur>
	lcd_send_string ("TVOC:");
 800130e:	480c      	ldr	r0, [pc, #48]	@ (8001340 <LCD_Display_TVOC+0x44>)
 8001310:	f7ff fed9 	bl	80010c6 <lcd_send_string>
	lcd_put_cur(1,0);
 8001314:	2100      	movs	r1, #0
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff fe79 	bl	800100e <lcd_put_cur>
	snprintf(Lcd_buf, sizeof(Lcd_buf), "%d %s", Tvoc_ppb, "ppb");
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <LCD_Display_TVOC+0x48>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <LCD_Display_TVOC+0x4c>)
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	4613      	mov	r3, r2
 8001328:	4a08      	ldr	r2, [pc, #32]	@ (800134c <LCD_Display_TVOC+0x50>)
 800132a:	2110      	movs	r1, #16
 800132c:	4808      	ldr	r0, [pc, #32]	@ (8001350 <LCD_Display_TVOC+0x54>)
 800132e:	f004 fcf7 	bl	8005d20 <sniprintf>
	lcd_send_string (Lcd_buf);
 8001332:	4807      	ldr	r0, [pc, #28]	@ (8001350 <LCD_Display_TVOC+0x54>)
 8001334:	f7ff fec7 	bl	80010c6 <lcd_send_string>
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	080075c0 	.word	0x080075c0
 8001344:	200001f6 	.word	0x200001f6
 8001348:	080075c8 	.word	0x080075c8
 800134c:	080075ac 	.word	0x080075ac
 8001350:	20000208 	.word	0x20000208

08001354 <Uart_Send>:
void Uart_Send()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

	sprintf((char*)Uart_TX_Buf, "CO:%d ppm\r\n",(int)CO_ppm);
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <Uart_Send+0x74>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	491b      	ldr	r1, [pc, #108]	@ (80013cc <Uart_Send+0x78>)
 8001360:	481b      	ldr	r0, [pc, #108]	@ (80013d0 <Uart_Send+0x7c>)
 8001362:	f004 fd11 	bl	8005d88 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
 8001366:	481a      	ldr	r0, [pc, #104]	@ (80013d0 <Uart_Send+0x7c>)
 8001368:	f7fe fef2 	bl	8000150 <strlen>
 800136c:	4603      	mov	r3, r0
 800136e:	b29a      	uxth	r2, r3
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	4916      	ldr	r1, [pc, #88]	@ (80013d0 <Uart_Send+0x7c>)
 8001376:	4817      	ldr	r0, [pc, #92]	@ (80013d4 <Uart_Send+0x80>)
 8001378:	f003 ff0c 	bl	8005194 <HAL_UART_Transmit>
	sprintf((char*)Uart_TX_Buf, "CO2:%d ppm\r\n",(int)CO2_ppm);
 800137c:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <Uart_Send+0x84>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4916      	ldr	r1, [pc, #88]	@ (80013dc <Uart_Send+0x88>)
 8001384:	4812      	ldr	r0, [pc, #72]	@ (80013d0 <Uart_Send+0x7c>)
 8001386:	f004 fcff 	bl	8005d88 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
 800138a:	4811      	ldr	r0, [pc, #68]	@ (80013d0 <Uart_Send+0x7c>)
 800138c:	f7fe fee0 	bl	8000150 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	490d      	ldr	r1, [pc, #52]	@ (80013d0 <Uart_Send+0x7c>)
 800139a:	480e      	ldr	r0, [pc, #56]	@ (80013d4 <Uart_Send+0x80>)
 800139c:	f003 fefa 	bl	8005194 <HAL_UART_Transmit>
	sprintf((char*)Uart_TX_Buf, "TVOC:%d ppb\r\n",(int)Tvoc_ppb);
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <Uart_Send+0x8c>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	490f      	ldr	r1, [pc, #60]	@ (80013e4 <Uart_Send+0x90>)
 80013a8:	4809      	ldr	r0, [pc, #36]	@ (80013d0 <Uart_Send+0x7c>)
 80013aa:	f004 fced 	bl	8005d88 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*) Uart_TX_Buf,strlen((char*)Uart_TX_Buf) , HAL_MAX_DELAY);
 80013ae:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <Uart_Send+0x7c>)
 80013b0:	f7fe fece 	bl	8000150 <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	4904      	ldr	r1, [pc, #16]	@ (80013d0 <Uart_Send+0x7c>)
 80013be:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <Uart_Send+0x80>)
 80013c0:	f003 fee8 	bl	8005194 <HAL_UART_Transmit>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000204 	.word	0x20000204
 80013cc:	080075cc 	.word	0x080075cc
 80013d0:	20000218 	.word	0x20000218
 80013d4:	200001ac 	.word	0x200001ac
 80013d8:	200001fe 	.word	0x200001fe
 80013dc:	080075d8 	.word	0x080075d8
 80013e0:	200001f6 	.word	0x200001f6
 80013e4:	080075e8 	.word	0x080075e8

080013e8 <ExecuteFrame>:

void ExecuteFrame(uint8_t frame) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
    switch (frame) {
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d831      	bhi.n	800145c <ExecuteFrame+0x74>
 80013f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001400 <ExecuteFrame+0x18>)
 80013fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fe:	bf00      	nop
 8001400:	08001419 	.word	0x08001419
 8001404:	0800141f 	.word	0x0800141f
 8001408:	08001439 	.word	0x08001439
 800140c:	0800143f 	.word	0x0800143f
 8001410:	08001449 	.word	0x08001449
 8001414:	0800144f 	.word	0x0800144f
        case 0:               // frame 1

            CO_measure();
 8001418:	f7ff feb6 	bl	8001188 <CO_measure>

            break;
 800141c:	e01e      	b.n	800145c <ExecuteFrame+0x74>
        case 1:               //frame 2
            Warning();
 800141e:	f000 fc6f 	bl	8001d00 <Warning>
            Log_Time_With_SysTick("CO_measure", "IN");
 8001422:	4910      	ldr	r1, [pc, #64]	@ (8001464 <ExecuteFrame+0x7c>)
 8001424:	4810      	ldr	r0, [pc, #64]	@ (8001468 <ExecuteFrame+0x80>)
 8001426:	f000 f823 	bl	8001470 <Log_Time_With_SysTick>
            LCD_Display_CO();
 800142a:	f7ff ff0f 	bl	800124c <LCD_Display_CO>
            Log_Time_With_SysTick("CO_measure", "OUT");
 800142e:	490f      	ldr	r1, [pc, #60]	@ (800146c <ExecuteFrame+0x84>)
 8001430:	480d      	ldr	r0, [pc, #52]	@ (8001468 <ExecuteFrame+0x80>)
 8001432:	f000 f81d 	bl	8001470 <Log_Time_With_SysTick>
            break;
 8001436:	e011      	b.n	800145c <ExecuteFrame+0x74>
        case 2:
        	CO2_measure();
 8001438:	f7ff fef8 	bl	800122c <CO2_measure>
            break;
 800143c:	e00e      	b.n	800145c <ExecuteFrame+0x74>
        case 3:
            Warning();
 800143e:	f000 fc5f 	bl	8001d00 <Warning>
            LCD_Display_CO2();
 8001442:	f7ff ff2f 	bl	80012a4 <LCD_Display_CO2>
            break;
 8001446:	e009      	b.n	800145c <ExecuteFrame+0x74>
        case 4:
        	TVOC_measure();;
 8001448:	f7ff fee0 	bl	800120c <TVOC_measure>
            break;
 800144c:	e006      	b.n	800145c <ExecuteFrame+0x74>
        case 5:					//frame 6
            Warning();
 800144e:	f000 fc57 	bl	8001d00 <Warning>
            LCD_Display_TVOC();
 8001452:	f7ff ff53 	bl	80012fc <LCD_Display_TVOC>
            Uart_Send();
 8001456:	f7ff ff7d 	bl	8001354 <Uart_Send>
            break;
 800145a:	bf00      	nop
    }
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	080075f8 	.word	0x080075f8
 8001468:	080075fc 	.word	0x080075fc
 800146c:	08007608 	.word	0x08007608

08001470 <Log_Time_With_SysTick>:

void Log_Time_With_SysTick(const char *task_name, const char *action) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b092      	sub	sp, #72	@ 0x48
 8001474:	af02      	add	r7, sp, #8
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
    char buffer[50];
    uint32_t tick = HAL_GetTick(); // Lấy th�?i gian hiện tại (ms) từ SysTick
 800147a:	f000 fced 	bl	8001e58 <HAL_GetTick>
 800147e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    sprintf(buffer, "%lu %s %s\r\n", tick, task_name, action);
 8001480:	f107 0008 	add.w	r0, r7, #8
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800148c:	490a      	ldr	r1, [pc, #40]	@ (80014b8 <Log_Time_With_SysTick+0x48>)
 800148e:	f004 fc7b 	bl	8005d88 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe fe5a 	bl	8000150 <strlen>
 800149c:	4603      	mov	r3, r0
 800149e:	b29a      	uxth	r2, r3
 80014a0:	f107 0108 	add.w	r1, r7, #8
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <Log_Time_With_SysTick+0x4c>)
 80014aa:	f003 fe73 	bl	8005194 <HAL_UART_Transmit>
}
 80014ae:	bf00      	nop
 80014b0:	3740      	adds	r7, #64	@ 0x40
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	0800760c 	.word	0x0800760c
 80014bc:	200001ac 	.word	0x200001ac

080014c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)  // Kiểm tra nếu ngắt từ Timer 2
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014d0:	d114      	bne.n	80014fc <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
    	ExecuteFrame(currentFrame);
 80014d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff86 	bl	80013e8 <ExecuteFrame>
    	currentFrame = (currentFrame + 1) % 6; // Cycle through 6 frames
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80014e4:	fb83 3102 	smull	r3, r1, r3, r2
 80014e8:	17d3      	asrs	r3, r2, #31
 80014ea:	1ac9      	subs	r1, r1, r3
 80014ec:	460b      	mov	r3, r1
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	440b      	add	r3, r1
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	1ad1      	subs	r1, r2, r3
 80014f6:	b2ca      	uxtb	r2, r1
 80014f8:	4b02      	ldr	r3, [pc, #8]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80014fa:	701a      	strb	r2, [r3, #0]
    }
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000240 	.word	0x20000240
 8001508:	2aaaaaab 	.word	0x2aaaaaab

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001510:	f000 fc4a 	bl	8001da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001514:	f000 f822 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001518:	f000 f98a 	bl	8001830 <MX_GPIO_Init>
  MX_ADC1_Init();
 800151c:	f000 f876 	bl	800160c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001520:	f000 f8b2 	bl	8001688 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001524:	f000 f8de 	bl	80016e4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001528:	f000 f958 	bl	80017dc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800152c:	f000 f908 	bl	8001740 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CCS811_Init();
 8001530:	f7ff fc5c 	bl	8000dec <CCS811_Init>
  CCS811_Set_Mode(CCS811_MODE_1SEC);
 8001534:	2001      	movs	r0, #1
 8001536:	f7ff fc93 	bl	8000e60 <CCS811_Set_Mode>
  CCS811_EnableInt();
 800153a:	f7ff fcdc 	bl	8000ef6 <CCS811_EnableInt>
  HAL_ADC_Start(&hadc1);
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <main+0x48>)
 8001540:	f000 fd90 	bl	8002064 <HAL_ADC_Start>
  lcd_init();
 8001544:	f7ff fd82 	bl	800104c <lcd_init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001548:	4803      	ldr	r0, [pc, #12]	@ (8001558 <main+0x4c>)
 800154a:	f003 fa31 	bl	80049b0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800154e:	bf00      	nop
 8001550:	e7fd      	b.n	800154e <main+0x42>
 8001552:	bf00      	nop
 8001554:	2000008c 	.word	0x2000008c
 8001558:	20000164 	.word	0x20000164

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b094      	sub	sp, #80	@ 0x50
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001566:	2228      	movs	r2, #40	@ 0x28
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f004 fc2c 	bl	8005dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800158c:	2301      	movs	r3, #1
 800158e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800159a:	2301      	movs	r3, #1
 800159c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159e:	2302      	movs	r3, #2
 80015a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80015a8:	2300      	movs	r3, #0
 80015aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 fce7 	bl	8003f84 <HAL_RCC_OscConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80015bc:	f000 f984 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c0:	230f      	movs	r3, #15
 80015c2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 ff54 	bl	8004488 <HAL_RCC_ClockConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80015e6:	f000 f96f 	bl	80018c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015ea:	2302      	movs	r3, #2
 80015ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 f8d5 	bl	80047a4 <HAL_RCCEx_PeriphCLKConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001600:	f000 f962 	bl	80018c8 <Error_Handler>
  }
}
 8001604:	bf00      	nop
 8001606:	3750      	adds	r7, #80	@ 0x50
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800161c:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <MX_ADC1_Init+0x74>)
 800161e:	4a19      	ldr	r2, [pc, #100]	@ (8001684 <MX_ADC1_Init+0x78>)
 8001620:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <MX_ADC1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <MX_ADC1_Init+0x74>)
 800162a:	2201      	movs	r2, #1
 800162c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800162e:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <MX_ADC1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <MX_ADC1_Init+0x74>)
 8001636:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800163a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800163c:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <MX_ADC1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <MX_ADC1_Init+0x74>)
 8001644:	2201      	movs	r2, #1
 8001646:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001648:	480d      	ldr	r0, [pc, #52]	@ (8001680 <MX_ADC1_Init+0x74>)
 800164a:	f000 fc33 	bl	8001eb4 <HAL_ADC_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001654:	f000 f938 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001658:	2300      	movs	r3, #0
 800165a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800165c:	2301      	movs	r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_ADC1_Init+0x74>)
 800166a:	f000 fdb5 	bl	80021d8 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001674:	f000 f928 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	2000008c 	.word	0x2000008c
 8001684:	40012400 	.word	0x40012400

08001688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <MX_I2C1_Init+0x50>)
 800168e:	4a13      	ldr	r2, [pc, #76]	@ (80016dc <MX_I2C1_Init+0x54>)
 8001690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <MX_I2C1_Init+0x50>)
 8001694:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <MX_I2C1_Init+0x58>)
 8001696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001698:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <MX_I2C1_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <MX_I2C1_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_I2C1_Init+0x50>)
 80016a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <MX_I2C1_Init+0x50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_I2C1_Init+0x50>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b8:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <MX_I2C1_Init+0x50>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MX_I2C1_Init+0x50>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016c4:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <MX_I2C1_Init+0x50>)
 80016c6:	f001 fa77 	bl	8002bb8 <HAL_I2C_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016d0:	f000 f8fa 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200000bc 	.word	0x200000bc
 80016dc:	40005400 	.word	0x40005400
 80016e0:	000186a0 	.word	0x000186a0

080016e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <MX_I2C2_Init+0x50>)
 80016ea:	4a13      	ldr	r2, [pc, #76]	@ (8001738 <MX_I2C2_Init+0x54>)
 80016ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <MX_I2C2_Init+0x50>)
 80016f0:	4a12      	ldr	r2, [pc, #72]	@ (800173c <MX_I2C2_Init+0x58>)
 80016f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <MX_I2C2_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <MX_I2C2_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <MX_I2C2_Init+0x50>)
 8001702:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001706:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001708:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <MX_I2C2_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <MX_I2C2_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001714:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <MX_I2C2_Init+0x50>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <MX_I2C2_Init+0x50>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	@ (8001734 <MX_I2C2_Init+0x50>)
 8001722:	f001 fa49 	bl	8002bb8 <HAL_I2C_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800172c:	f000 f8cc 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000110 	.word	0x20000110
 8001738:	40005800 	.word	0x40005800
 800173c:	000186a0 	.word	0x000186a0

08001740 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	463b      	mov	r3, r7
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800175c:	4b1e      	ldr	r3, [pc, #120]	@ (80017d8 <MX_TIM2_Init+0x98>)
 800175e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001762:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 8001764:	4b1c      	ldr	r3, [pc, #112]	@ (80017d8 <MX_TIM2_Init+0x98>)
 8001766:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800176a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <MX_TIM2_Init+0x98>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 8001772:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <MX_TIM2_Init+0x98>)
 8001774:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001778:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177a:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <MX_TIM2_Init+0x98>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <MX_TIM2_Init+0x98>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001786:	4814      	ldr	r0, [pc, #80]	@ (80017d8 <MX_TIM2_Init+0x98>)
 8001788:	f003 f8c2 	bl	8004910 <HAL_TIM_Base_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001792:	f000 f899 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001796:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800179a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800179c:	f107 0308 	add.w	r3, r7, #8
 80017a0:	4619      	mov	r1, r3
 80017a2:	480d      	ldr	r0, [pc, #52]	@ (80017d8 <MX_TIM2_Init+0x98>)
 80017a4:	f003 fa46 	bl	8004c34 <HAL_TIM_ConfigClockSource>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017ae:	f000 f88b 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	4619      	mov	r1, r3
 80017be:	4806      	ldr	r0, [pc, #24]	@ (80017d8 <MX_TIM2_Init+0x98>)
 80017c0:	f003 fc28 	bl	8005014 <HAL_TIMEx_MasterConfigSynchronization>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017ca:	f000 f87d 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000164 	.word	0x20000164

080017dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <MX_USART1_UART_Init+0x4c>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	@ (800182c <MX_USART1_UART_Init+0x50>)
 80017e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <MX_USART1_UART_Init+0x4c>)
 80017e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <MX_USART1_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <MX_USART1_UART_Init+0x4c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <MX_USART1_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001800:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <MX_USART1_UART_Init+0x4c>)
 8001802:	220c      	movs	r2, #12
 8001804:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001806:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <MX_USART1_UART_Init+0x4c>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <MX_USART1_UART_Init+0x4c>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_USART1_UART_Init+0x4c>)
 8001814:	f003 fc6e 	bl	80050f4 <HAL_UART_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800181e:	f000 f853 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200001ac 	.word	0x200001ac
 800182c:	40013800 	.word	0x40013800

08001830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001844:	4b1e      	ldr	r3, [pc, #120]	@ (80018c0 <MX_GPIO_Init+0x90>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4a1d      	ldr	r2, [pc, #116]	@ (80018c0 <MX_GPIO_Init+0x90>)
 800184a:	f043 0320 	orr.w	r3, r3, #32
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <MX_GPIO_Init+0x90>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0320 	and.w	r3, r3, #32
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <MX_GPIO_Init+0x90>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a17      	ldr	r2, [pc, #92]	@ (80018c0 <MX_GPIO_Init+0x90>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <MX_GPIO_Init+0x90>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001874:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <MX_GPIO_Init+0x90>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a11      	ldr	r2, [pc, #68]	@ (80018c0 <MX_GPIO_Init+0x90>)
 800187a:	f043 0308 	orr.w	r3, r3, #8
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <MX_GPIO_Init+0x90>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L1_LED_Pin|L2_LED_Pin|L3_LED_Pin, GPIO_PIN_SET);
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8001892:	480c      	ldr	r0, [pc, #48]	@ (80018c4 <MX_GPIO_Init+0x94>)
 8001894:	f001 f978 	bl	8002b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L1_LED_Pin L2_LED_Pin L3_LED_Pin */
  GPIO_InitStruct.Pin = L1_LED_Pin|L2_LED_Pin|L3_LED_Pin;
 8001898:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800189c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	4619      	mov	r1, r3
 80018b0:	4804      	ldr	r0, [pc, #16]	@ (80018c4 <MX_GPIO_Init+0x94>)
 80018b2:	f000 ffe5 	bl	8002880 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b6:	bf00      	nop
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40010c00 	.word	0x40010c00

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <Error_Handler+0x8>

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <HAL_MspInit+0x5c>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	4a14      	ldr	r2, [pc, #80]	@ (8001930 <HAL_MspInit+0x5c>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6193      	str	r3, [r2, #24]
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_MspInit+0x5c>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_MspInit+0x5c>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001930 <HAL_MspInit+0x5c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <HAL_MspInit+0x5c>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_MspInit+0x60>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_MspInit+0x60>)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000

08001938 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a14      	ldr	r2, [pc, #80]	@ (80019a4 <HAL_ADC_MspInit+0x6c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d121      	bne.n	800199c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001958:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <HAL_ADC_MspInit+0x70>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <HAL_ADC_MspInit+0x70>)
 800195e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <HAL_ADC_MspInit+0x70>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <HAL_ADC_MspInit+0x70>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a0c      	ldr	r2, [pc, #48]	@ (80019a8 <HAL_ADC_MspInit+0x70>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <HAL_ADC_MspInit+0x70>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001988:	2301      	movs	r3, #1
 800198a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198c:	2303      	movs	r3, #3
 800198e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4619      	mov	r1, r3
 8001996:	4805      	ldr	r0, [pc, #20]	@ (80019ac <HAL_ADC_MspInit+0x74>)
 8001998:	f000 ff72 	bl	8002880 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800199c:	bf00      	nop
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40012400 	.word	0x40012400
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010800 	.word	0x40010800

080019b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0318 	add.w	r3, r7, #24
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001a78 <HAL_I2C_MspInit+0xc8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d124      	bne.n	8001a1a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a7c <HAL_I2C_MspInit+0xcc>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a29      	ldr	r2, [pc, #164]	@ (8001a7c <HAL_I2C_MspInit+0xcc>)
 80019d6:	f043 0308 	orr.w	r3, r3, #8
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b27      	ldr	r3, [pc, #156]	@ (8001a7c <HAL_I2C_MspInit+0xcc>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019e8:	23c0      	movs	r3, #192	@ 0xc0
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ec:	2312      	movs	r3, #18
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	4619      	mov	r1, r3
 80019fa:	4821      	ldr	r0, [pc, #132]	@ (8001a80 <HAL_I2C_MspInit+0xd0>)
 80019fc:	f000 ff40 	bl	8002880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a00:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <HAL_I2C_MspInit+0xcc>)
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	4a1d      	ldr	r2, [pc, #116]	@ (8001a7c <HAL_I2C_MspInit+0xcc>)
 8001a06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a0a:	61d3      	str	r3, [r2, #28]
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <HAL_I2C_MspInit+0xcc>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a18:	e029      	b.n	8001a6e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a19      	ldr	r2, [pc, #100]	@ (8001a84 <HAL_I2C_MspInit+0xd4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d124      	bne.n	8001a6e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a24:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_I2C_MspInit+0xcc>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a14      	ldr	r2, [pc, #80]	@ (8001a7c <HAL_I2C_MspInit+0xcc>)
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <HAL_I2C_MspInit+0xcc>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a3c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a42:	2312      	movs	r3, #18
 8001a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4a:	f107 0318 	add.w	r3, r7, #24
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480b      	ldr	r0, [pc, #44]	@ (8001a80 <HAL_I2C_MspInit+0xd0>)
 8001a52:	f000 ff15 	bl	8002880 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_I2C_MspInit+0xcc>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a08      	ldr	r2, [pc, #32]	@ (8001a7c <HAL_I2C_MspInit+0xcc>)
 8001a5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a60:	61d3      	str	r3, [r2, #28]
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_I2C_MspInit+0xcc>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
}
 8001a6e:	bf00      	nop
 8001a70:	3728      	adds	r7, #40	@ 0x28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40005400 	.word	0x40005400
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	40005800 	.word	0x40005800

08001a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a98:	d113      	bne.n	8001ac2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <HAL_TIM_Base_MspInit+0x44>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001acc <HAL_TIM_Base_MspInit+0x44>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	61d3      	str	r3, [r2, #28]
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <HAL_TIM_Base_MspInit+0x44>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	201c      	movs	r0, #28
 8001ab8:	f000 fdf9 	bl	80026ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001abc:	201c      	movs	r0, #28
 8001abe:	f000 fe12 	bl	80026e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a20      	ldr	r2, [pc, #128]	@ (8001b6c <HAL_UART_MspInit+0x9c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d139      	bne.n	8001b64 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001af0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <HAL_UART_MspInit+0xa0>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a1e      	ldr	r2, [pc, #120]	@ (8001b70 <HAL_UART_MspInit+0xa0>)
 8001af6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <HAL_UART_MspInit+0xa0>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b08:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <HAL_UART_MspInit+0xa0>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a18      	ldr	r2, [pc, #96]	@ (8001b70 <HAL_UART_MspInit+0xa0>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <HAL_UART_MspInit+0xa0>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	4619      	mov	r1, r3
 8001b34:	480f      	ldr	r0, [pc, #60]	@ (8001b74 <HAL_UART_MspInit+0xa4>)
 8001b36:	f000 fea3 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4809      	ldr	r0, [pc, #36]	@ (8001b74 <HAL_UART_MspInit+0xa4>)
 8001b50:	f000 fe96 	bl	8002880 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2025      	movs	r0, #37	@ 0x25
 8001b5a:	f000 fda8 	bl	80026ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b5e:	2025      	movs	r0, #37	@ 0x25
 8001b60:	f000 fdc1 	bl	80026e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b64:	bf00      	nop
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010800 	.word	0x40010800

08001b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <NMI_Handler+0x4>

08001b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <MemManage_Handler+0x4>

08001b90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <UsageFault_Handler+0x4>

08001ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc8:	f000 f934 	bl	8001e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <TIM2_IRQHandler+0x10>)
 8001bd6:	f002 ff3d 	bl	8004a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000164 	.word	0x20000164

08001be4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <USART1_IRQHandler+0x10>)
 8001bea:	f003 fb5f 	bl	80052ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200001ac 	.word	0x200001ac

08001bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c00:	4a14      	ldr	r2, [pc, #80]	@ (8001c54 <_sbrk+0x5c>)
 8001c02:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <_sbrk+0x60>)
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c0c:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <_sbrk+0x64>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	@ (8001c60 <_sbrk+0x68>)
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d207      	bcs.n	8001c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c28:	f004 f8d6 	bl	8005dd8 <__errno>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	220c      	movs	r2, #12
 8001c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	e009      	b.n	8001c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	4a05      	ldr	r2, [pc, #20]	@ (8001c5c <_sbrk+0x64>)
 8001c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20005000 	.word	0x20005000
 8001c58:	00000400 	.word	0x00000400
 8001c5c:	20000244 	.word	0x20000244
 8001c60:	20000398 	.word	0x20000398

08001c64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <L1_Warning_On>:
 */

#include "warning.h"

void L1_Warning_On()
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c7a:	4808      	ldr	r0, [pc, #32]	@ (8001c9c <L1_Warning_On+0x2c>)
 8001c7c:	f000 ff84 	bl	8002b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 8001c80:	2201      	movs	r2, #1
 8001c82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c86:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <L1_Warning_On+0x2c>)
 8001c88:	f000 ff7e 	bl	8002b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c92:	4802      	ldr	r0, [pc, #8]	@ (8001c9c <L1_Warning_On+0x2c>)
 8001c94:	f000 ff78 	bl	8002b88 <HAL_GPIO_WritePin>
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40010c00 	.word	0x40010c00

08001ca0 <L2_Warning_On>:

void L2_Warning_On ()
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001caa:	4808      	ldr	r0, [pc, #32]	@ (8001ccc <L2_Warning_On+0x2c>)
 8001cac:	f000 ff6c 	bl	8002b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cb6:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <L2_Warning_On+0x2c>)
 8001cb8:	f000 ff66 	bl	8002b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cc2:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <L2_Warning_On+0x2c>)
 8001cc4:	f000 ff60 	bl	8002b88 <HAL_GPIO_WritePin>
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40010c00 	.word	0x40010c00

08001cd0 <L3_Warning_On>:

void L3_Warning_On ()
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cda:	4808      	ldr	r0, [pc, #32]	@ (8001cfc <L3_Warning_On+0x2c>)
 8001cdc:	f000 ff54 	bl	8002b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ce6:	4805      	ldr	r0, [pc, #20]	@ (8001cfc <L3_Warning_On+0x2c>)
 8001ce8:	f000 ff4e 	bl	8002b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cf2:	4802      	ldr	r0, [pc, #8]	@ (8001cfc <L3_Warning_On+0x2c>)
 8001cf4:	f000 ff48 	bl	8002b88 <HAL_GPIO_WritePin>
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40010c00 	.word	0x40010c00

08001d00 <Warning>:



void Warning ()
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	  // khi không ấn nút( cảnh báo tự đông)
	  if(CO2_ppm<=1000 && CO_ppm <= 25 && Tvoc_ppb <=100)
 8001d04:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <Warning+0x50>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d0c:	d80a      	bhi.n	8001d24 <Warning+0x24>
 8001d0e:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <Warning+0x54>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	2b19      	cmp	r3, #25
 8001d14:	d806      	bhi.n	8001d24 <Warning+0x24>
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <Warning+0x58>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	2b64      	cmp	r3, #100	@ 0x64
 8001d1c:	d802      	bhi.n	8001d24 <Warning+0x24>
	  {
		  L1_Warning_On();
 8001d1e:	f7ff ffa7 	bl	8001c70 <L1_Warning_On>
 8001d22:	e013      	b.n	8001d4c <Warning+0x4c>
	  }
	  else if((CO2_ppm>=2000) || (CO_ppm>=50) || (Tvoc_ppb>=300))
 8001d24:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <Warning+0x50>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d2c:	d208      	bcs.n	8001d40 <Warning+0x40>
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <Warning+0x54>)
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	2b31      	cmp	r3, #49	@ 0x31
 8001d34:	d804      	bhi.n	8001d40 <Warning+0x40>
 8001d36:	4b08      	ldr	r3, [pc, #32]	@ (8001d58 <Warning+0x58>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001d3e:	d302      	bcc.n	8001d46 <Warning+0x46>
	  {
		  L3_Warning_On();
 8001d40:	f7ff ffc6 	bl	8001cd0 <L3_Warning_On>
 8001d44:	e002      	b.n	8001d4c <Warning+0x4c>
	  }
	  else
	  {
		  L2_Warning_On();
 8001d46:	f7ff ffab 	bl	8001ca0 <L2_Warning_On>
	  }
}
 8001d4a:	bf00      	nop
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200001fe 	.word	0x200001fe
 8001d54:	20000204 	.word	0x20000204
 8001d58:	200001f6 	.word	0x200001f6

08001d5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d5c:	f7ff ff82 	bl	8001c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d60:	480b      	ldr	r0, [pc, #44]	@ (8001d90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d62:	490c      	ldr	r1, [pc, #48]	@ (8001d94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d64:	4a0c      	ldr	r2, [pc, #48]	@ (8001d98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d68:	e002      	b.n	8001d70 <LoopCopyDataInit>

08001d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6e:	3304      	adds	r3, #4

08001d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d74:	d3f9      	bcc.n	8001d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d76:	4a09      	ldr	r2, [pc, #36]	@ (8001d9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d78:	4c09      	ldr	r4, [pc, #36]	@ (8001da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d7c:	e001      	b.n	8001d82 <LoopFillZerobss>

08001d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d80:	3204      	adds	r2, #4

08001d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d84:	d3fb      	bcc.n	8001d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d86:	f004 f82d 	bl	8005de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d8a:	f7ff fbbf 	bl	800150c <main>
  bx lr
 8001d8e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d98:	080076b8 	.word	0x080076b8
  ldr r2, =_sbss
 8001d9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001da0:	20000394 	.word	0x20000394

08001da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001da4:	e7fe      	b.n	8001da4 <ADC1_2_IRQHandler>
	...

08001da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dac:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <HAL_Init+0x28>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a07      	ldr	r2, [pc, #28]	@ (8001dd0 <HAL_Init+0x28>)
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db8:	2003      	movs	r0, #3
 8001dba:	f000 fc6d 	bl	8002698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dbe:	200f      	movs	r0, #15
 8001dc0:	f000 f808 	bl	8001dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc4:	f7ff fd86 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40022000 	.word	0x40022000

08001dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ddc:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <HAL_InitTick+0x54>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <HAL_InitTick+0x58>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fc85 	bl	8002702 <HAL_SYSTICK_Config>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00e      	b.n	8001e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b0f      	cmp	r3, #15
 8001e06:	d80a      	bhi.n	8001e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f000 fc4d 	bl	80026ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e14:	4a06      	ldr	r2, [pc, #24]	@ (8001e30 <HAL_InitTick+0x5c>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000008 	.word	0x20000008
 8001e30:	20000004 	.word	0x20000004

08001e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <HAL_IncTick+0x1c>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b05      	ldr	r3, [pc, #20]	@ (8001e54 <HAL_IncTick+0x20>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	4a03      	ldr	r2, [pc, #12]	@ (8001e54 <HAL_IncTick+0x20>)
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	20000008 	.word	0x20000008
 8001e54:	20000248 	.word	0x20000248

08001e58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e5c:	4b02      	ldr	r3, [pc, #8]	@ (8001e68 <HAL_GetTick+0x10>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	20000248 	.word	0x20000248

08001e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff fff0 	bl	8001e58 <HAL_GetTick>
 8001e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e84:	d005      	beq.n	8001e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e86:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <HAL_Delay+0x44>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4413      	add	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e92:	bf00      	nop
 8001e94:	f7ff ffe0 	bl	8001e58 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d8f7      	bhi.n	8001e94 <HAL_Delay+0x28>
  {
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000008 	.word	0x20000008

08001eb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0be      	b.n	8002054 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff fd20 	bl	8001938 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fabf 	bl	800247c <ADC_ConversionStop_Disable>
 8001efe:	4603      	mov	r3, r0
 8001f00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f040 8099 	bne.w	8002042 <HAL_ADC_Init+0x18e>
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 8095 	bne.w	8002042 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f20:	f023 0302 	bic.w	r3, r3, #2
 8001f24:	f043 0202 	orr.w	r2, r3, #2
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	7b1b      	ldrb	r3, [r3, #12]
 8001f3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f4c:	d003      	beq.n	8001f56 <HAL_ADC_Init+0xa2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d102      	bne.n	8001f5c <HAL_ADC_Init+0xa8>
 8001f56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f5a:	e000      	b.n	8001f5e <HAL_ADC_Init+0xaa>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7d1b      	ldrb	r3, [r3, #20]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d119      	bne.n	8001fa0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7b1b      	ldrb	r3, [r3, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	035a      	lsls	r2, r3, #13
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	e00b      	b.n	8001fa0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8c:	f043 0220 	orr.w	r2, r3, #32
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f98:	f043 0201 	orr.w	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	4b28      	ldr	r3, [pc, #160]	@ (800205c <HAL_ADC_Init+0x1a8>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	68b9      	ldr	r1, [r7, #8]
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fd0:	d003      	beq.n	8001fda <HAL_ADC_Init+0x126>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d104      	bne.n	8001fe4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	051b      	lsls	r3, r3, #20
 8001fe2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fea:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	4b18      	ldr	r3, [pc, #96]	@ (8002060 <HAL_ADC_Init+0x1ac>)
 8002000:	4013      	ands	r3, r2
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	429a      	cmp	r2, r3
 8002006:	d10b      	bne.n	8002020 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002012:	f023 0303 	bic.w	r3, r3, #3
 8002016:	f043 0201 	orr.w	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800201e:	e018      	b.n	8002052 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002024:	f023 0312 	bic.w	r3, r3, #18
 8002028:	f043 0210 	orr.w	r2, r3, #16
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002040:	e007      	b.n	8002052 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002046:	f043 0210 	orr.w	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002052:	7dfb      	ldrb	r3, [r7, #23]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	ffe1f7fd 	.word	0xffe1f7fd
 8002060:	ff1f0efe 	.word	0xff1f0efe

08002064 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_ADC_Start+0x1a>
 800207a:	2302      	movs	r3, #2
 800207c:	e098      	b.n	80021b0 <HAL_ADC_Start+0x14c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f99e 	bl	80023c8 <ADC_Enable>
 800208c:	4603      	mov	r3, r0
 800208e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 8087 	bne.w	80021a6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020a0:	f023 0301 	bic.w	r3, r3, #1
 80020a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a41      	ldr	r2, [pc, #260]	@ (80021b8 <HAL_ADC_Start+0x154>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d105      	bne.n	80020c2 <HAL_ADC_Start+0x5e>
 80020b6:	4b41      	ldr	r3, [pc, #260]	@ (80021bc <HAL_ADC_Start+0x158>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d115      	bne.n	80020ee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d026      	beq.n	800212a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020ec:	e01d      	b.n	800212a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a2f      	ldr	r2, [pc, #188]	@ (80021bc <HAL_ADC_Start+0x158>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d004      	beq.n	800210e <HAL_ADC_Start+0xaa>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a2b      	ldr	r2, [pc, #172]	@ (80021b8 <HAL_ADC_Start+0x154>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10d      	bne.n	800212a <HAL_ADC_Start+0xc6>
 800210e:	4b2b      	ldr	r3, [pc, #172]	@ (80021bc <HAL_ADC_Start+0x158>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002116:	2b00      	cmp	r3, #0
 8002118:	d007      	beq.n	800212a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002122:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d006      	beq.n	8002144 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213a:	f023 0206 	bic.w	r2, r3, #6
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002142:	e002      	b.n	800214a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f06f 0202 	mvn.w	r2, #2
 800215a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002166:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800216a:	d113      	bne.n	8002194 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002170:	4a11      	ldr	r2, [pc, #68]	@ (80021b8 <HAL_ADC_Start+0x154>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d105      	bne.n	8002182 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002176:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <HAL_ADC_Start+0x158>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800217e:	2b00      	cmp	r3, #0
 8002180:	d108      	bne.n	8002194 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	e00c      	b.n	80021ae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	e003      	b.n	80021ae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40012800 	.word	0x40012800
 80021bc:	40012400 	.word	0x40012400

080021c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x20>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e0dc      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x1da>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b06      	cmp	r3, #6
 8002206:	d81c      	bhi.n	8002242 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	3b05      	subs	r3, #5
 800221a:	221f      	movs	r2, #31
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	4019      	ands	r1, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	3b05      	subs	r3, #5
 8002234:	fa00 f203 	lsl.w	r2, r0, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002240:	e03c      	b.n	80022bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b0c      	cmp	r3, #12
 8002248:	d81c      	bhi.n	8002284 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	3b23      	subs	r3, #35	@ 0x23
 800225c:	221f      	movs	r2, #31
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	4019      	ands	r1, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	3b23      	subs	r3, #35	@ 0x23
 8002276:	fa00 f203 	lsl.w	r2, r0, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	631a      	str	r2, [r3, #48]	@ 0x30
 8002282:	e01b      	b.n	80022bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	3b41      	subs	r3, #65	@ 0x41
 8002296:	221f      	movs	r2, #31
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	4019      	ands	r1, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	3b41      	subs	r3, #65	@ 0x41
 80022b0:	fa00 f203 	lsl.w	r2, r0, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b09      	cmp	r3, #9
 80022c2:	d91c      	bls.n	80022fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68d9      	ldr	r1, [r3, #12]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	3b1e      	subs	r3, #30
 80022d6:	2207      	movs	r2, #7
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	4019      	ands	r1, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6898      	ldr	r0, [r3, #8]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	3b1e      	subs	r3, #30
 80022f0:	fa00 f203 	lsl.w	r2, r0, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	60da      	str	r2, [r3, #12]
 80022fc:	e019      	b.n	8002332 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6919      	ldr	r1, [r3, #16]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4413      	add	r3, r2
 800230e:	2207      	movs	r2, #7
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	4019      	ands	r1, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6898      	ldr	r0, [r3, #8]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	fa00 f203 	lsl.w	r2, r0, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b10      	cmp	r3, #16
 8002338:	d003      	beq.n	8002342 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800233e:	2b11      	cmp	r3, #17
 8002340:	d132      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1d      	ldr	r2, [pc, #116]	@ (80023bc <HAL_ADC_ConfigChannel+0x1e4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d125      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d126      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002368:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b10      	cmp	r3, #16
 8002370:	d11a      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002372:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a13      	ldr	r2, [pc, #76]	@ (80023c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	0c9a      	lsrs	r2, r3, #18
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002388:	e002      	b.n	8002390 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	3b01      	subs	r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f9      	bne.n	800238a <HAL_ADC_ConfigChannel+0x1b2>
 8002396:	e007      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239c:	f043 0220 	orr.w	r2, r3, #32
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	40012400 	.word	0x40012400
 80023c0:	20000000 	.word	0x20000000
 80023c4:	431bde83 	.word	0x431bde83

080023c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d040      	beq.n	8002468 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0201 	orr.w	r2, r2, #1
 80023f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002474 <ADC_Enable+0xac>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002478 <ADC_Enable+0xb0>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	0c9b      	lsrs	r3, r3, #18
 8002402:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002404:	e002      	b.n	800240c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3b01      	subs	r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f9      	bne.n	8002406 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002412:	f7ff fd21 	bl	8001e58 <HAL_GetTick>
 8002416:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002418:	e01f      	b.n	800245a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800241a:	f7ff fd1d 	bl	8001e58 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d918      	bls.n	800245a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	d011      	beq.n	800245a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243a:	f043 0210 	orr.w	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e007      	b.n	800246a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	d1d8      	bne.n	800241a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000000 	.word	0x20000000
 8002478:	431bde83 	.word	0x431bde83

0800247c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b01      	cmp	r3, #1
 8002494:	d12e      	bne.n	80024f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0201 	bic.w	r2, r2, #1
 80024a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024a6:	f7ff fcd7 	bl	8001e58 <HAL_GetTick>
 80024aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024ac:	e01b      	b.n	80024e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024ae:	f7ff fcd3 	bl	8001e58 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d914      	bls.n	80024e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d10d      	bne.n	80024e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ce:	f043 0210 	orr.w	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024da:	f043 0201 	orr.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e007      	b.n	80024f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d0dc      	beq.n	80024ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002510:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800251c:	4013      	ands	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800252c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002532:	4a04      	ldr	r2, [pc, #16]	@ (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	60d3      	str	r3, [r2, #12]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800254c:	4b04      	ldr	r3, [pc, #16]	@ (8002560 <__NVIC_GetPriorityGrouping+0x18>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	f003 0307 	and.w	r3, r3, #7
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	2b00      	cmp	r3, #0
 8002574:	db0b      	blt.n	800258e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4906      	ldr	r1, [pc, #24]	@ (8002598 <__NVIC_EnableIRQ+0x34>)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	2001      	movs	r0, #1
 8002586:	fa00 f202 	lsl.w	r2, r0, r2
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100

0800259c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	6039      	str	r1, [r7, #0]
 80025a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	db0a      	blt.n	80025c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	490c      	ldr	r1, [pc, #48]	@ (80025e8 <__NVIC_SetPriority+0x4c>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	0112      	lsls	r2, r2, #4
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	440b      	add	r3, r1
 80025c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c4:	e00a      	b.n	80025dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4908      	ldr	r1, [pc, #32]	@ (80025ec <__NVIC_SetPriority+0x50>)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	3b04      	subs	r3, #4
 80025d4:	0112      	lsls	r2, r2, #4
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	440b      	add	r3, r1
 80025da:	761a      	strb	r2, [r3, #24]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	@ 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f1c3 0307 	rsb	r3, r3, #7
 800260a:	2b04      	cmp	r3, #4
 800260c:	bf28      	it	cs
 800260e:	2304      	movcs	r3, #4
 8002610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3304      	adds	r3, #4
 8002616:	2b06      	cmp	r3, #6
 8002618:	d902      	bls.n	8002620 <NVIC_EncodePriority+0x30>
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3b03      	subs	r3, #3
 800261e:	e000      	b.n	8002622 <NVIC_EncodePriority+0x32>
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	f04f 32ff 	mov.w	r2, #4294967295
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43da      	mvns	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	401a      	ands	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002638:	f04f 31ff 	mov.w	r1, #4294967295
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	43d9      	mvns	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	4313      	orrs	r3, r2
         );
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	@ 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3b01      	subs	r3, #1
 8002660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002664:	d301      	bcc.n	800266a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002666:	2301      	movs	r3, #1
 8002668:	e00f      	b.n	800268a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800266a:	4a0a      	ldr	r2, [pc, #40]	@ (8002694 <SysTick_Config+0x40>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002672:	210f      	movs	r1, #15
 8002674:	f04f 30ff 	mov.w	r0, #4294967295
 8002678:	f7ff ff90 	bl	800259c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800267c:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <SysTick_Config+0x40>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002682:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <SysTick_Config+0x40>)
 8002684:	2207      	movs	r2, #7
 8002686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	e000e010 	.word	0xe000e010

08002698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff ff2d 	bl	8002500 <__NVIC_SetPriorityGrouping>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b086      	sub	sp, #24
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c0:	f7ff ff42 	bl	8002548 <__NVIC_GetPriorityGrouping>
 80026c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	6978      	ldr	r0, [r7, #20]
 80026cc:	f7ff ff90 	bl	80025f0 <NVIC_EncodePriority>
 80026d0:	4602      	mov	r2, r0
 80026d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff5f 	bl	800259c <__NVIC_SetPriority>
}
 80026de:	bf00      	nop
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	4603      	mov	r3, r0
 80026ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff35 	bl	8002564 <__NVIC_EnableIRQ>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff ffa2 	bl	8002654 <SysTick_Config>
 8002710:	4603      	mov	r3, r0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d008      	beq.n	8002744 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2204      	movs	r2, #4
 8002736:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e020      	b.n	8002786 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 020e 	bic.w	r2, r2, #14
 8002752:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f202 	lsl.w	r2, r1, r2
 8002772:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002784:	7bfb      	ldrb	r3, [r7, #15]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d005      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2204      	movs	r2, #4
 80027ac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
 80027b2:	e051      	b.n	8002858 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 020e 	bic.w	r2, r2, #14
 80027c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a22      	ldr	r2, [pc, #136]	@ (8002864 <HAL_DMA_Abort_IT+0xd4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d029      	beq.n	8002832 <HAL_DMA_Abort_IT+0xa2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a21      	ldr	r2, [pc, #132]	@ (8002868 <HAL_DMA_Abort_IT+0xd8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d022      	beq.n	800282e <HAL_DMA_Abort_IT+0x9e>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1f      	ldr	r2, [pc, #124]	@ (800286c <HAL_DMA_Abort_IT+0xdc>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d01a      	beq.n	8002828 <HAL_DMA_Abort_IT+0x98>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002870 <HAL_DMA_Abort_IT+0xe0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d012      	beq.n	8002822 <HAL_DMA_Abort_IT+0x92>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1c      	ldr	r2, [pc, #112]	@ (8002874 <HAL_DMA_Abort_IT+0xe4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00a      	beq.n	800281c <HAL_DMA_Abort_IT+0x8c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1b      	ldr	r2, [pc, #108]	@ (8002878 <HAL_DMA_Abort_IT+0xe8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d102      	bne.n	8002816 <HAL_DMA_Abort_IT+0x86>
 8002810:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002814:	e00e      	b.n	8002834 <HAL_DMA_Abort_IT+0xa4>
 8002816:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800281a:	e00b      	b.n	8002834 <HAL_DMA_Abort_IT+0xa4>
 800281c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002820:	e008      	b.n	8002834 <HAL_DMA_Abort_IT+0xa4>
 8002822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002826:	e005      	b.n	8002834 <HAL_DMA_Abort_IT+0xa4>
 8002828:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800282c:	e002      	b.n	8002834 <HAL_DMA_Abort_IT+0xa4>
 800282e:	2310      	movs	r3, #16
 8002830:	e000      	b.n	8002834 <HAL_DMA_Abort_IT+0xa4>
 8002832:	2301      	movs	r3, #1
 8002834:	4a11      	ldr	r2, [pc, #68]	@ (800287c <HAL_DMA_Abort_IT+0xec>)
 8002836:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
    } 
  }
  return status;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40020008 	.word	0x40020008
 8002868:	4002001c 	.word	0x4002001c
 800286c:	40020030 	.word	0x40020030
 8002870:	40020044 	.word	0x40020044
 8002874:	40020058 	.word	0x40020058
 8002878:	4002006c 	.word	0x4002006c
 800287c:	40020000 	.word	0x40020000

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b08b      	sub	sp, #44	@ 0x2c
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002892:	e169      	b.n	8002b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002894:	2201      	movs	r2, #1
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	f040 8158 	bne.w	8002b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4a9a      	ldr	r2, [pc, #616]	@ (8002b20 <HAL_GPIO_Init+0x2a0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d05e      	beq.n	800297a <HAL_GPIO_Init+0xfa>
 80028bc:	4a98      	ldr	r2, [pc, #608]	@ (8002b20 <HAL_GPIO_Init+0x2a0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d875      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028c2:	4a98      	ldr	r2, [pc, #608]	@ (8002b24 <HAL_GPIO_Init+0x2a4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d058      	beq.n	800297a <HAL_GPIO_Init+0xfa>
 80028c8:	4a96      	ldr	r2, [pc, #600]	@ (8002b24 <HAL_GPIO_Init+0x2a4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d86f      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028ce:	4a96      	ldr	r2, [pc, #600]	@ (8002b28 <HAL_GPIO_Init+0x2a8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d052      	beq.n	800297a <HAL_GPIO_Init+0xfa>
 80028d4:	4a94      	ldr	r2, [pc, #592]	@ (8002b28 <HAL_GPIO_Init+0x2a8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d869      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028da:	4a94      	ldr	r2, [pc, #592]	@ (8002b2c <HAL_GPIO_Init+0x2ac>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d04c      	beq.n	800297a <HAL_GPIO_Init+0xfa>
 80028e0:	4a92      	ldr	r2, [pc, #584]	@ (8002b2c <HAL_GPIO_Init+0x2ac>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d863      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028e6:	4a92      	ldr	r2, [pc, #584]	@ (8002b30 <HAL_GPIO_Init+0x2b0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d046      	beq.n	800297a <HAL_GPIO_Init+0xfa>
 80028ec:	4a90      	ldr	r2, [pc, #576]	@ (8002b30 <HAL_GPIO_Init+0x2b0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d85d      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028f2:	2b12      	cmp	r3, #18
 80028f4:	d82a      	bhi.n	800294c <HAL_GPIO_Init+0xcc>
 80028f6:	2b12      	cmp	r3, #18
 80028f8:	d859      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002900 <HAL_GPIO_Init+0x80>)
 80028fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002900:	0800297b 	.word	0x0800297b
 8002904:	08002955 	.word	0x08002955
 8002908:	08002967 	.word	0x08002967
 800290c:	080029a9 	.word	0x080029a9
 8002910:	080029af 	.word	0x080029af
 8002914:	080029af 	.word	0x080029af
 8002918:	080029af 	.word	0x080029af
 800291c:	080029af 	.word	0x080029af
 8002920:	080029af 	.word	0x080029af
 8002924:	080029af 	.word	0x080029af
 8002928:	080029af 	.word	0x080029af
 800292c:	080029af 	.word	0x080029af
 8002930:	080029af 	.word	0x080029af
 8002934:	080029af 	.word	0x080029af
 8002938:	080029af 	.word	0x080029af
 800293c:	080029af 	.word	0x080029af
 8002940:	080029af 	.word	0x080029af
 8002944:	0800295d 	.word	0x0800295d
 8002948:	08002971 	.word	0x08002971
 800294c:	4a79      	ldr	r2, [pc, #484]	@ (8002b34 <HAL_GPIO_Init+0x2b4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002952:	e02c      	b.n	80029ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	623b      	str	r3, [r7, #32]
          break;
 800295a:	e029      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	3304      	adds	r3, #4
 8002962:	623b      	str	r3, [r7, #32]
          break;
 8002964:	e024      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	3308      	adds	r3, #8
 800296c:	623b      	str	r3, [r7, #32]
          break;
 800296e:	e01f      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	330c      	adds	r3, #12
 8002976:	623b      	str	r3, [r7, #32]
          break;
 8002978:	e01a      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d102      	bne.n	8002988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002982:	2304      	movs	r3, #4
 8002984:	623b      	str	r3, [r7, #32]
          break;
 8002986:	e013      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002990:	2308      	movs	r3, #8
 8002992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	611a      	str	r2, [r3, #16]
          break;
 800299a:	e009      	b.n	80029b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800299c:	2308      	movs	r3, #8
 800299e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	615a      	str	r2, [r3, #20]
          break;
 80029a6:	e003      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
          break;
 80029ac:	e000      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          break;
 80029ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2bff      	cmp	r3, #255	@ 0xff
 80029b4:	d801      	bhi.n	80029ba <HAL_GPIO_Init+0x13a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	e001      	b.n	80029be <HAL_GPIO_Init+0x13e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2bff      	cmp	r3, #255	@ 0xff
 80029c4:	d802      	bhi.n	80029cc <HAL_GPIO_Init+0x14c>
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	e002      	b.n	80029d2 <HAL_GPIO_Init+0x152>
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	3b08      	subs	r3, #8
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	210f      	movs	r1, #15
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	401a      	ands	r2, r3
 80029e4:	6a39      	ldr	r1, [r7, #32]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	431a      	orrs	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80b1 	beq.w	8002b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a00:	4b4d      	ldr	r3, [pc, #308]	@ (8002b38 <HAL_GPIO_Init+0x2b8>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a4c      	ldr	r2, [pc, #304]	@ (8002b38 <HAL_GPIO_Init+0x2b8>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6193      	str	r3, [r2, #24]
 8002a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002b38 <HAL_GPIO_Init+0x2b8>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a18:	4a48      	ldr	r2, [pc, #288]	@ (8002b3c <HAL_GPIO_Init+0x2bc>)
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	089b      	lsrs	r3, r3, #2
 8002a1e:	3302      	adds	r3, #2
 8002a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	220f      	movs	r2, #15
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a40      	ldr	r2, [pc, #256]	@ (8002b40 <HAL_GPIO_Init+0x2c0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d013      	beq.n	8002a6c <HAL_GPIO_Init+0x1ec>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a3f      	ldr	r2, [pc, #252]	@ (8002b44 <HAL_GPIO_Init+0x2c4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00d      	beq.n	8002a68 <HAL_GPIO_Init+0x1e8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a3e      	ldr	r2, [pc, #248]	@ (8002b48 <HAL_GPIO_Init+0x2c8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d007      	beq.n	8002a64 <HAL_GPIO_Init+0x1e4>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a3d      	ldr	r2, [pc, #244]	@ (8002b4c <HAL_GPIO_Init+0x2cc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d101      	bne.n	8002a60 <HAL_GPIO_Init+0x1e0>
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e006      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a60:	2304      	movs	r3, #4
 8002a62:	e004      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e002      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a70:	f002 0203 	and.w	r2, r2, #3
 8002a74:	0092      	lsls	r2, r2, #2
 8002a76:	4093      	lsls	r3, r2
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a7e:	492f      	ldr	r1, [pc, #188]	@ (8002b3c <HAL_GPIO_Init+0x2bc>)
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a98:	4b2d      	ldr	r3, [pc, #180]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	492c      	ldr	r1, [pc, #176]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	608b      	str	r3, [r1, #8]
 8002aa4:	e006      	b.n	8002ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	4928      	ldr	r1, [pc, #160]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d006      	beq.n	8002ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ac0:	4b23      	ldr	r3, [pc, #140]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	4922      	ldr	r1, [pc, #136]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60cb      	str	r3, [r1, #12]
 8002acc:	e006      	b.n	8002adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ace:	4b20      	ldr	r3, [pc, #128]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	491e      	ldr	r1, [pc, #120]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ae8:	4b19      	ldr	r3, [pc, #100]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	4918      	ldr	r1, [pc, #96]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
 8002af4:	e006      	b.n	8002b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002af6:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	4914      	ldr	r1, [pc, #80]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d021      	beq.n	8002b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b10:	4b0f      	ldr	r3, [pc, #60]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	490e      	ldr	r1, [pc, #56]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
 8002b1c:	e021      	b.n	8002b62 <HAL_GPIO_Init+0x2e2>
 8002b1e:	bf00      	nop
 8002b20:	10320000 	.word	0x10320000
 8002b24:	10310000 	.word	0x10310000
 8002b28:	10220000 	.word	0x10220000
 8002b2c:	10210000 	.word	0x10210000
 8002b30:	10120000 	.word	0x10120000
 8002b34:	10110000 	.word	0x10110000
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40010000 	.word	0x40010000
 8002b40:	40010800 	.word	0x40010800
 8002b44:	40010c00 	.word	0x40010c00
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	40011400 	.word	0x40011400
 8002b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b54:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <HAL_GPIO_Init+0x304>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	4909      	ldr	r1, [pc, #36]	@ (8002b84 <HAL_GPIO_Init+0x304>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	3301      	adds	r3, #1
 8002b66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f47f ae8e 	bne.w	8002894 <HAL_GPIO_Init+0x14>
  }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	372c      	adds	r7, #44	@ 0x2c
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	40010400 	.word	0x40010400

08002b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
 8002b94:	4613      	mov	r3, r2
 8002b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b98:	787b      	ldrb	r3, [r7, #1]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ba4:	e003      	b.n	8002bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ba6:	887b      	ldrh	r3, [r7, #2]
 8002ba8:	041a      	lsls	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	611a      	str	r2, [r3, #16]
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e12b      	b.n	8002e22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fe fee6 	bl	80019b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2224      	movs	r2, #36	@ 0x24
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c1c:	f001 fd7c 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8002c20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4a81      	ldr	r2, [pc, #516]	@ (8002e2c <HAL_I2C_Init+0x274>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d807      	bhi.n	8002c3c <HAL_I2C_Init+0x84>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4a80      	ldr	r2, [pc, #512]	@ (8002e30 <HAL_I2C_Init+0x278>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	bf94      	ite	ls
 8002c34:	2301      	movls	r3, #1
 8002c36:	2300      	movhi	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e006      	b.n	8002c4a <HAL_I2C_Init+0x92>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4a7d      	ldr	r2, [pc, #500]	@ (8002e34 <HAL_I2C_Init+0x27c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	bf94      	ite	ls
 8002c44:	2301      	movls	r3, #1
 8002c46:	2300      	movhi	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e0e7      	b.n	8002e22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4a78      	ldr	r2, [pc, #480]	@ (8002e38 <HAL_I2C_Init+0x280>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0c9b      	lsrs	r3, r3, #18
 8002c5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4a6a      	ldr	r2, [pc, #424]	@ (8002e2c <HAL_I2C_Init+0x274>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d802      	bhi.n	8002c8c <HAL_I2C_Init+0xd4>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	e009      	b.n	8002ca0 <HAL_I2C_Init+0xe8>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	4a69      	ldr	r2, [pc, #420]	@ (8002e3c <HAL_I2C_Init+0x284>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	099b      	lsrs	r3, r3, #6
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	495c      	ldr	r1, [pc, #368]	@ (8002e2c <HAL_I2C_Init+0x274>)
 8002cbc:	428b      	cmp	r3, r1
 8002cbe:	d819      	bhi.n	8002cf4 <HAL_I2C_Init+0x13c>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1e59      	subs	r1, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cce:	1c59      	adds	r1, r3, #1
 8002cd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002cd4:	400b      	ands	r3, r1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_I2C_Init+0x138>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1e59      	subs	r1, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cee:	e051      	b.n	8002d94 <HAL_I2C_Init+0x1dc>
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	e04f      	b.n	8002d94 <HAL_I2C_Init+0x1dc>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d111      	bne.n	8002d20 <HAL_I2C_Init+0x168>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e58      	subs	r0, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	440b      	add	r3, r1
 8002d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e012      	b.n	8002d46 <HAL_I2C_Init+0x18e>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1e58      	subs	r0, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	0099      	lsls	r1, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d36:	3301      	adds	r3, #1
 8002d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Init+0x196>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e022      	b.n	8002d94 <HAL_I2C_Init+0x1dc>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10e      	bne.n	8002d74 <HAL_I2C_Init+0x1bc>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1e58      	subs	r0, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	440b      	add	r3, r1
 8002d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d72:	e00f      	b.n	8002d94 <HAL_I2C_Init+0x1dc>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	0099      	lsls	r1, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	6809      	ldr	r1, [r1, #0]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002dc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6911      	ldr	r1, [r2, #16]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68d2      	ldr	r2, [r2, #12]
 8002dce:	4311      	orrs	r1, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	000186a0 	.word	0x000186a0
 8002e30:	001e847f 	.word	0x001e847f
 8002e34:	003d08ff 	.word	0x003d08ff
 8002e38:	431bde83 	.word	0x431bde83
 8002e3c:	10624dd3 	.word	0x10624dd3

08002e40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	817b      	strh	r3, [r7, #10]
 8002e50:	4613      	mov	r3, r2
 8002e52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e54:	f7ff f800 	bl	8001e58 <HAL_GetTick>
 8002e58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	f040 80e0 	bne.w	8003028 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2319      	movs	r3, #25
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4970      	ldr	r1, [pc, #448]	@ (8003034 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fe50 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e0d3      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_I2C_Master_Transmit+0x50>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e0cc      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d007      	beq.n	8002eb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ec4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2221      	movs	r2, #33	@ 0x21
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2210      	movs	r2, #16
 8002ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	893a      	ldrh	r2, [r7, #8]
 8002ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a50      	ldr	r2, [pc, #320]	@ (8003038 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ef8:	8979      	ldrh	r1, [r7, #10]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 fc0a 	bl	8003718 <I2C_MasterRequestWrite>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e08d      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f24:	e066      	b.n	8002ff4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	6a39      	ldr	r1, [r7, #32]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 ff0e 	bl	8003d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00d      	beq.n	8002f52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d107      	bne.n	8002f4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e06b      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	781a      	ldrb	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_I2C_Master_Transmit+0x188>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d017      	beq.n	8002fc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	781a      	ldrb	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	6a39      	ldr	r1, [r7, #32]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 ff05 	bl	8003ddc <I2C_WaitOnBTFFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d107      	bne.n	8002ff0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e01a      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d194      	bne.n	8002f26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800300a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	00100002 	.word	0x00100002
 8003038:	ffff0000 	.word	0xffff0000

0800303c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	4608      	mov	r0, r1
 8003046:	4611      	mov	r1, r2
 8003048:	461a      	mov	r2, r3
 800304a:	4603      	mov	r3, r0
 800304c:	817b      	strh	r3, [r7, #10]
 800304e:	460b      	mov	r3, r1
 8003050:	813b      	strh	r3, [r7, #8]
 8003052:	4613      	mov	r3, r2
 8003054:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003056:	f7fe feff 	bl	8001e58 <HAL_GetTick>
 800305a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b20      	cmp	r3, #32
 8003066:	f040 80d9 	bne.w	800321c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	2319      	movs	r3, #25
 8003070:	2201      	movs	r2, #1
 8003072:	496d      	ldr	r1, [pc, #436]	@ (8003228 <HAL_I2C_Mem_Write+0x1ec>)
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fd4f 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
 8003082:	e0cc      	b.n	800321e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_I2C_Mem_Write+0x56>
 800308e:	2302      	movs	r3, #2
 8003090:	e0c5      	b.n	800321e <HAL_I2C_Mem_Write+0x1e2>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d007      	beq.n	80030b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2221      	movs	r2, #33	@ 0x21
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2240      	movs	r2, #64	@ 0x40
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4a4d      	ldr	r2, [pc, #308]	@ (800322c <HAL_I2C_Mem_Write+0x1f0>)
 80030f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030fa:	88f8      	ldrh	r0, [r7, #6]
 80030fc:	893a      	ldrh	r2, [r7, #8]
 80030fe:	8979      	ldrh	r1, [r7, #10]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	4603      	mov	r3, r0
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fb86 	bl	800381c <I2C_RequestMemoryWrite>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d052      	beq.n	80031bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e081      	b.n	800321e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fe14 	bl	8003d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00d      	beq.n	8003146 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	2b04      	cmp	r3, #4
 8003130:	d107      	bne.n	8003142 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003140:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e06b      	b.n	800321e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	781a      	ldrb	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b04      	cmp	r3, #4
 8003182:	d11b      	bne.n	80031bc <HAL_I2C_Mem_Write+0x180>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	d017      	beq.n	80031bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1aa      	bne.n	800311a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fe07 	bl	8003ddc <I2C_WaitOnBTFFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00d      	beq.n	80031f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d107      	bne.n	80031ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e016      	b.n	800321e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	e000      	b.n	800321e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	00100002 	.word	0x00100002
 800322c:	ffff0000 	.word	0xffff0000

08003230 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08c      	sub	sp, #48	@ 0x30
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	4608      	mov	r0, r1
 800323a:	4611      	mov	r1, r2
 800323c:	461a      	mov	r2, r3
 800323e:	4603      	mov	r3, r0
 8003240:	817b      	strh	r3, [r7, #10]
 8003242:	460b      	mov	r3, r1
 8003244:	813b      	strh	r3, [r7, #8]
 8003246:	4613      	mov	r3, r2
 8003248:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800324e:	f7fe fe03 	bl	8001e58 <HAL_GetTick>
 8003252:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b20      	cmp	r3, #32
 800325e:	f040 8250 	bne.w	8003702 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2319      	movs	r3, #25
 8003268:	2201      	movs	r2, #1
 800326a:	4982      	ldr	r1, [pc, #520]	@ (8003474 <HAL_I2C_Mem_Read+0x244>)
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fc53 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
 800327a:	e243      	b.n	8003704 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_I2C_Mem_Read+0x5a>
 8003286:	2302      	movs	r3, #2
 8003288:	e23c      	b.n	8003704 <HAL_I2C_Mem_Read+0x4d4>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d007      	beq.n	80032b0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2222      	movs	r2, #34	@ 0x22
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2240      	movs	r2, #64	@ 0x40
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80032e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a62      	ldr	r2, [pc, #392]	@ (8003478 <HAL_I2C_Mem_Read+0x248>)
 80032f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032f2:	88f8      	ldrh	r0, [r7, #6]
 80032f4:	893a      	ldrh	r2, [r7, #8]
 80032f6:	8979      	ldrh	r1, [r7, #10]
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	4603      	mov	r3, r0
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fb20 	bl	8003948 <I2C_RequestMemoryRead>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e1f8      	b.n	8003704 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	d113      	bne.n	8003342 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e1cc      	b.n	80036dc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003346:	2b01      	cmp	r3, #1
 8003348:	d11e      	bne.n	8003388 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003358:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800335a:	b672      	cpsid	i
}
 800335c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003382:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003384:	b662      	cpsie	i
}
 8003386:	e035      	b.n	80033f4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338c:	2b02      	cmp	r3, #2
 800338e:	d11e      	bne.n	80033ce <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800339e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033a0:	b672      	cpsid	i
}
 80033a2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033ca:	b662      	cpsie	i
}
 80033cc:	e012      	b.n	80033f4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033dc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80033f4:	e172      	b.n	80036dc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	f200 811f 	bhi.w	800363e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003404:	2b01      	cmp	r3, #1
 8003406:	d123      	bne.n	8003450 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800340a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 fd2d 	bl	8003e6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e173      	b.n	8003704 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800344e:	e145      	b.n	80036dc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003454:	2b02      	cmp	r3, #2
 8003456:	d152      	bne.n	80034fe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345e:	2200      	movs	r2, #0
 8003460:	4906      	ldr	r1, [pc, #24]	@ (800347c <HAL_I2C_Mem_Read+0x24c>)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fb58 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e148      	b.n	8003704 <HAL_I2C_Mem_Read+0x4d4>
 8003472:	bf00      	nop
 8003474:	00100002 	.word	0x00100002
 8003478:	ffff0000 	.word	0xffff0000
 800347c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003480:	b672      	cpsid	i
}
 8003482:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034c6:	b662      	cpsie	i
}
 80034c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034fc:	e0ee      	b.n	80036dc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003504:	2200      	movs	r2, #0
 8003506:	4981      	ldr	r1, [pc, #516]	@ (800370c <HAL_I2C_Mem_Read+0x4dc>)
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fb05 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0f5      	b.n	8003704 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003526:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003528:	b672      	cpsid	i
}
 800352a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800355e:	4b6c      	ldr	r3, [pc, #432]	@ (8003710 <HAL_I2C_Mem_Read+0x4e0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	08db      	lsrs	r3, r3, #3
 8003564:	4a6b      	ldr	r2, [pc, #428]	@ (8003714 <HAL_I2C_Mem_Read+0x4e4>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	0a1a      	lsrs	r2, r3, #8
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	00da      	lsls	r2, r3, #3
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	3b01      	subs	r3, #1
 800357c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d118      	bne.n	80035b6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	f043 0220 	orr.w	r2, r3, #32
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80035a6:	b662      	cpsie	i
}
 80035a8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e0a6      	b.n	8003704 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d1d9      	bne.n	8003578 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003606:	b662      	cpsie	i
}
 8003608:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800363c:	e04e      	b.n	80036dc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003640:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fc12 	bl	8003e6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e058      	b.n	8003704 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b04      	cmp	r3, #4
 8003690:	d124      	bne.n	80036dc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003696:	2b03      	cmp	r3, #3
 8003698:	d107      	bne.n	80036aa <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f47f ae88 	bne.w	80033f6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e000      	b.n	8003704 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003702:	2302      	movs	r3, #2
  }
}
 8003704:	4618      	mov	r0, r3
 8003706:	3728      	adds	r7, #40	@ 0x28
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	00010004 	.word	0x00010004
 8003710:	20000000 	.word	0x20000000
 8003714:	14f8b589 	.word	0x14f8b589

08003718 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	460b      	mov	r3, r1
 8003726:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d006      	beq.n	8003742 <I2C_MasterRequestWrite+0x2a>
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d003      	beq.n	8003742 <I2C_MasterRequestWrite+0x2a>
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003740:	d108      	bne.n	8003754 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	e00b      	b.n	800376c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003758:	2b12      	cmp	r3, #18
 800375a:	d107      	bne.n	800376c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800376a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f9cd 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003792:	d103      	bne.n	800379c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e035      	b.n	800380c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037a8:	d108      	bne.n	80037bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037aa:	897b      	ldrh	r3, [r7, #10]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037b8:	611a      	str	r2, [r3, #16]
 80037ba:	e01b      	b.n	80037f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037bc:	897b      	ldrh	r3, [r7, #10]
 80037be:	11db      	asrs	r3, r3, #7
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f003 0306 	and.w	r3, r3, #6
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f063 030f 	orn	r3, r3, #15
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	490e      	ldr	r1, [pc, #56]	@ (8003814 <I2C_MasterRequestWrite+0xfc>)
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fa16 	bl	8003c0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e010      	b.n	800380c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037ea:	897b      	ldrh	r3, [r7, #10]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	4907      	ldr	r1, [pc, #28]	@ (8003818 <I2C_MasterRequestWrite+0x100>)
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fa06 	bl	8003c0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	00010008 	.word	0x00010008
 8003818:	00010002 	.word	0x00010002

0800381c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	4608      	mov	r0, r1
 8003826:	4611      	mov	r1, r2
 8003828:	461a      	mov	r2, r3
 800382a:	4603      	mov	r3, r0
 800382c:	817b      	strh	r3, [r7, #10]
 800382e:	460b      	mov	r3, r1
 8003830:	813b      	strh	r3, [r7, #8]
 8003832:	4613      	mov	r3, r2
 8003834:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003844:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	2200      	movs	r2, #0
 800384e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f960 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00d      	beq.n	800387a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003868:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800386c:	d103      	bne.n	8003876 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003874:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e05f      	b.n	800393a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800387a:	897b      	ldrh	r3, [r7, #10]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	461a      	mov	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003888:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	6a3a      	ldr	r2, [r7, #32]
 800388e:	492d      	ldr	r1, [pc, #180]	@ (8003944 <I2C_RequestMemoryWrite+0x128>)
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f9bb 	bl	8003c0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e04c      	b.n	800393a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b8:	6a39      	ldr	r1, [r7, #32]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fa46 	bl	8003d4c <I2C_WaitOnTXEFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00d      	beq.n	80038e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d107      	bne.n	80038de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e02b      	b.n	800393a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d105      	bne.n	80038f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038e8:	893b      	ldrh	r3, [r7, #8]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	611a      	str	r2, [r3, #16]
 80038f2:	e021      	b.n	8003938 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038f4:	893b      	ldrh	r3, [r7, #8]
 80038f6:	0a1b      	lsrs	r3, r3, #8
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003904:	6a39      	ldr	r1, [r7, #32]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fa20 	bl	8003d4c <I2C_WaitOnTXEFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00d      	beq.n	800392e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	2b04      	cmp	r3, #4
 8003918:	d107      	bne.n	800392a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003928:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e005      	b.n	800393a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800392e:	893b      	ldrh	r3, [r7, #8]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	00010002 	.word	0x00010002

08003948 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	4608      	mov	r0, r1
 8003952:	4611      	mov	r1, r2
 8003954:	461a      	mov	r2, r3
 8003956:	4603      	mov	r3, r0
 8003958:	817b      	strh	r3, [r7, #10]
 800395a:	460b      	mov	r3, r1
 800395c:	813b      	strh	r3, [r7, #8]
 800395e:	4613      	mov	r3, r2
 8003960:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003970:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003980:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	2200      	movs	r2, #0
 800398a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f8c2 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00d      	beq.n	80039b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a8:	d103      	bne.n	80039b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e0aa      	b.n	8003b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039b6:	897b      	ldrh	r3, [r7, #10]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	461a      	mov	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	6a3a      	ldr	r2, [r7, #32]
 80039ca:	4952      	ldr	r1, [pc, #328]	@ (8003b14 <I2C_RequestMemoryRead+0x1cc>)
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f91d 	bl	8003c0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e097      	b.n	8003b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f4:	6a39      	ldr	r1, [r7, #32]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f9a8 	bl	8003d4c <I2C_WaitOnTXEFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00d      	beq.n	8003a1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d107      	bne.n	8003a1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e076      	b.n	8003b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d105      	bne.n	8003a30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a24:	893b      	ldrh	r3, [r7, #8]
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	611a      	str	r2, [r3, #16]
 8003a2e:	e021      	b.n	8003a74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a30:	893b      	ldrh	r3, [r7, #8]
 8003a32:	0a1b      	lsrs	r3, r3, #8
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a40:	6a39      	ldr	r1, [r7, #32]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f982 	bl	8003d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00d      	beq.n	8003a6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d107      	bne.n	8003a66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e050      	b.n	8003b0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a6a:	893b      	ldrh	r3, [r7, #8]
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a76:	6a39      	ldr	r1, [r7, #32]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f967 	bl	8003d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00d      	beq.n	8003aa0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d107      	bne.n	8003a9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e035      	b.n	8003b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f82b 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00d      	beq.n	8003ae4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ad6:	d103      	bne.n	8003ae0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ade:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e013      	b.n	8003b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ae4:	897b      	ldrh	r3, [r7, #10]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af6:	6a3a      	ldr	r2, [r7, #32]
 8003af8:	4906      	ldr	r1, [pc, #24]	@ (8003b14 <I2C_RequestMemoryRead+0x1cc>)
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f886 	bl	8003c0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	00010002 	.word	0x00010002

08003b18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	4613      	mov	r3, r2
 8003b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b28:	e048      	b.n	8003bbc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d044      	beq.n	8003bbc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b32:	f7fe f991 	bl	8001e58 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d139      	bne.n	8003bbc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	0c1b      	lsrs	r3, r3, #16
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d10d      	bne.n	8003b6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	43da      	mvns	r2, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf0c      	ite	eq
 8003b64:	2301      	moveq	r3, #1
 8003b66:	2300      	movne	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	e00c      	b.n	8003b88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	43da      	mvns	r2, r3
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d116      	bne.n	8003bbc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	f043 0220 	orr.w	r2, r3, #32
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e023      	b.n	8003c04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	0c1b      	lsrs	r3, r3, #16
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d10d      	bne.n	8003be2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	43da      	mvns	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	e00c      	b.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	43da      	mvns	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4013      	ands	r3, r2
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bf0c      	ite	eq
 8003bf4:	2301      	moveq	r3, #1
 8003bf6:	2300      	movne	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d093      	beq.n	8003b2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c1a:	e071      	b.n	8003d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c2a:	d123      	bne.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c60:	f043 0204 	orr.w	r2, r3, #4
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e067      	b.n	8003d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7a:	d041      	beq.n	8003d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7c:	f7fe f8ec 	bl	8001e58 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d302      	bcc.n	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d136      	bne.n	8003d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d10c      	bne.n	8003cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	43da      	mvns	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bf14      	ite	ne
 8003cae:	2301      	movne	r3, #1
 8003cb0:	2300      	moveq	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	e00b      	b.n	8003cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf14      	ite	ne
 8003cc8:	2301      	movne	r3, #1
 8003cca:	2300      	moveq	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cec:	f043 0220 	orr.w	r2, r3, #32
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e021      	b.n	8003d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	0c1b      	lsrs	r3, r3, #16
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d10c      	bne.n	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	43da      	mvns	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4013      	ands	r3, r2
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf14      	ite	ne
 8003d1c:	2301      	movne	r3, #1
 8003d1e:	2300      	moveq	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	e00b      	b.n	8003d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bf14      	ite	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	2300      	moveq	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f47f af6d 	bne.w	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d58:	e034      	b.n	8003dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f8e3 	bl	8003f26 <I2C_IsAcknowledgeFailed>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e034      	b.n	8003dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d028      	beq.n	8003dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d72:	f7fe f871 	bl	8001e58 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d302      	bcc.n	8003d88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d11d      	bne.n	8003dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d92:	2b80      	cmp	r3, #128	@ 0x80
 8003d94:	d016      	beq.n	8003dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	f043 0220 	orr.w	r2, r3, #32
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e007      	b.n	8003dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dce:	2b80      	cmp	r3, #128	@ 0x80
 8003dd0:	d1c3      	bne.n	8003d5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003de8:	e034      	b.n	8003e54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f89b 	bl	8003f26 <I2C_IsAcknowledgeFailed>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e034      	b.n	8003e64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e00:	d028      	beq.n	8003e54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e02:	f7fe f829 	bl	8001e58 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d302      	bcc.n	8003e18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d11d      	bne.n	8003e54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d016      	beq.n	8003e54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e007      	b.n	8003e64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d1c3      	bne.n	8003dea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e78:	e049      	b.n	8003f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d119      	bne.n	8003ebc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0210 	mvn.w	r2, #16
 8003e90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e030      	b.n	8003f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ebc:	f7fd ffcc 	bl	8001e58 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d302      	bcc.n	8003ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d11d      	bne.n	8003f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003edc:	2b40      	cmp	r3, #64	@ 0x40
 8003ede:	d016      	beq.n	8003f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	f043 0220 	orr.w	r2, r3, #32
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e007      	b.n	8003f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f18:	2b40      	cmp	r3, #64	@ 0x40
 8003f1a:	d1ae      	bne.n	8003e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f3c:	d11b      	bne.n	8003f76 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f46:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	f043 0204 	orr.w	r2, r3, #4
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr
	...

08003f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e272      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 8087 	beq.w	80040b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fa4:	4b92      	ldr	r3, [pc, #584]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 030c 	and.w	r3, r3, #12
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d00c      	beq.n	8003fca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fb0:	4b8f      	ldr	r3, [pc, #572]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d112      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x5e>
 8003fbc:	4b8c      	ldr	r3, [pc, #560]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc8:	d10b      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fca:	4b89      	ldr	r3, [pc, #548]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d06c      	beq.n	80040b0 <HAL_RCC_OscConfig+0x12c>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d168      	bne.n	80040b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e24c      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fea:	d106      	bne.n	8003ffa <HAL_RCC_OscConfig+0x76>
 8003fec:	4b80      	ldr	r3, [pc, #512]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a7f      	ldr	r2, [pc, #508]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8003ff2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	e02e      	b.n	8004058 <HAL_RCC_OscConfig+0xd4>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0x98>
 8004002:	4b7b      	ldr	r3, [pc, #492]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a7a      	ldr	r2, [pc, #488]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8004008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	4b78      	ldr	r3, [pc, #480]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a77      	ldr	r2, [pc, #476]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8004014:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	e01d      	b.n	8004058 <HAL_RCC_OscConfig+0xd4>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004024:	d10c      	bne.n	8004040 <HAL_RCC_OscConfig+0xbc>
 8004026:	4b72      	ldr	r3, [pc, #456]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a71      	ldr	r2, [pc, #452]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 800402c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	4b6f      	ldr	r3, [pc, #444]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a6e      	ldr	r2, [pc, #440]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8004038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	e00b      	b.n	8004058 <HAL_RCC_OscConfig+0xd4>
 8004040:	4b6b      	ldr	r3, [pc, #428]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a6a      	ldr	r2, [pc, #424]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8004046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	4b68      	ldr	r3, [pc, #416]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a67      	ldr	r2, [pc, #412]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8004052:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004056:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d013      	beq.n	8004088 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fd fefa 	bl	8001e58 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004068:	f7fd fef6 	bl	8001e58 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	@ 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e200      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407a:	4b5d      	ldr	r3, [pc, #372]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f0      	beq.n	8004068 <HAL_RCC_OscConfig+0xe4>
 8004086:	e014      	b.n	80040b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fd fee6 	bl	8001e58 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004090:	f7fd fee2 	bl	8001e58 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	@ 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e1ec      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a2:	4b53      	ldr	r3, [pc, #332]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x10c>
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d063      	beq.n	8004186 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040be:	4b4c      	ldr	r3, [pc, #304]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040ca:	4b49      	ldr	r3, [pc, #292]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 030c 	and.w	r3, r3, #12
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d11c      	bne.n	8004110 <HAL_RCC_OscConfig+0x18c>
 80040d6:	4b46      	ldr	r3, [pc, #280]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d116      	bne.n	8004110 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e2:	4b43      	ldr	r3, [pc, #268]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_RCC_OscConfig+0x176>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d001      	beq.n	80040fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e1c0      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fa:	4b3d      	ldr	r3, [pc, #244]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4939      	ldr	r1, [pc, #228]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 800410a:	4313      	orrs	r3, r2
 800410c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410e:	e03a      	b.n	8004186 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d020      	beq.n	800415a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004118:	4b36      	ldr	r3, [pc, #216]	@ (80041f4 <HAL_RCC_OscConfig+0x270>)
 800411a:	2201      	movs	r2, #1
 800411c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411e:	f7fd fe9b 	bl	8001e58 <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004126:	f7fd fe97 	bl	8001e58 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e1a1      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004138:	4b2d      	ldr	r3, [pc, #180]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004144:	4b2a      	ldr	r3, [pc, #168]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4927      	ldr	r1, [pc, #156]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 8004154:	4313      	orrs	r3, r2
 8004156:	600b      	str	r3, [r1, #0]
 8004158:	e015      	b.n	8004186 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800415a:	4b26      	ldr	r3, [pc, #152]	@ (80041f4 <HAL_RCC_OscConfig+0x270>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004160:	f7fd fe7a 	bl	8001e58 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004168:	f7fd fe76 	bl	8001e58 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e180      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	4b1d      	ldr	r3, [pc, #116]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d03a      	beq.n	8004208 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d019      	beq.n	80041ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800419a:	4b17      	ldr	r3, [pc, #92]	@ (80041f8 <HAL_RCC_OscConfig+0x274>)
 800419c:	2201      	movs	r2, #1
 800419e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a0:	f7fd fe5a 	bl	8001e58 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a8:	f7fd fe56 	bl	8001e58 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e160      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ba:	4b0d      	ldr	r3, [pc, #52]	@ (80041f0 <HAL_RCC_OscConfig+0x26c>)
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041c6:	2001      	movs	r0, #1
 80041c8:	f000 face 	bl	8004768 <RCC_Delay>
 80041cc:	e01c      	b.n	8004208 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ce:	4b0a      	ldr	r3, [pc, #40]	@ (80041f8 <HAL_RCC_OscConfig+0x274>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d4:	f7fd fe40 	bl	8001e58 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041da:	e00f      	b.n	80041fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041dc:	f7fd fe3c 	bl	8001e58 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d908      	bls.n	80041fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e146      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000
 80041f4:	42420000 	.word	0x42420000
 80041f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041fc:	4b92      	ldr	r3, [pc, #584]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e9      	bne.n	80041dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80a6 	beq.w	8004362 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004216:	2300      	movs	r3, #0
 8004218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800421a:	4b8b      	ldr	r3, [pc, #556]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10d      	bne.n	8004242 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004226:	4b88      	ldr	r3, [pc, #544]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	4a87      	ldr	r2, [pc, #540]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 800422c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004230:	61d3      	str	r3, [r2, #28]
 8004232:	4b85      	ldr	r3, [pc, #532]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800423e:	2301      	movs	r3, #1
 8004240:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004242:	4b82      	ldr	r3, [pc, #520]	@ (800444c <HAL_RCC_OscConfig+0x4c8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424a:	2b00      	cmp	r3, #0
 800424c:	d118      	bne.n	8004280 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800424e:	4b7f      	ldr	r3, [pc, #508]	@ (800444c <HAL_RCC_OscConfig+0x4c8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a7e      	ldr	r2, [pc, #504]	@ (800444c <HAL_RCC_OscConfig+0x4c8>)
 8004254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800425a:	f7fd fdfd 	bl	8001e58 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004262:	f7fd fdf9 	bl	8001e58 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b64      	cmp	r3, #100	@ 0x64
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e103      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	4b75      	ldr	r3, [pc, #468]	@ (800444c <HAL_RCC_OscConfig+0x4c8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d106      	bne.n	8004296 <HAL_RCC_OscConfig+0x312>
 8004288:	4b6f      	ldr	r3, [pc, #444]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	4a6e      	ldr	r2, [pc, #440]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	6213      	str	r3, [r2, #32]
 8004294:	e02d      	b.n	80042f2 <HAL_RCC_OscConfig+0x36e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10c      	bne.n	80042b8 <HAL_RCC_OscConfig+0x334>
 800429e:	4b6a      	ldr	r3, [pc, #424]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	4a69      	ldr	r2, [pc, #420]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	6213      	str	r3, [r2, #32]
 80042aa:	4b67      	ldr	r3, [pc, #412]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	4a66      	ldr	r2, [pc, #408]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80042b0:	f023 0304 	bic.w	r3, r3, #4
 80042b4:	6213      	str	r3, [r2, #32]
 80042b6:	e01c      	b.n	80042f2 <HAL_RCC_OscConfig+0x36e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	2b05      	cmp	r3, #5
 80042be:	d10c      	bne.n	80042da <HAL_RCC_OscConfig+0x356>
 80042c0:	4b61      	ldr	r3, [pc, #388]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	4a60      	ldr	r2, [pc, #384]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80042c6:	f043 0304 	orr.w	r3, r3, #4
 80042ca:	6213      	str	r3, [r2, #32]
 80042cc:	4b5e      	ldr	r3, [pc, #376]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	4a5d      	ldr	r2, [pc, #372]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	6213      	str	r3, [r2, #32]
 80042d8:	e00b      	b.n	80042f2 <HAL_RCC_OscConfig+0x36e>
 80042da:	4b5b      	ldr	r3, [pc, #364]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	4a5a      	ldr	r2, [pc, #360]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	6213      	str	r3, [r2, #32]
 80042e6:	4b58      	ldr	r3, [pc, #352]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	4a57      	ldr	r2, [pc, #348]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80042ec:	f023 0304 	bic.w	r3, r3, #4
 80042f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d015      	beq.n	8004326 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042fa:	f7fd fdad 	bl	8001e58 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004300:	e00a      	b.n	8004318 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004302:	f7fd fda9 	bl	8001e58 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004310:	4293      	cmp	r3, r2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e0b1      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004318:	4b4b      	ldr	r3, [pc, #300]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0ee      	beq.n	8004302 <HAL_RCC_OscConfig+0x37e>
 8004324:	e014      	b.n	8004350 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004326:	f7fd fd97 	bl	8001e58 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432c:	e00a      	b.n	8004344 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432e:	f7fd fd93 	bl	8001e58 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433c:	4293      	cmp	r3, r2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e09b      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004344:	4b40      	ldr	r3, [pc, #256]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1ee      	bne.n	800432e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004350:	7dfb      	ldrb	r3, [r7, #23]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d105      	bne.n	8004362 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004356:	4b3c      	ldr	r3, [pc, #240]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	4a3b      	ldr	r2, [pc, #236]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 800435c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004360:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 8087 	beq.w	800447a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800436c:	4b36      	ldr	r3, [pc, #216]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 030c 	and.w	r3, r3, #12
 8004374:	2b08      	cmp	r3, #8
 8004376:	d061      	beq.n	800443c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d146      	bne.n	800440e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004380:	4b33      	ldr	r3, [pc, #204]	@ (8004450 <HAL_RCC_OscConfig+0x4cc>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004386:	f7fd fd67 	bl	8001e58 <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438e:	f7fd fd63 	bl	8001e58 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e06d      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043a0:	4b29      	ldr	r3, [pc, #164]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f0      	bne.n	800438e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b4:	d108      	bne.n	80043c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043b6:	4b24      	ldr	r3, [pc, #144]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	4921      	ldr	r1, [pc, #132]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043c8:	4b1f      	ldr	r3, [pc, #124]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a19      	ldr	r1, [r3, #32]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d8:	430b      	orrs	r3, r1
 80043da:	491b      	ldr	r1, [pc, #108]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e6:	f7fd fd37 	bl	8001e58 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ee:	f7fd fd33 	bl	8001e58 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e03d      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004400:	4b11      	ldr	r3, [pc, #68]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCC_OscConfig+0x46a>
 800440c:	e035      	b.n	800447a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440e:	4b10      	ldr	r3, [pc, #64]	@ (8004450 <HAL_RCC_OscConfig+0x4cc>)
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fd fd20 	bl	8001e58 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441c:	f7fd fd1c 	bl	8001e58 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e026      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800442e:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <HAL_RCC_OscConfig+0x4c4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x498>
 800443a:	e01e      	b.n	800447a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d107      	bne.n	8004454 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e019      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
 8004448:	40021000 	.word	0x40021000
 800444c:	40007000 	.word	0x40007000
 8004450:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004454:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <HAL_RCC_OscConfig+0x500>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	429a      	cmp	r2, r3
 8004466:	d106      	bne.n	8004476 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d001      	beq.n	800447a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40021000 	.word	0x40021000

08004488 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0d0      	b.n	800463e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800449c:	4b6a      	ldr	r3, [pc, #424]	@ (8004648 <HAL_RCC_ClockConfig+0x1c0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d910      	bls.n	80044cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044aa:	4b67      	ldr	r3, [pc, #412]	@ (8004648 <HAL_RCC_ClockConfig+0x1c0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 0207 	bic.w	r2, r3, #7
 80044b2:	4965      	ldr	r1, [pc, #404]	@ (8004648 <HAL_RCC_ClockConfig+0x1c0>)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ba:	4b63      	ldr	r3, [pc, #396]	@ (8004648 <HAL_RCC_ClockConfig+0x1c0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0b8      	b.n	800463e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d020      	beq.n	800451a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d005      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044e4:	4b59      	ldr	r3, [pc, #356]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4a58      	ldr	r2, [pc, #352]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 80044ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044fc:	4b53      	ldr	r3, [pc, #332]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	4a52      	ldr	r2, [pc, #328]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 8004502:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004506:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004508:	4b50      	ldr	r3, [pc, #320]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	494d      	ldr	r1, [pc, #308]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 8004516:	4313      	orrs	r3, r2
 8004518:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d040      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d107      	bne.n	800453e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452e:	4b47      	ldr	r3, [pc, #284]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d115      	bne.n	8004566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e07f      	b.n	800463e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d107      	bne.n	8004556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004546:	4b41      	ldr	r3, [pc, #260]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e073      	b.n	800463e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004556:	4b3d      	ldr	r3, [pc, #244]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e06b      	b.n	800463e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004566:	4b39      	ldr	r3, [pc, #228]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f023 0203 	bic.w	r2, r3, #3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	4936      	ldr	r1, [pc, #216]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 8004574:	4313      	orrs	r3, r2
 8004576:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004578:	f7fd fc6e 	bl	8001e58 <HAL_GetTick>
 800457c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457e:	e00a      	b.n	8004596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004580:	f7fd fc6a 	bl	8001e58 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e053      	b.n	800463e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004596:	4b2d      	ldr	r3, [pc, #180]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f003 020c 	and.w	r2, r3, #12
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d1eb      	bne.n	8004580 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045a8:	4b27      	ldr	r3, [pc, #156]	@ (8004648 <HAL_RCC_ClockConfig+0x1c0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d210      	bcs.n	80045d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b6:	4b24      	ldr	r3, [pc, #144]	@ (8004648 <HAL_RCC_ClockConfig+0x1c0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 0207 	bic.w	r2, r3, #7
 80045be:	4922      	ldr	r1, [pc, #136]	@ (8004648 <HAL_RCC_ClockConfig+0x1c0>)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c6:	4b20      	ldr	r3, [pc, #128]	@ (8004648 <HAL_RCC_ClockConfig+0x1c0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d001      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e032      	b.n	800463e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045e4:	4b19      	ldr	r3, [pc, #100]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	4916      	ldr	r1, [pc, #88]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004602:	4b12      	ldr	r3, [pc, #72]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	490e      	ldr	r1, [pc, #56]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 8004612:	4313      	orrs	r3, r2
 8004614:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004616:	f000 f821 	bl	800465c <HAL_RCC_GetSysClockFreq>
 800461a:	4602      	mov	r2, r0
 800461c:	4b0b      	ldr	r3, [pc, #44]	@ (800464c <HAL_RCC_ClockConfig+0x1c4>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	091b      	lsrs	r3, r3, #4
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	490a      	ldr	r1, [pc, #40]	@ (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 8004628:	5ccb      	ldrb	r3, [r1, r3]
 800462a:	fa22 f303 	lsr.w	r3, r2, r3
 800462e:	4a09      	ldr	r2, [pc, #36]	@ (8004654 <HAL_RCC_ClockConfig+0x1cc>)
 8004630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004632:	4b09      	ldr	r3, [pc, #36]	@ (8004658 <HAL_RCC_ClockConfig+0x1d0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fbcc 	bl	8001dd4 <HAL_InitTick>

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40022000 	.word	0x40022000
 800464c:	40021000 	.word	0x40021000
 8004650:	08007618 	.word	0x08007618
 8004654:	20000000 	.word	0x20000000
 8004658:	20000004 	.word	0x20000004

0800465c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	2300      	movs	r3, #0
 8004670:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004676:	4b1e      	ldr	r3, [pc, #120]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b04      	cmp	r3, #4
 8004684:	d002      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0x30>
 8004686:	2b08      	cmp	r3, #8
 8004688:	d003      	beq.n	8004692 <HAL_RCC_GetSysClockFreq+0x36>
 800468a:	e027      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800468c:	4b19      	ldr	r3, [pc, #100]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800468e:	613b      	str	r3, [r7, #16]
      break;
 8004690:	e027      	b.n	80046e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	0c9b      	lsrs	r3, r3, #18
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	4a17      	ldr	r2, [pc, #92]	@ (80046f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800469c:	5cd3      	ldrb	r3, [r2, r3]
 800469e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d010      	beq.n	80046cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046aa:	4b11      	ldr	r3, [pc, #68]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	0c5b      	lsrs	r3, r3, #17
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	4a11      	ldr	r2, [pc, #68]	@ (80046fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80046b6:	5cd3      	ldrb	r3, [r2, r3]
 80046b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a0d      	ldr	r2, [pc, #52]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80046be:	fb03 f202 	mul.w	r2, r3, r2
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	e004      	b.n	80046d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004700 <HAL_RCC_GetSysClockFreq+0xa4>)
 80046d0:	fb02 f303 	mul.w	r3, r2, r3
 80046d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	613b      	str	r3, [r7, #16]
      break;
 80046da:	e002      	b.n	80046e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046dc:	4b05      	ldr	r3, [pc, #20]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80046de:	613b      	str	r3, [r7, #16]
      break;
 80046e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046e2:	693b      	ldr	r3, [r7, #16]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000
 80046f4:	007a1200 	.word	0x007a1200
 80046f8:	08007630 	.word	0x08007630
 80046fc:	08007640 	.word	0x08007640
 8004700:	003d0900 	.word	0x003d0900

08004704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004708:	4b02      	ldr	r3, [pc, #8]	@ (8004714 <HAL_RCC_GetHCLKFreq+0x10>)
 800470a:	681b      	ldr	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr
 8004714:	20000000 	.word	0x20000000

08004718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800471c:	f7ff fff2 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 8004720:	4602      	mov	r2, r0
 8004722:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	0a1b      	lsrs	r3, r3, #8
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	4903      	ldr	r1, [pc, #12]	@ (800473c <HAL_RCC_GetPCLK1Freq+0x24>)
 800472e:	5ccb      	ldrb	r3, [r1, r3]
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004734:	4618      	mov	r0, r3
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40021000 	.word	0x40021000
 800473c:	08007628 	.word	0x08007628

08004740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004744:	f7ff ffde 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	0adb      	lsrs	r3, r3, #11
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4903      	ldr	r1, [pc, #12]	@ (8004764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800475c:	4618      	mov	r0, r3
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40021000 	.word	0x40021000
 8004764:	08007628 	.word	0x08007628

08004768 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004770:	4b0a      	ldr	r3, [pc, #40]	@ (800479c <RCC_Delay+0x34>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a0a      	ldr	r2, [pc, #40]	@ (80047a0 <RCC_Delay+0x38>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	0a5b      	lsrs	r3, r3, #9
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004784:	bf00      	nop
  }
  while (Delay --);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1e5a      	subs	r2, r3, #1
 800478a:	60fa      	str	r2, [r7, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1f9      	bne.n	8004784 <RCC_Delay+0x1c>
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr
 800479c:	20000000 	.word	0x20000000
 80047a0:	10624dd3 	.word	0x10624dd3

080047a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d07d      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80047c0:	2300      	movs	r3, #0
 80047c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10d      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d0:	4b4c      	ldr	r3, [pc, #304]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	4a4b      	ldr	r2, [pc, #300]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047da:	61d3      	str	r3, [r2, #28]
 80047dc:	4b49      	ldr	r3, [pc, #292]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e8:	2301      	movs	r3, #1
 80047ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ec:	4b46      	ldr	r3, [pc, #280]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d118      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f8:	4b43      	ldr	r3, [pc, #268]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a42      	ldr	r2, [pc, #264]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004802:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004804:	f7fd fb28 	bl	8001e58 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480a:	e008      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480c:	f7fd fb24 	bl	8001e58 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	@ 0x64
 8004818:	d901      	bls.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e06d      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481e:	4b3a      	ldr	r3, [pc, #232]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800482a:	4b36      	ldr	r3, [pc, #216]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004832:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d02e      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	429a      	cmp	r2, r3
 8004846:	d027      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004848:	4b2e      	ldr	r3, [pc, #184]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004850:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004852:	4b2e      	ldr	r3, [pc, #184]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004854:	2201      	movs	r2, #1
 8004856:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004858:	4b2c      	ldr	r3, [pc, #176]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800485e:	4a29      	ldr	r2, [pc, #164]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d014      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fd faf3 	bl	8001e58 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004874:	e00a      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004876:	f7fd faef 	bl	8001e58 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004884:	4293      	cmp	r3, r2
 8004886:	d901      	bls.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e036      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488c:	4b1d      	ldr	r3, [pc, #116]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0ee      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004898:	4b1a      	ldr	r3, [pc, #104]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	4917      	ldr	r1, [pc, #92]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048aa:	7dfb      	ldrb	r3, [r7, #23]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d105      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b0:	4b14      	ldr	r3, [pc, #80]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	4a13      	ldr	r2, [pc, #76]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	490b      	ldr	r1, [pc, #44]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d008      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048e6:	4b07      	ldr	r3, [pc, #28]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	4904      	ldr	r1, [pc, #16]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40021000 	.word	0x40021000
 8004908:	40007000 	.word	0x40007000
 800490c:	42420440 	.word	0x42420440

08004910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e041      	b.n	80049a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fd f8a6 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4610      	mov	r0, r2
 8004950:	f000 fa5c 	bl	8004e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d001      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e03a      	b.n	8004a3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a18      	ldr	r2, [pc, #96]	@ (8004a48 <HAL_TIM_Base_Start_IT+0x98>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00e      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x58>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f2:	d009      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x58>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a14      	ldr	r2, [pc, #80]	@ (8004a4c <HAL_TIM_Base_Start_IT+0x9c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x58>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a13      	ldr	r2, [pc, #76]	@ (8004a50 <HAL_TIM_Base_Start_IT+0xa0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d111      	bne.n	8004a2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d010      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2a:	e007      	b.n	8004a3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	40012c00 	.word	0x40012c00
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800

08004a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d020      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0202 	mvn.w	r2, #2
 8004a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f998 	bl	8004dd4 <HAL_TIM_IC_CaptureCallback>
 8004aa4:	e005      	b.n	8004ab2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f98b 	bl	8004dc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f99a 	bl	8004de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d020      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01b      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0204 	mvn.w	r2, #4
 8004ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f972 	bl	8004dd4 <HAL_TIM_IC_CaptureCallback>
 8004af0:	e005      	b.n	8004afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f965 	bl	8004dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f974 	bl	8004de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d020      	beq.n	8004b50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01b      	beq.n	8004b50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0208 	mvn.w	r2, #8
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2204      	movs	r2, #4
 8004b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f94c 	bl	8004dd4 <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f93f 	bl	8004dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f94e 	bl	8004de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 0310 	and.w	r3, r3, #16
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d020      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01b      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0210 	mvn.w	r2, #16
 8004b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2208      	movs	r2, #8
 8004b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f926 	bl	8004dd4 <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f919 	bl	8004dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f928 	bl	8004de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00c      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0201 	mvn.w	r2, #1
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fc fc80 	bl	80014c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00c      	beq.n	8004be4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d007      	beq.n	8004be4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fa7f 	bl	80050e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00c      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f8f8 	bl	8004df8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00c      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0220 	mvn.w	r2, #32
 8004c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fa52 	bl	80050d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_TIM_ConfigClockSource+0x1c>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e0b4      	b.n	8004dba <HAL_TIM_ConfigClockSource+0x186>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c88:	d03e      	beq.n	8004d08 <HAL_TIM_ConfigClockSource+0xd4>
 8004c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c8e:	f200 8087 	bhi.w	8004da0 <HAL_TIM_ConfigClockSource+0x16c>
 8004c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c96:	f000 8086 	beq.w	8004da6 <HAL_TIM_ConfigClockSource+0x172>
 8004c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c9e:	d87f      	bhi.n	8004da0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca0:	2b70      	cmp	r3, #112	@ 0x70
 8004ca2:	d01a      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0xa6>
 8004ca4:	2b70      	cmp	r3, #112	@ 0x70
 8004ca6:	d87b      	bhi.n	8004da0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca8:	2b60      	cmp	r3, #96	@ 0x60
 8004caa:	d050      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x11a>
 8004cac:	2b60      	cmp	r3, #96	@ 0x60
 8004cae:	d877      	bhi.n	8004da0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb0:	2b50      	cmp	r3, #80	@ 0x50
 8004cb2:	d03c      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0xfa>
 8004cb4:	2b50      	cmp	r3, #80	@ 0x50
 8004cb6:	d873      	bhi.n	8004da0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb8:	2b40      	cmp	r3, #64	@ 0x40
 8004cba:	d058      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x13a>
 8004cbc:	2b40      	cmp	r3, #64	@ 0x40
 8004cbe:	d86f      	bhi.n	8004da0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b30      	cmp	r3, #48	@ 0x30
 8004cc2:	d064      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x15a>
 8004cc4:	2b30      	cmp	r3, #48	@ 0x30
 8004cc6:	d86b      	bhi.n	8004da0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d060      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x15a>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d867      	bhi.n	8004da0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d05c      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x15a>
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d05a      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x15a>
 8004cd8:	e062      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cea:	f000 f974 	bl	8004fd6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	609a      	str	r2, [r3, #8]
      break;
 8004d06:	e04f      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d18:	f000 f95d 	bl	8004fd6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d2a:	609a      	str	r2, [r3, #8]
      break;
 8004d2c:	e03c      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f000 f8d4 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2150      	movs	r1, #80	@ 0x50
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f92b 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 8004d4c:	e02c      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f000 f8f2 	bl	8004f44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2160      	movs	r1, #96	@ 0x60
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f91b 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 8004d6c:	e01c      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f000 f8b4 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2140      	movs	r1, #64	@ 0x40
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f90b 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 8004d8c:	e00c      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f000 f902 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 8004d9e:	e003      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
      break;
 8004da4:	e000      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004da6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr
	...

08004e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8004edc <TIM_Base_SetConfig+0xd0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00b      	beq.n	8004e3c <TIM_Base_SetConfig+0x30>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e2a:	d007      	beq.n	8004e3c <TIM_Base_SetConfig+0x30>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ee0 <TIM_Base_SetConfig+0xd4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <TIM_Base_SetConfig+0x30>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a2b      	ldr	r2, [pc, #172]	@ (8004ee4 <TIM_Base_SetConfig+0xd8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d108      	bne.n	8004e4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a22      	ldr	r2, [pc, #136]	@ (8004edc <TIM_Base_SetConfig+0xd0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_Base_SetConfig+0x62>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e5c:	d007      	beq.n	8004e6e <TIM_Base_SetConfig+0x62>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee0 <TIM_Base_SetConfig+0xd4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_Base_SetConfig+0x62>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee4 <TIM_Base_SetConfig+0xd8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d108      	bne.n	8004e80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8004edc <TIM_Base_SetConfig+0xd0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d103      	bne.n	8004eb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f023 0201 	bic.w	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	611a      	str	r2, [r3, #16]
  }
}
 8004ed2:	bf00      	nop
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr
 8004edc:	40012c00 	.word	0x40012c00
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800

08004ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 030a 	bic.w	r3, r3, #10
 8004f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f023 0210 	bic.w	r2, r3, #16
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	031b      	lsls	r3, r3, #12
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	621a      	str	r2, [r3, #32]
}
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr

08004fa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f043 0307 	orr.w	r3, r3, #7
 8004fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	609a      	str	r2, [r3, #8]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr

08004fd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b087      	sub	sp, #28
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
 8004fe2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	021a      	lsls	r2, r3, #8
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	609a      	str	r2, [r3, #8]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr

08005014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005028:	2302      	movs	r3, #2
 800502a:	e046      	b.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005052:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a16      	ldr	r2, [pc, #88]	@ (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00e      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005078:	d009      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a12      	ldr	r2, [pc, #72]	@ (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d004      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a10      	ldr	r2, [pc, #64]	@ (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d10c      	bne.n	80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	4313      	orrs	r3, r2
 800509e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr
 80050c4:	40012c00 	.word	0x40012c00
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800

080050d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr

080050e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e042      	b.n	800518c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d106      	bne.n	8005120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fc fcd8 	bl	8001ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2224      	movs	r2, #36	@ 0x24
 8005124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 fd63 	bl	8005c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800514c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800515c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800516c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08a      	sub	sp, #40	@ 0x28
 8005198:	af02      	add	r7, sp, #8
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	4613      	mov	r3, r2
 80051a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d175      	bne.n	80052a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_UART_Transmit+0x2c>
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e06e      	b.n	80052a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2221      	movs	r2, #33	@ 0x21
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051d2:	f7fc fe41 	bl	8001e58 <HAL_GetTick>
 80051d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	88fa      	ldrh	r2, [r7, #6]
 80051dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	88fa      	ldrh	r2, [r7, #6]
 80051e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ec:	d108      	bne.n	8005200 <HAL_UART_Transmit+0x6c>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d104      	bne.n	8005200 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	e003      	b.n	8005208 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005204:	2300      	movs	r3, #0
 8005206:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005208:	e02e      	b.n	8005268 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2200      	movs	r2, #0
 8005212:	2180      	movs	r1, #128	@ 0x80
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 fb01 	bl	800581c <UART_WaitOnFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e03a      	b.n	80052a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10b      	bne.n	800524a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005240:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	3302      	adds	r3, #2
 8005246:	61bb      	str	r3, [r7, #24]
 8005248:	e007      	b.n	800525a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	781a      	ldrb	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	3301      	adds	r3, #1
 8005258:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1cb      	bne.n	800520a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2200      	movs	r2, #0
 800527a:	2140      	movs	r1, #64	@ 0x40
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 facd 	bl	800581c <UART_WaitOnFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e006      	b.n	80052a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	e000      	b.n	80052a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052a0:	2302      	movs	r3, #2
  }
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3720      	adds	r7, #32
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b0ba      	sub	sp, #232	@ 0xe8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80052d8:	2300      	movs	r3, #0
 80052da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80052ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10f      	bne.n	8005312 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d009      	beq.n	8005312 <HAL_UART_IRQHandler+0x66>
 80052fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fbbc 	bl	8005a88 <UART_Receive_IT>
      return;
 8005310:	e25b      	b.n	80057ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 80de 	beq.w	80054d8 <HAL_UART_IRQHandler+0x22c>
 800531c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d106      	bne.n	8005336 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800532c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 80d1 	beq.w	80054d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <HAL_UART_IRQHandler+0xae>
 8005342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005352:	f043 0201 	orr.w	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800535a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00b      	beq.n	800537e <HAL_UART_IRQHandler+0xd2>
 8005366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005376:	f043 0202 	orr.w	r2, r3, #2
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800537e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00b      	beq.n	80053a2 <HAL_UART_IRQHandler+0xf6>
 800538a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d005      	beq.n	80053a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539a:	f043 0204 	orr.w	r2, r3, #4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d011      	beq.n	80053d2 <HAL_UART_IRQHandler+0x126>
 80053ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d105      	bne.n	80053c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ca:	f043 0208 	orr.w	r2, r3, #8
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 81f2 	beq.w	80057c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_UART_IRQHandler+0x14e>
 80053e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fb47 	bl	8005a88 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b00      	cmp	r3, #0
 800541c:	d103      	bne.n	8005426 <HAL_UART_IRQHandler+0x17a>
 800541e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005422:	2b00      	cmp	r3, #0
 8005424:	d04f      	beq.n	80054c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fa51 	bl	80058ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d041      	beq.n	80054be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3314      	adds	r3, #20
 8005440:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005444:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005448:	e853 3f00 	ldrex	r3, [r3]
 800544c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005450:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005454:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005458:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3314      	adds	r3, #20
 8005462:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005466:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800546a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005472:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005476:	e841 2300 	strex	r3, r2, [r1]
 800547a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800547e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1d9      	bne.n	800543a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d013      	beq.n	80054b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005492:	4a7e      	ldr	r2, [pc, #504]	@ (800568c <HAL_UART_IRQHandler+0x3e0>)
 8005494:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549a:	4618      	mov	r0, r3
 800549c:	f7fd f978 	bl	8002790 <HAL_DMA_Abort_IT>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d016      	beq.n	80054d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80054b0:	4610      	mov	r0, r2
 80054b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b4:	e00e      	b.n	80054d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f99c 	bl	80057f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054bc:	e00a      	b.n	80054d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f998 	bl	80057f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c4:	e006      	b.n	80054d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f994 	bl	80057f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80054d2:	e175      	b.n	80057c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d4:	bf00      	nop
    return;
 80054d6:	e173      	b.n	80057c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054dc:	2b01      	cmp	r3, #1
 80054de:	f040 814f 	bne.w	8005780 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 8148 	beq.w	8005780 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f4:	f003 0310 	and.w	r3, r3, #16
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 8141 	beq.w	8005780 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 80b6 	beq.w	8005690 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005530:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 8145 	beq.w	80057c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800553e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005542:	429a      	cmp	r2, r3
 8005544:	f080 813e 	bcs.w	80057c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800554e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	2b20      	cmp	r3, #32
 8005558:	f000 8088 	beq.w	800566c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800556a:	e853 3f00 	ldrex	r3, [r3]
 800556e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005572:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005576:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800557a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	330c      	adds	r3, #12
 8005584:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005588:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800558c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005594:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005598:	e841 2300 	strex	r3, r2, [r1]
 800559c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1d9      	bne.n	800555c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3314      	adds	r3, #20
 80055ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055ba:	f023 0301 	bic.w	r3, r3, #1
 80055be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3314      	adds	r3, #20
 80055c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055cc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e1      	bne.n	80055a8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3314      	adds	r3, #20
 80055ea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3314      	adds	r3, #20
 8005604:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005608:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800560a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800560e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005616:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e3      	bne.n	80055e4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	330c      	adds	r3, #12
 8005630:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800563a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800563c:	f023 0310 	bic.w	r3, r3, #16
 8005640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800564e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005650:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005654:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005656:	e841 2300 	strex	r3, r2, [r1]
 800565a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800565c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1e3      	bne.n	800562a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005666:	4618      	mov	r0, r3
 8005668:	f7fd f857 	bl	800271a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800567a:	b29b      	uxth	r3, r3
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	b29b      	uxth	r3, r3
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f8bf 	bl	8005806 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005688:	e09c      	b.n	80057c4 <HAL_UART_IRQHandler+0x518>
 800568a:	bf00      	nop
 800568c:	08005993 	.word	0x08005993
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005698:	b29b      	uxth	r3, r3
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 808e 	beq.w	80057c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80056ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 8089 	beq.w	80057c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	330c      	adds	r3, #12
 80056bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	330c      	adds	r3, #12
 80056d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80056da:	647a      	str	r2, [r7, #68]	@ 0x44
 80056dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e3      	bne.n	80056b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3314      	adds	r3, #20
 80056f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	623b      	str	r3, [r7, #32]
   return(result);
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3314      	adds	r3, #20
 800570e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005712:	633a      	str	r2, [r7, #48]	@ 0x30
 8005714:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e3      	bne.n	80056ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	330c      	adds	r3, #12
 800573a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	e853 3f00 	ldrex	r3, [r3]
 8005742:	60fb      	str	r3, [r7, #12]
   return(result);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0310 	bic.w	r3, r3, #16
 800574a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	330c      	adds	r3, #12
 8005754:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005758:	61fa      	str	r2, [r7, #28]
 800575a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	69b9      	ldr	r1, [r7, #24]
 800575e:	69fa      	ldr	r2, [r7, #28]
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	617b      	str	r3, [r7, #20]
   return(result);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e3      	bne.n	8005734 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005772:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005776:	4619      	mov	r1, r3
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f844 	bl	8005806 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800577e:	e023      	b.n	80057c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005788:	2b00      	cmp	r3, #0
 800578a:	d009      	beq.n	80057a0 <HAL_UART_IRQHandler+0x4f4>
 800578c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f90e 	bl	80059ba <UART_Transmit_IT>
    return;
 800579e:	e014      	b.n	80057ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00e      	beq.n	80057ca <HAL_UART_IRQHandler+0x51e>
 80057ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d008      	beq.n	80057ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f94d 	bl	8005a58 <UART_EndTransmit_IT>
    return;
 80057be:	e004      	b.n	80057ca <HAL_UART_IRQHandler+0x51e>
    return;
 80057c0:	bf00      	nop
 80057c2:	e002      	b.n	80057ca <HAL_UART_IRQHandler+0x51e>
      return;
 80057c4:	bf00      	nop
 80057c6:	e000      	b.n	80057ca <HAL_UART_IRQHandler+0x51e>
      return;
 80057c8:	bf00      	nop
  }
}
 80057ca:	37e8      	adds	r7, #232	@ 0xe8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr

080057e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr

080057f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	bc80      	pop	{r7}
 8005804:	4770      	bx	lr

08005806 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	460b      	mov	r3, r1
 8005810:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr

0800581c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800582c:	e03b      	b.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d037      	beq.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005836:	f7fc fb0f 	bl	8001e58 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	6a3a      	ldr	r2, [r7, #32]
 8005842:	429a      	cmp	r2, r3
 8005844:	d302      	bcc.n	800584c <UART_WaitOnFlagUntilTimeout+0x30>
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e03a      	b.n	80058c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d023      	beq.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b80      	cmp	r3, #128	@ 0x80
 8005862:	d020      	beq.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b40      	cmp	r3, #64	@ 0x40
 8005868:	d01d      	beq.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b08      	cmp	r3, #8
 8005876:	d116      	bne.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 f81d 	bl	80058ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2208      	movs	r2, #8
 8005898:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e00f      	b.n	80058c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4013      	ands	r3, r2
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	bf0c      	ite	eq
 80058b6:	2301      	moveq	r3, #1
 80058b8:	2300      	movne	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d0b4      	beq.n	800582e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b095      	sub	sp, #84	@ 0x54
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	330c      	adds	r3, #12
 80058f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80058f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e5      	bne.n	80058d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3314      	adds	r3, #20
 8005910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	e853 3f00 	ldrex	r3, [r3]
 8005918:	61fb      	str	r3, [r7, #28]
   return(result);
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3314      	adds	r3, #20
 8005928:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800592a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800592c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e5      	bne.n	800590a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005942:	2b01      	cmp	r3, #1
 8005944:	d119      	bne.n	800597a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330c      	adds	r3, #12
 800594c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	60bb      	str	r3, [r7, #8]
   return(result);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f023 0310 	bic.w	r3, r3, #16
 800595c:	647b      	str	r3, [r7, #68]	@ 0x44
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005966:	61ba      	str	r2, [r7, #24]
 8005968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6979      	ldr	r1, [r7, #20]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	613b      	str	r3, [r7, #16]
   return(result);
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e5      	bne.n	8005946 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005988:	bf00      	nop
 800598a:	3754      	adds	r7, #84	@ 0x54
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr

08005992 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f7ff ff21 	bl	80057f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b21      	cmp	r3, #33	@ 0x21
 80059cc:	d13e      	bne.n	8005a4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d6:	d114      	bne.n	8005a02 <UART_Transmit_IT+0x48>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d110      	bne.n	8005a02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	1c9a      	adds	r2, r3, #2
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	621a      	str	r2, [r3, #32]
 8005a00:	e008      	b.n	8005a14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	1c59      	adds	r1, r3, #1
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6211      	str	r1, [r2, #32]
 8005a0c:	781a      	ldrb	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	4619      	mov	r1, r3
 8005a22:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10f      	bne.n	8005a48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e000      	b.n	8005a4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a4c:	2302      	movs	r3, #2
  }
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr

08005a58 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a6e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff fea9 	bl	80057d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08c      	sub	sp, #48	@ 0x30
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b22      	cmp	r3, #34	@ 0x22
 8005a9a:	f040 80ae 	bne.w	8005bfa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa6:	d117      	bne.n	8005ad8 <UART_Receive_IT+0x50>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d113      	bne.n	8005ad8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad0:	1c9a      	adds	r2, r3, #2
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ad6:	e026      	b.n	8005b26 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aea:	d007      	beq.n	8005afc <UART_Receive_IT+0x74>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10a      	bne.n	8005b0a <UART_Receive_IT+0x82>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	e008      	b.n	8005b1c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	4619      	mov	r1, r3
 8005b34:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d15d      	bne.n	8005bf6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0220 	bic.w	r2, r2, #32
 8005b48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695a      	ldr	r2, [r3, #20]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0201 	bic.w	r2, r2, #1
 8005b68:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d135      	bne.n	8005bec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	613b      	str	r3, [r7, #16]
   return(result);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f023 0310 	bic.w	r3, r3, #16
 8005b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba6:	623a      	str	r2, [r7, #32]
 8005ba8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	69f9      	ldr	r1, [r7, #28]
 8005bac:	6a3a      	ldr	r2, [r7, #32]
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b10      	cmp	r3, #16
 8005bc6:	d10a      	bne.n	8005bde <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7ff fe0e 	bl	8005806 <HAL_UARTEx_RxEventCallback>
 8005bea:	e002      	b.n	8005bf2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff fdf8 	bl	80057e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e002      	b.n	8005bfc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	e000      	b.n	8005bfc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005bfa:	2302      	movs	r3, #2
  }
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3730      	adds	r7, #48	@ 0x30
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005c3e:	f023 030c 	bic.w	r3, r3, #12
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a2c      	ldr	r2, [pc, #176]	@ (8005d18 <UART_SetConfig+0x114>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d103      	bne.n	8005c74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c6c:	f7fe fd68 	bl	8004740 <HAL_RCC_GetPCLK2Freq>
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	e002      	b.n	8005c7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c74:	f7fe fd50 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8005c78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	009a      	lsls	r2, r3, #2
 8005c84:	441a      	add	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	4a22      	ldr	r2, [pc, #136]	@ (8005d1c <UART_SetConfig+0x118>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	0119      	lsls	r1, r3, #4
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009a      	lsls	r2, r3, #2
 8005ca4:	441a      	add	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d1c <UART_SetConfig+0x118>)
 8005cb2:	fba3 0302 	umull	r0, r3, r3, r2
 8005cb6:	095b      	lsrs	r3, r3, #5
 8005cb8:	2064      	movs	r0, #100	@ 0x64
 8005cba:	fb00 f303 	mul.w	r3, r0, r3
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	3332      	adds	r3, #50	@ 0x32
 8005cc4:	4a15      	ldr	r2, [pc, #84]	@ (8005d1c <UART_SetConfig+0x118>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	095b      	lsrs	r3, r3, #5
 8005ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cd0:	4419      	add	r1, r3
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	009a      	lsls	r2, r3, #2
 8005cdc:	441a      	add	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d1c <UART_SetConfig+0x118>)
 8005cea:	fba3 0302 	umull	r0, r3, r3, r2
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	2064      	movs	r0, #100	@ 0x64
 8005cf2:	fb00 f303 	mul.w	r3, r0, r3
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	3332      	adds	r3, #50	@ 0x32
 8005cfc:	4a07      	ldr	r2, [pc, #28]	@ (8005d1c <UART_SetConfig+0x118>)
 8005cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	f003 020f 	and.w	r2, r3, #15
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40013800 	.word	0x40013800
 8005d1c:	51eb851f 	.word	0x51eb851f

08005d20 <sniprintf>:
 8005d20:	b40c      	push	{r2, r3}
 8005d22:	b530      	push	{r4, r5, lr}
 8005d24:	4b17      	ldr	r3, [pc, #92]	@ (8005d84 <sniprintf+0x64>)
 8005d26:	1e0c      	subs	r4, r1, #0
 8005d28:	681d      	ldr	r5, [r3, #0]
 8005d2a:	b09d      	sub	sp, #116	@ 0x74
 8005d2c:	da08      	bge.n	8005d40 <sniprintf+0x20>
 8005d2e:	238b      	movs	r3, #139	@ 0x8b
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	602b      	str	r3, [r5, #0]
 8005d36:	b01d      	add	sp, #116	@ 0x74
 8005d38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d3c:	b002      	add	sp, #8
 8005d3e:	4770      	bx	lr
 8005d40:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005d44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005d48:	bf0c      	ite	eq
 8005d4a:	4623      	moveq	r3, r4
 8005d4c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005d50:	9304      	str	r3, [sp, #16]
 8005d52:	9307      	str	r3, [sp, #28]
 8005d54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d58:	9002      	str	r0, [sp, #8]
 8005d5a:	9006      	str	r0, [sp, #24]
 8005d5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005d60:	4628      	mov	r0, r5
 8005d62:	ab21      	add	r3, sp, #132	@ 0x84
 8005d64:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d66:	a902      	add	r1, sp, #8
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	f000 f9b3 	bl	80060d4 <_svfiprintf_r>
 8005d6e:	1c43      	adds	r3, r0, #1
 8005d70:	bfbc      	itt	lt
 8005d72:	238b      	movlt	r3, #139	@ 0x8b
 8005d74:	602b      	strlt	r3, [r5, #0]
 8005d76:	2c00      	cmp	r4, #0
 8005d78:	d0dd      	beq.n	8005d36 <sniprintf+0x16>
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	9b02      	ldr	r3, [sp, #8]
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e7d9      	b.n	8005d36 <sniprintf+0x16>
 8005d82:	bf00      	nop
 8005d84:	2000000c 	.word	0x2000000c

08005d88 <siprintf>:
 8005d88:	b40e      	push	{r1, r2, r3}
 8005d8a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d8e:	b500      	push	{lr}
 8005d90:	b09c      	sub	sp, #112	@ 0x70
 8005d92:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d94:	9002      	str	r0, [sp, #8]
 8005d96:	9006      	str	r0, [sp, #24]
 8005d98:	9107      	str	r1, [sp, #28]
 8005d9a:	9104      	str	r1, [sp, #16]
 8005d9c:	4808      	ldr	r0, [pc, #32]	@ (8005dc0 <siprintf+0x38>)
 8005d9e:	4909      	ldr	r1, [pc, #36]	@ (8005dc4 <siprintf+0x3c>)
 8005da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005da4:	9105      	str	r1, [sp, #20]
 8005da6:	6800      	ldr	r0, [r0, #0]
 8005da8:	a902      	add	r1, sp, #8
 8005daa:	9301      	str	r3, [sp, #4]
 8005dac:	f000 f992 	bl	80060d4 <_svfiprintf_r>
 8005db0:	2200      	movs	r2, #0
 8005db2:	9b02      	ldr	r3, [sp, #8]
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	b01c      	add	sp, #112	@ 0x70
 8005db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dbc:	b003      	add	sp, #12
 8005dbe:	4770      	bx	lr
 8005dc0:	2000000c 	.word	0x2000000c
 8005dc4:	ffff0208 	.word	0xffff0208

08005dc8 <memset>:
 8005dc8:	4603      	mov	r3, r0
 8005dca:	4402      	add	r2, r0
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d100      	bne.n	8005dd2 <memset+0xa>
 8005dd0:	4770      	bx	lr
 8005dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005dd6:	e7f9      	b.n	8005dcc <memset+0x4>

08005dd8 <__errno>:
 8005dd8:	4b01      	ldr	r3, [pc, #4]	@ (8005de0 <__errno+0x8>)
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	2000000c 	.word	0x2000000c

08005de4 <__libc_init_array>:
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	2600      	movs	r6, #0
 8005de8:	4d0c      	ldr	r5, [pc, #48]	@ (8005e1c <__libc_init_array+0x38>)
 8005dea:	4c0d      	ldr	r4, [pc, #52]	@ (8005e20 <__libc_init_array+0x3c>)
 8005dec:	1b64      	subs	r4, r4, r5
 8005dee:	10a4      	asrs	r4, r4, #2
 8005df0:	42a6      	cmp	r6, r4
 8005df2:	d109      	bne.n	8005e08 <__libc_init_array+0x24>
 8005df4:	f001 fbcc 	bl	8007590 <_init>
 8005df8:	2600      	movs	r6, #0
 8005dfa:	4d0a      	ldr	r5, [pc, #40]	@ (8005e24 <__libc_init_array+0x40>)
 8005dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8005e28 <__libc_init_array+0x44>)
 8005dfe:	1b64      	subs	r4, r4, r5
 8005e00:	10a4      	asrs	r4, r4, #2
 8005e02:	42a6      	cmp	r6, r4
 8005e04:	d105      	bne.n	8005e12 <__libc_init_array+0x2e>
 8005e06:	bd70      	pop	{r4, r5, r6, pc}
 8005e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e0c:	4798      	blx	r3
 8005e0e:	3601      	adds	r6, #1
 8005e10:	e7ee      	b.n	8005df0 <__libc_init_array+0xc>
 8005e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e16:	4798      	blx	r3
 8005e18:	3601      	adds	r6, #1
 8005e1a:	e7f2      	b.n	8005e02 <__libc_init_array+0x1e>
 8005e1c:	080076b0 	.word	0x080076b0
 8005e20:	080076b0 	.word	0x080076b0
 8005e24:	080076b0 	.word	0x080076b0
 8005e28:	080076b4 	.word	0x080076b4

08005e2c <__retarget_lock_acquire_recursive>:
 8005e2c:	4770      	bx	lr

08005e2e <__retarget_lock_release_recursive>:
 8005e2e:	4770      	bx	lr

08005e30 <_free_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4605      	mov	r5, r0
 8005e34:	2900      	cmp	r1, #0
 8005e36:	d040      	beq.n	8005eba <_free_r+0x8a>
 8005e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e3c:	1f0c      	subs	r4, r1, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	bfb8      	it	lt
 8005e42:	18e4      	addlt	r4, r4, r3
 8005e44:	f000 f8de 	bl	8006004 <__malloc_lock>
 8005e48:	4a1c      	ldr	r2, [pc, #112]	@ (8005ebc <_free_r+0x8c>)
 8005e4a:	6813      	ldr	r3, [r2, #0]
 8005e4c:	b933      	cbnz	r3, 8005e5c <_free_r+0x2c>
 8005e4e:	6063      	str	r3, [r4, #4]
 8005e50:	6014      	str	r4, [r2, #0]
 8005e52:	4628      	mov	r0, r5
 8005e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e58:	f000 b8da 	b.w	8006010 <__malloc_unlock>
 8005e5c:	42a3      	cmp	r3, r4
 8005e5e:	d908      	bls.n	8005e72 <_free_r+0x42>
 8005e60:	6820      	ldr	r0, [r4, #0]
 8005e62:	1821      	adds	r1, r4, r0
 8005e64:	428b      	cmp	r3, r1
 8005e66:	bf01      	itttt	eq
 8005e68:	6819      	ldreq	r1, [r3, #0]
 8005e6a:	685b      	ldreq	r3, [r3, #4]
 8005e6c:	1809      	addeq	r1, r1, r0
 8005e6e:	6021      	streq	r1, [r4, #0]
 8005e70:	e7ed      	b.n	8005e4e <_free_r+0x1e>
 8005e72:	461a      	mov	r2, r3
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	b10b      	cbz	r3, 8005e7c <_free_r+0x4c>
 8005e78:	42a3      	cmp	r3, r4
 8005e7a:	d9fa      	bls.n	8005e72 <_free_r+0x42>
 8005e7c:	6811      	ldr	r1, [r2, #0]
 8005e7e:	1850      	adds	r0, r2, r1
 8005e80:	42a0      	cmp	r0, r4
 8005e82:	d10b      	bne.n	8005e9c <_free_r+0x6c>
 8005e84:	6820      	ldr	r0, [r4, #0]
 8005e86:	4401      	add	r1, r0
 8005e88:	1850      	adds	r0, r2, r1
 8005e8a:	4283      	cmp	r3, r0
 8005e8c:	6011      	str	r1, [r2, #0]
 8005e8e:	d1e0      	bne.n	8005e52 <_free_r+0x22>
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	4408      	add	r0, r1
 8005e96:	6010      	str	r0, [r2, #0]
 8005e98:	6053      	str	r3, [r2, #4]
 8005e9a:	e7da      	b.n	8005e52 <_free_r+0x22>
 8005e9c:	d902      	bls.n	8005ea4 <_free_r+0x74>
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	602b      	str	r3, [r5, #0]
 8005ea2:	e7d6      	b.n	8005e52 <_free_r+0x22>
 8005ea4:	6820      	ldr	r0, [r4, #0]
 8005ea6:	1821      	adds	r1, r4, r0
 8005ea8:	428b      	cmp	r3, r1
 8005eaa:	bf01      	itttt	eq
 8005eac:	6819      	ldreq	r1, [r3, #0]
 8005eae:	685b      	ldreq	r3, [r3, #4]
 8005eb0:	1809      	addeq	r1, r1, r0
 8005eb2:	6021      	streq	r1, [r4, #0]
 8005eb4:	6063      	str	r3, [r4, #4]
 8005eb6:	6054      	str	r4, [r2, #4]
 8005eb8:	e7cb      	b.n	8005e52 <_free_r+0x22>
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	20000390 	.word	0x20000390

08005ec0 <sbrk_aligned>:
 8005ec0:	b570      	push	{r4, r5, r6, lr}
 8005ec2:	4e0f      	ldr	r6, [pc, #60]	@ (8005f00 <sbrk_aligned+0x40>)
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	6831      	ldr	r1, [r6, #0]
 8005ec8:	4605      	mov	r5, r0
 8005eca:	b911      	cbnz	r1, 8005ed2 <sbrk_aligned+0x12>
 8005ecc:	f000 fbaa 	bl	8006624 <_sbrk_r>
 8005ed0:	6030      	str	r0, [r6, #0]
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f000 fba5 	bl	8006624 <_sbrk_r>
 8005eda:	1c43      	adds	r3, r0, #1
 8005edc:	d103      	bne.n	8005ee6 <sbrk_aligned+0x26>
 8005ede:	f04f 34ff 	mov.w	r4, #4294967295
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	bd70      	pop	{r4, r5, r6, pc}
 8005ee6:	1cc4      	adds	r4, r0, #3
 8005ee8:	f024 0403 	bic.w	r4, r4, #3
 8005eec:	42a0      	cmp	r0, r4
 8005eee:	d0f8      	beq.n	8005ee2 <sbrk_aligned+0x22>
 8005ef0:	1a21      	subs	r1, r4, r0
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f000 fb96 	bl	8006624 <_sbrk_r>
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d1f2      	bne.n	8005ee2 <sbrk_aligned+0x22>
 8005efc:	e7ef      	b.n	8005ede <sbrk_aligned+0x1e>
 8005efe:	bf00      	nop
 8005f00:	2000038c 	.word	0x2000038c

08005f04 <_malloc_r>:
 8005f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f08:	1ccd      	adds	r5, r1, #3
 8005f0a:	f025 0503 	bic.w	r5, r5, #3
 8005f0e:	3508      	adds	r5, #8
 8005f10:	2d0c      	cmp	r5, #12
 8005f12:	bf38      	it	cc
 8005f14:	250c      	movcc	r5, #12
 8005f16:	2d00      	cmp	r5, #0
 8005f18:	4606      	mov	r6, r0
 8005f1a:	db01      	blt.n	8005f20 <_malloc_r+0x1c>
 8005f1c:	42a9      	cmp	r1, r5
 8005f1e:	d904      	bls.n	8005f2a <_malloc_r+0x26>
 8005f20:	230c      	movs	r3, #12
 8005f22:	6033      	str	r3, [r6, #0]
 8005f24:	2000      	movs	r0, #0
 8005f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006000 <_malloc_r+0xfc>
 8005f2e:	f000 f869 	bl	8006004 <__malloc_lock>
 8005f32:	f8d8 3000 	ldr.w	r3, [r8]
 8005f36:	461c      	mov	r4, r3
 8005f38:	bb44      	cbnz	r4, 8005f8c <_malloc_r+0x88>
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f7ff ffbf 	bl	8005ec0 <sbrk_aligned>
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	4604      	mov	r4, r0
 8005f46:	d158      	bne.n	8005ffa <_malloc_r+0xf6>
 8005f48:	f8d8 4000 	ldr.w	r4, [r8]
 8005f4c:	4627      	mov	r7, r4
 8005f4e:	2f00      	cmp	r7, #0
 8005f50:	d143      	bne.n	8005fda <_malloc_r+0xd6>
 8005f52:	2c00      	cmp	r4, #0
 8005f54:	d04b      	beq.n	8005fee <_malloc_r+0xea>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	4639      	mov	r1, r7
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	eb04 0903 	add.w	r9, r4, r3
 8005f60:	f000 fb60 	bl	8006624 <_sbrk_r>
 8005f64:	4581      	cmp	r9, r0
 8005f66:	d142      	bne.n	8005fee <_malloc_r+0xea>
 8005f68:	6821      	ldr	r1, [r4, #0]
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	1a6d      	subs	r5, r5, r1
 8005f6e:	4629      	mov	r1, r5
 8005f70:	f7ff ffa6 	bl	8005ec0 <sbrk_aligned>
 8005f74:	3001      	adds	r0, #1
 8005f76:	d03a      	beq.n	8005fee <_malloc_r+0xea>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	442b      	add	r3, r5
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	bb62      	cbnz	r2, 8005fe0 <_malloc_r+0xdc>
 8005f86:	f8c8 7000 	str.w	r7, [r8]
 8005f8a:	e00f      	b.n	8005fac <_malloc_r+0xa8>
 8005f8c:	6822      	ldr	r2, [r4, #0]
 8005f8e:	1b52      	subs	r2, r2, r5
 8005f90:	d420      	bmi.n	8005fd4 <_malloc_r+0xd0>
 8005f92:	2a0b      	cmp	r2, #11
 8005f94:	d917      	bls.n	8005fc6 <_malloc_r+0xc2>
 8005f96:	1961      	adds	r1, r4, r5
 8005f98:	42a3      	cmp	r3, r4
 8005f9a:	6025      	str	r5, [r4, #0]
 8005f9c:	bf18      	it	ne
 8005f9e:	6059      	strne	r1, [r3, #4]
 8005fa0:	6863      	ldr	r3, [r4, #4]
 8005fa2:	bf08      	it	eq
 8005fa4:	f8c8 1000 	streq.w	r1, [r8]
 8005fa8:	5162      	str	r2, [r4, r5]
 8005faa:	604b      	str	r3, [r1, #4]
 8005fac:	4630      	mov	r0, r6
 8005fae:	f000 f82f 	bl	8006010 <__malloc_unlock>
 8005fb2:	f104 000b 	add.w	r0, r4, #11
 8005fb6:	1d23      	adds	r3, r4, #4
 8005fb8:	f020 0007 	bic.w	r0, r0, #7
 8005fbc:	1ac2      	subs	r2, r0, r3
 8005fbe:	bf1c      	itt	ne
 8005fc0:	1a1b      	subne	r3, r3, r0
 8005fc2:	50a3      	strne	r3, [r4, r2]
 8005fc4:	e7af      	b.n	8005f26 <_malloc_r+0x22>
 8005fc6:	6862      	ldr	r2, [r4, #4]
 8005fc8:	42a3      	cmp	r3, r4
 8005fca:	bf0c      	ite	eq
 8005fcc:	f8c8 2000 	streq.w	r2, [r8]
 8005fd0:	605a      	strne	r2, [r3, #4]
 8005fd2:	e7eb      	b.n	8005fac <_malloc_r+0xa8>
 8005fd4:	4623      	mov	r3, r4
 8005fd6:	6864      	ldr	r4, [r4, #4]
 8005fd8:	e7ae      	b.n	8005f38 <_malloc_r+0x34>
 8005fda:	463c      	mov	r4, r7
 8005fdc:	687f      	ldr	r7, [r7, #4]
 8005fde:	e7b6      	b.n	8005f4e <_malloc_r+0x4a>
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	42a3      	cmp	r3, r4
 8005fe6:	d1fb      	bne.n	8005fe0 <_malloc_r+0xdc>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	6053      	str	r3, [r2, #4]
 8005fec:	e7de      	b.n	8005fac <_malloc_r+0xa8>
 8005fee:	230c      	movs	r3, #12
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	6033      	str	r3, [r6, #0]
 8005ff4:	f000 f80c 	bl	8006010 <__malloc_unlock>
 8005ff8:	e794      	b.n	8005f24 <_malloc_r+0x20>
 8005ffa:	6005      	str	r5, [r0, #0]
 8005ffc:	e7d6      	b.n	8005fac <_malloc_r+0xa8>
 8005ffe:	bf00      	nop
 8006000:	20000390 	.word	0x20000390

08006004 <__malloc_lock>:
 8006004:	4801      	ldr	r0, [pc, #4]	@ (800600c <__malloc_lock+0x8>)
 8006006:	f7ff bf11 	b.w	8005e2c <__retarget_lock_acquire_recursive>
 800600a:	bf00      	nop
 800600c:	20000388 	.word	0x20000388

08006010 <__malloc_unlock>:
 8006010:	4801      	ldr	r0, [pc, #4]	@ (8006018 <__malloc_unlock+0x8>)
 8006012:	f7ff bf0c 	b.w	8005e2e <__retarget_lock_release_recursive>
 8006016:	bf00      	nop
 8006018:	20000388 	.word	0x20000388

0800601c <__ssputs_r>:
 800601c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006020:	461f      	mov	r7, r3
 8006022:	688e      	ldr	r6, [r1, #8]
 8006024:	4682      	mov	sl, r0
 8006026:	42be      	cmp	r6, r7
 8006028:	460c      	mov	r4, r1
 800602a:	4690      	mov	r8, r2
 800602c:	680b      	ldr	r3, [r1, #0]
 800602e:	d82d      	bhi.n	800608c <__ssputs_r+0x70>
 8006030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006034:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006038:	d026      	beq.n	8006088 <__ssputs_r+0x6c>
 800603a:	6965      	ldr	r5, [r4, #20]
 800603c:	6909      	ldr	r1, [r1, #16]
 800603e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006042:	eba3 0901 	sub.w	r9, r3, r1
 8006046:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800604a:	1c7b      	adds	r3, r7, #1
 800604c:	444b      	add	r3, r9
 800604e:	106d      	asrs	r5, r5, #1
 8006050:	429d      	cmp	r5, r3
 8006052:	bf38      	it	cc
 8006054:	461d      	movcc	r5, r3
 8006056:	0553      	lsls	r3, r2, #21
 8006058:	d527      	bpl.n	80060aa <__ssputs_r+0x8e>
 800605a:	4629      	mov	r1, r5
 800605c:	f7ff ff52 	bl	8005f04 <_malloc_r>
 8006060:	4606      	mov	r6, r0
 8006062:	b360      	cbz	r0, 80060be <__ssputs_r+0xa2>
 8006064:	464a      	mov	r2, r9
 8006066:	6921      	ldr	r1, [r4, #16]
 8006068:	f000 fafa 	bl	8006660 <memcpy>
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006076:	81a3      	strh	r3, [r4, #12]
 8006078:	6126      	str	r6, [r4, #16]
 800607a:	444e      	add	r6, r9
 800607c:	6026      	str	r6, [r4, #0]
 800607e:	463e      	mov	r6, r7
 8006080:	6165      	str	r5, [r4, #20]
 8006082:	eba5 0509 	sub.w	r5, r5, r9
 8006086:	60a5      	str	r5, [r4, #8]
 8006088:	42be      	cmp	r6, r7
 800608a:	d900      	bls.n	800608e <__ssputs_r+0x72>
 800608c:	463e      	mov	r6, r7
 800608e:	4632      	mov	r2, r6
 8006090:	4641      	mov	r1, r8
 8006092:	6820      	ldr	r0, [r4, #0]
 8006094:	f000 faac 	bl	80065f0 <memmove>
 8006098:	2000      	movs	r0, #0
 800609a:	68a3      	ldr	r3, [r4, #8]
 800609c:	1b9b      	subs	r3, r3, r6
 800609e:	60a3      	str	r3, [r4, #8]
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	4433      	add	r3, r6
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060aa:	462a      	mov	r2, r5
 80060ac:	f000 fae6 	bl	800667c <_realloc_r>
 80060b0:	4606      	mov	r6, r0
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d1e0      	bne.n	8006078 <__ssputs_r+0x5c>
 80060b6:	4650      	mov	r0, sl
 80060b8:	6921      	ldr	r1, [r4, #16]
 80060ba:	f7ff feb9 	bl	8005e30 <_free_r>
 80060be:	230c      	movs	r3, #12
 80060c0:	f8ca 3000 	str.w	r3, [sl]
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060ce:	81a3      	strh	r3, [r4, #12]
 80060d0:	e7e9      	b.n	80060a6 <__ssputs_r+0x8a>
	...

080060d4 <_svfiprintf_r>:
 80060d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	4698      	mov	r8, r3
 80060da:	898b      	ldrh	r3, [r1, #12]
 80060dc:	4607      	mov	r7, r0
 80060de:	061b      	lsls	r3, r3, #24
 80060e0:	460d      	mov	r5, r1
 80060e2:	4614      	mov	r4, r2
 80060e4:	b09d      	sub	sp, #116	@ 0x74
 80060e6:	d510      	bpl.n	800610a <_svfiprintf_r+0x36>
 80060e8:	690b      	ldr	r3, [r1, #16]
 80060ea:	b973      	cbnz	r3, 800610a <_svfiprintf_r+0x36>
 80060ec:	2140      	movs	r1, #64	@ 0x40
 80060ee:	f7ff ff09 	bl	8005f04 <_malloc_r>
 80060f2:	6028      	str	r0, [r5, #0]
 80060f4:	6128      	str	r0, [r5, #16]
 80060f6:	b930      	cbnz	r0, 8006106 <_svfiprintf_r+0x32>
 80060f8:	230c      	movs	r3, #12
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006100:	b01d      	add	sp, #116	@ 0x74
 8006102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006106:	2340      	movs	r3, #64	@ 0x40
 8006108:	616b      	str	r3, [r5, #20]
 800610a:	2300      	movs	r3, #0
 800610c:	9309      	str	r3, [sp, #36]	@ 0x24
 800610e:	2320      	movs	r3, #32
 8006110:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006114:	2330      	movs	r3, #48	@ 0x30
 8006116:	f04f 0901 	mov.w	r9, #1
 800611a:	f8cd 800c 	str.w	r8, [sp, #12]
 800611e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80062b8 <_svfiprintf_r+0x1e4>
 8006122:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006126:	4623      	mov	r3, r4
 8006128:	469a      	mov	sl, r3
 800612a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800612e:	b10a      	cbz	r2, 8006134 <_svfiprintf_r+0x60>
 8006130:	2a25      	cmp	r2, #37	@ 0x25
 8006132:	d1f9      	bne.n	8006128 <_svfiprintf_r+0x54>
 8006134:	ebba 0b04 	subs.w	fp, sl, r4
 8006138:	d00b      	beq.n	8006152 <_svfiprintf_r+0x7e>
 800613a:	465b      	mov	r3, fp
 800613c:	4622      	mov	r2, r4
 800613e:	4629      	mov	r1, r5
 8006140:	4638      	mov	r0, r7
 8006142:	f7ff ff6b 	bl	800601c <__ssputs_r>
 8006146:	3001      	adds	r0, #1
 8006148:	f000 80a7 	beq.w	800629a <_svfiprintf_r+0x1c6>
 800614c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800614e:	445a      	add	r2, fp
 8006150:	9209      	str	r2, [sp, #36]	@ 0x24
 8006152:	f89a 3000 	ldrb.w	r3, [sl]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 809f 	beq.w	800629a <_svfiprintf_r+0x1c6>
 800615c:	2300      	movs	r3, #0
 800615e:	f04f 32ff 	mov.w	r2, #4294967295
 8006162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006166:	f10a 0a01 	add.w	sl, sl, #1
 800616a:	9304      	str	r3, [sp, #16]
 800616c:	9307      	str	r3, [sp, #28]
 800616e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006172:	931a      	str	r3, [sp, #104]	@ 0x68
 8006174:	4654      	mov	r4, sl
 8006176:	2205      	movs	r2, #5
 8006178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800617c:	484e      	ldr	r0, [pc, #312]	@ (80062b8 <_svfiprintf_r+0x1e4>)
 800617e:	f000 fa61 	bl	8006644 <memchr>
 8006182:	9a04      	ldr	r2, [sp, #16]
 8006184:	b9d8      	cbnz	r0, 80061be <_svfiprintf_r+0xea>
 8006186:	06d0      	lsls	r0, r2, #27
 8006188:	bf44      	itt	mi
 800618a:	2320      	movmi	r3, #32
 800618c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006190:	0711      	lsls	r1, r2, #28
 8006192:	bf44      	itt	mi
 8006194:	232b      	movmi	r3, #43	@ 0x2b
 8006196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800619a:	f89a 3000 	ldrb.w	r3, [sl]
 800619e:	2b2a      	cmp	r3, #42	@ 0x2a
 80061a0:	d015      	beq.n	80061ce <_svfiprintf_r+0xfa>
 80061a2:	4654      	mov	r4, sl
 80061a4:	2000      	movs	r0, #0
 80061a6:	f04f 0c0a 	mov.w	ip, #10
 80061aa:	9a07      	ldr	r2, [sp, #28]
 80061ac:	4621      	mov	r1, r4
 80061ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061b2:	3b30      	subs	r3, #48	@ 0x30
 80061b4:	2b09      	cmp	r3, #9
 80061b6:	d94b      	bls.n	8006250 <_svfiprintf_r+0x17c>
 80061b8:	b1b0      	cbz	r0, 80061e8 <_svfiprintf_r+0x114>
 80061ba:	9207      	str	r2, [sp, #28]
 80061bc:	e014      	b.n	80061e8 <_svfiprintf_r+0x114>
 80061be:	eba0 0308 	sub.w	r3, r0, r8
 80061c2:	fa09 f303 	lsl.w	r3, r9, r3
 80061c6:	4313      	orrs	r3, r2
 80061c8:	46a2      	mov	sl, r4
 80061ca:	9304      	str	r3, [sp, #16]
 80061cc:	e7d2      	b.n	8006174 <_svfiprintf_r+0xa0>
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	1d19      	adds	r1, r3, #4
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	9103      	str	r1, [sp, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	bfbb      	ittet	lt
 80061da:	425b      	neglt	r3, r3
 80061dc:	f042 0202 	orrlt.w	r2, r2, #2
 80061e0:	9307      	strge	r3, [sp, #28]
 80061e2:	9307      	strlt	r3, [sp, #28]
 80061e4:	bfb8      	it	lt
 80061e6:	9204      	strlt	r2, [sp, #16]
 80061e8:	7823      	ldrb	r3, [r4, #0]
 80061ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80061ec:	d10a      	bne.n	8006204 <_svfiprintf_r+0x130>
 80061ee:	7863      	ldrb	r3, [r4, #1]
 80061f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80061f2:	d132      	bne.n	800625a <_svfiprintf_r+0x186>
 80061f4:	9b03      	ldr	r3, [sp, #12]
 80061f6:	3402      	adds	r4, #2
 80061f8:	1d1a      	adds	r2, r3, #4
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	9203      	str	r2, [sp, #12]
 80061fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006202:	9305      	str	r3, [sp, #20]
 8006204:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80062bc <_svfiprintf_r+0x1e8>
 8006208:	2203      	movs	r2, #3
 800620a:	4650      	mov	r0, sl
 800620c:	7821      	ldrb	r1, [r4, #0]
 800620e:	f000 fa19 	bl	8006644 <memchr>
 8006212:	b138      	cbz	r0, 8006224 <_svfiprintf_r+0x150>
 8006214:	2240      	movs	r2, #64	@ 0x40
 8006216:	9b04      	ldr	r3, [sp, #16]
 8006218:	eba0 000a 	sub.w	r0, r0, sl
 800621c:	4082      	lsls	r2, r0
 800621e:	4313      	orrs	r3, r2
 8006220:	3401      	adds	r4, #1
 8006222:	9304      	str	r3, [sp, #16]
 8006224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006228:	2206      	movs	r2, #6
 800622a:	4825      	ldr	r0, [pc, #148]	@ (80062c0 <_svfiprintf_r+0x1ec>)
 800622c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006230:	f000 fa08 	bl	8006644 <memchr>
 8006234:	2800      	cmp	r0, #0
 8006236:	d036      	beq.n	80062a6 <_svfiprintf_r+0x1d2>
 8006238:	4b22      	ldr	r3, [pc, #136]	@ (80062c4 <_svfiprintf_r+0x1f0>)
 800623a:	bb1b      	cbnz	r3, 8006284 <_svfiprintf_r+0x1b0>
 800623c:	9b03      	ldr	r3, [sp, #12]
 800623e:	3307      	adds	r3, #7
 8006240:	f023 0307 	bic.w	r3, r3, #7
 8006244:	3308      	adds	r3, #8
 8006246:	9303      	str	r3, [sp, #12]
 8006248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800624a:	4433      	add	r3, r6
 800624c:	9309      	str	r3, [sp, #36]	@ 0x24
 800624e:	e76a      	b.n	8006126 <_svfiprintf_r+0x52>
 8006250:	460c      	mov	r4, r1
 8006252:	2001      	movs	r0, #1
 8006254:	fb0c 3202 	mla	r2, ip, r2, r3
 8006258:	e7a8      	b.n	80061ac <_svfiprintf_r+0xd8>
 800625a:	2300      	movs	r3, #0
 800625c:	f04f 0c0a 	mov.w	ip, #10
 8006260:	4619      	mov	r1, r3
 8006262:	3401      	adds	r4, #1
 8006264:	9305      	str	r3, [sp, #20]
 8006266:	4620      	mov	r0, r4
 8006268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800626c:	3a30      	subs	r2, #48	@ 0x30
 800626e:	2a09      	cmp	r2, #9
 8006270:	d903      	bls.n	800627a <_svfiprintf_r+0x1a6>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0c6      	beq.n	8006204 <_svfiprintf_r+0x130>
 8006276:	9105      	str	r1, [sp, #20]
 8006278:	e7c4      	b.n	8006204 <_svfiprintf_r+0x130>
 800627a:	4604      	mov	r4, r0
 800627c:	2301      	movs	r3, #1
 800627e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006282:	e7f0      	b.n	8006266 <_svfiprintf_r+0x192>
 8006284:	ab03      	add	r3, sp, #12
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	462a      	mov	r2, r5
 800628a:	4638      	mov	r0, r7
 800628c:	4b0e      	ldr	r3, [pc, #56]	@ (80062c8 <_svfiprintf_r+0x1f4>)
 800628e:	a904      	add	r1, sp, #16
 8006290:	f3af 8000 	nop.w
 8006294:	1c42      	adds	r2, r0, #1
 8006296:	4606      	mov	r6, r0
 8006298:	d1d6      	bne.n	8006248 <_svfiprintf_r+0x174>
 800629a:	89ab      	ldrh	r3, [r5, #12]
 800629c:	065b      	lsls	r3, r3, #25
 800629e:	f53f af2d 	bmi.w	80060fc <_svfiprintf_r+0x28>
 80062a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062a4:	e72c      	b.n	8006100 <_svfiprintf_r+0x2c>
 80062a6:	ab03      	add	r3, sp, #12
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	462a      	mov	r2, r5
 80062ac:	4638      	mov	r0, r7
 80062ae:	4b06      	ldr	r3, [pc, #24]	@ (80062c8 <_svfiprintf_r+0x1f4>)
 80062b0:	a904      	add	r1, sp, #16
 80062b2:	f000 f87d 	bl	80063b0 <_printf_i>
 80062b6:	e7ed      	b.n	8006294 <_svfiprintf_r+0x1c0>
 80062b8:	08007642 	.word	0x08007642
 80062bc:	08007648 	.word	0x08007648
 80062c0:	0800764c 	.word	0x0800764c
 80062c4:	00000000 	.word	0x00000000
 80062c8:	0800601d 	.word	0x0800601d

080062cc <_printf_common>:
 80062cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	4616      	mov	r6, r2
 80062d2:	4698      	mov	r8, r3
 80062d4:	688a      	ldr	r2, [r1, #8]
 80062d6:	690b      	ldr	r3, [r1, #16]
 80062d8:	4607      	mov	r7, r0
 80062da:	4293      	cmp	r3, r2
 80062dc:	bfb8      	it	lt
 80062de:	4613      	movlt	r3, r2
 80062e0:	6033      	str	r3, [r6, #0]
 80062e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062e6:	460c      	mov	r4, r1
 80062e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062ec:	b10a      	cbz	r2, 80062f2 <_printf_common+0x26>
 80062ee:	3301      	adds	r3, #1
 80062f0:	6033      	str	r3, [r6, #0]
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	0699      	lsls	r1, r3, #26
 80062f6:	bf42      	ittt	mi
 80062f8:	6833      	ldrmi	r3, [r6, #0]
 80062fa:	3302      	addmi	r3, #2
 80062fc:	6033      	strmi	r3, [r6, #0]
 80062fe:	6825      	ldr	r5, [r4, #0]
 8006300:	f015 0506 	ands.w	r5, r5, #6
 8006304:	d106      	bne.n	8006314 <_printf_common+0x48>
 8006306:	f104 0a19 	add.w	sl, r4, #25
 800630a:	68e3      	ldr	r3, [r4, #12]
 800630c:	6832      	ldr	r2, [r6, #0]
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	42ab      	cmp	r3, r5
 8006312:	dc2b      	bgt.n	800636c <_printf_common+0xa0>
 8006314:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006318:	6822      	ldr	r2, [r4, #0]
 800631a:	3b00      	subs	r3, #0
 800631c:	bf18      	it	ne
 800631e:	2301      	movne	r3, #1
 8006320:	0692      	lsls	r2, r2, #26
 8006322:	d430      	bmi.n	8006386 <_printf_common+0xba>
 8006324:	4641      	mov	r1, r8
 8006326:	4638      	mov	r0, r7
 8006328:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800632c:	47c8      	blx	r9
 800632e:	3001      	adds	r0, #1
 8006330:	d023      	beq.n	800637a <_printf_common+0xae>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	6922      	ldr	r2, [r4, #16]
 8006336:	f003 0306 	and.w	r3, r3, #6
 800633a:	2b04      	cmp	r3, #4
 800633c:	bf14      	ite	ne
 800633e:	2500      	movne	r5, #0
 8006340:	6833      	ldreq	r3, [r6, #0]
 8006342:	f04f 0600 	mov.w	r6, #0
 8006346:	bf08      	it	eq
 8006348:	68e5      	ldreq	r5, [r4, #12]
 800634a:	f104 041a 	add.w	r4, r4, #26
 800634e:	bf08      	it	eq
 8006350:	1aed      	subeq	r5, r5, r3
 8006352:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006356:	bf08      	it	eq
 8006358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800635c:	4293      	cmp	r3, r2
 800635e:	bfc4      	itt	gt
 8006360:	1a9b      	subgt	r3, r3, r2
 8006362:	18ed      	addgt	r5, r5, r3
 8006364:	42b5      	cmp	r5, r6
 8006366:	d11a      	bne.n	800639e <_printf_common+0xd2>
 8006368:	2000      	movs	r0, #0
 800636a:	e008      	b.n	800637e <_printf_common+0xb2>
 800636c:	2301      	movs	r3, #1
 800636e:	4652      	mov	r2, sl
 8006370:	4641      	mov	r1, r8
 8006372:	4638      	mov	r0, r7
 8006374:	47c8      	blx	r9
 8006376:	3001      	adds	r0, #1
 8006378:	d103      	bne.n	8006382 <_printf_common+0xb6>
 800637a:	f04f 30ff 	mov.w	r0, #4294967295
 800637e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006382:	3501      	adds	r5, #1
 8006384:	e7c1      	b.n	800630a <_printf_common+0x3e>
 8006386:	2030      	movs	r0, #48	@ 0x30
 8006388:	18e1      	adds	r1, r4, r3
 800638a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006394:	4422      	add	r2, r4
 8006396:	3302      	adds	r3, #2
 8006398:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800639c:	e7c2      	b.n	8006324 <_printf_common+0x58>
 800639e:	2301      	movs	r3, #1
 80063a0:	4622      	mov	r2, r4
 80063a2:	4641      	mov	r1, r8
 80063a4:	4638      	mov	r0, r7
 80063a6:	47c8      	blx	r9
 80063a8:	3001      	adds	r0, #1
 80063aa:	d0e6      	beq.n	800637a <_printf_common+0xae>
 80063ac:	3601      	adds	r6, #1
 80063ae:	e7d9      	b.n	8006364 <_printf_common+0x98>

080063b0 <_printf_i>:
 80063b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b4:	7e0f      	ldrb	r7, [r1, #24]
 80063b6:	4691      	mov	r9, r2
 80063b8:	2f78      	cmp	r7, #120	@ 0x78
 80063ba:	4680      	mov	r8, r0
 80063bc:	460c      	mov	r4, r1
 80063be:	469a      	mov	sl, r3
 80063c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063c6:	d807      	bhi.n	80063d8 <_printf_i+0x28>
 80063c8:	2f62      	cmp	r7, #98	@ 0x62
 80063ca:	d80a      	bhi.n	80063e2 <_printf_i+0x32>
 80063cc:	2f00      	cmp	r7, #0
 80063ce:	f000 80d3 	beq.w	8006578 <_printf_i+0x1c8>
 80063d2:	2f58      	cmp	r7, #88	@ 0x58
 80063d4:	f000 80ba 	beq.w	800654c <_printf_i+0x19c>
 80063d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063e0:	e03a      	b.n	8006458 <_printf_i+0xa8>
 80063e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063e6:	2b15      	cmp	r3, #21
 80063e8:	d8f6      	bhi.n	80063d8 <_printf_i+0x28>
 80063ea:	a101      	add	r1, pc, #4	@ (adr r1, 80063f0 <_printf_i+0x40>)
 80063ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063f0:	08006449 	.word	0x08006449
 80063f4:	0800645d 	.word	0x0800645d
 80063f8:	080063d9 	.word	0x080063d9
 80063fc:	080063d9 	.word	0x080063d9
 8006400:	080063d9 	.word	0x080063d9
 8006404:	080063d9 	.word	0x080063d9
 8006408:	0800645d 	.word	0x0800645d
 800640c:	080063d9 	.word	0x080063d9
 8006410:	080063d9 	.word	0x080063d9
 8006414:	080063d9 	.word	0x080063d9
 8006418:	080063d9 	.word	0x080063d9
 800641c:	0800655f 	.word	0x0800655f
 8006420:	08006487 	.word	0x08006487
 8006424:	08006519 	.word	0x08006519
 8006428:	080063d9 	.word	0x080063d9
 800642c:	080063d9 	.word	0x080063d9
 8006430:	08006581 	.word	0x08006581
 8006434:	080063d9 	.word	0x080063d9
 8006438:	08006487 	.word	0x08006487
 800643c:	080063d9 	.word	0x080063d9
 8006440:	080063d9 	.word	0x080063d9
 8006444:	08006521 	.word	0x08006521
 8006448:	6833      	ldr	r3, [r6, #0]
 800644a:	1d1a      	adds	r2, r3, #4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6032      	str	r2, [r6, #0]
 8006450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006458:	2301      	movs	r3, #1
 800645a:	e09e      	b.n	800659a <_printf_i+0x1ea>
 800645c:	6833      	ldr	r3, [r6, #0]
 800645e:	6820      	ldr	r0, [r4, #0]
 8006460:	1d19      	adds	r1, r3, #4
 8006462:	6031      	str	r1, [r6, #0]
 8006464:	0606      	lsls	r6, r0, #24
 8006466:	d501      	bpl.n	800646c <_printf_i+0xbc>
 8006468:	681d      	ldr	r5, [r3, #0]
 800646a:	e003      	b.n	8006474 <_printf_i+0xc4>
 800646c:	0645      	lsls	r5, r0, #25
 800646e:	d5fb      	bpl.n	8006468 <_printf_i+0xb8>
 8006470:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006474:	2d00      	cmp	r5, #0
 8006476:	da03      	bge.n	8006480 <_printf_i+0xd0>
 8006478:	232d      	movs	r3, #45	@ 0x2d
 800647a:	426d      	negs	r5, r5
 800647c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006480:	230a      	movs	r3, #10
 8006482:	4859      	ldr	r0, [pc, #356]	@ (80065e8 <_printf_i+0x238>)
 8006484:	e011      	b.n	80064aa <_printf_i+0xfa>
 8006486:	6821      	ldr	r1, [r4, #0]
 8006488:	6833      	ldr	r3, [r6, #0]
 800648a:	0608      	lsls	r0, r1, #24
 800648c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006490:	d402      	bmi.n	8006498 <_printf_i+0xe8>
 8006492:	0649      	lsls	r1, r1, #25
 8006494:	bf48      	it	mi
 8006496:	b2ad      	uxthmi	r5, r5
 8006498:	2f6f      	cmp	r7, #111	@ 0x6f
 800649a:	6033      	str	r3, [r6, #0]
 800649c:	bf14      	ite	ne
 800649e:	230a      	movne	r3, #10
 80064a0:	2308      	moveq	r3, #8
 80064a2:	4851      	ldr	r0, [pc, #324]	@ (80065e8 <_printf_i+0x238>)
 80064a4:	2100      	movs	r1, #0
 80064a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064aa:	6866      	ldr	r6, [r4, #4]
 80064ac:	2e00      	cmp	r6, #0
 80064ae:	bfa8      	it	ge
 80064b0:	6821      	ldrge	r1, [r4, #0]
 80064b2:	60a6      	str	r6, [r4, #8]
 80064b4:	bfa4      	itt	ge
 80064b6:	f021 0104 	bicge.w	r1, r1, #4
 80064ba:	6021      	strge	r1, [r4, #0]
 80064bc:	b90d      	cbnz	r5, 80064c2 <_printf_i+0x112>
 80064be:	2e00      	cmp	r6, #0
 80064c0:	d04b      	beq.n	800655a <_printf_i+0x1aa>
 80064c2:	4616      	mov	r6, r2
 80064c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80064c8:	fb03 5711 	mls	r7, r3, r1, r5
 80064cc:	5dc7      	ldrb	r7, [r0, r7]
 80064ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064d2:	462f      	mov	r7, r5
 80064d4:	42bb      	cmp	r3, r7
 80064d6:	460d      	mov	r5, r1
 80064d8:	d9f4      	bls.n	80064c4 <_printf_i+0x114>
 80064da:	2b08      	cmp	r3, #8
 80064dc:	d10b      	bne.n	80064f6 <_printf_i+0x146>
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	07df      	lsls	r7, r3, #31
 80064e2:	d508      	bpl.n	80064f6 <_printf_i+0x146>
 80064e4:	6923      	ldr	r3, [r4, #16]
 80064e6:	6861      	ldr	r1, [r4, #4]
 80064e8:	4299      	cmp	r1, r3
 80064ea:	bfde      	ittt	le
 80064ec:	2330      	movle	r3, #48	@ 0x30
 80064ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064f6:	1b92      	subs	r2, r2, r6
 80064f8:	6122      	str	r2, [r4, #16]
 80064fa:	464b      	mov	r3, r9
 80064fc:	4621      	mov	r1, r4
 80064fe:	4640      	mov	r0, r8
 8006500:	f8cd a000 	str.w	sl, [sp]
 8006504:	aa03      	add	r2, sp, #12
 8006506:	f7ff fee1 	bl	80062cc <_printf_common>
 800650a:	3001      	adds	r0, #1
 800650c:	d14a      	bne.n	80065a4 <_printf_i+0x1f4>
 800650e:	f04f 30ff 	mov.w	r0, #4294967295
 8006512:	b004      	add	sp, #16
 8006514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	f043 0320 	orr.w	r3, r3, #32
 800651e:	6023      	str	r3, [r4, #0]
 8006520:	2778      	movs	r7, #120	@ 0x78
 8006522:	4832      	ldr	r0, [pc, #200]	@ (80065ec <_printf_i+0x23c>)
 8006524:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	6831      	ldr	r1, [r6, #0]
 800652c:	061f      	lsls	r7, r3, #24
 800652e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006532:	d402      	bmi.n	800653a <_printf_i+0x18a>
 8006534:	065f      	lsls	r7, r3, #25
 8006536:	bf48      	it	mi
 8006538:	b2ad      	uxthmi	r5, r5
 800653a:	6031      	str	r1, [r6, #0]
 800653c:	07d9      	lsls	r1, r3, #31
 800653e:	bf44      	itt	mi
 8006540:	f043 0320 	orrmi.w	r3, r3, #32
 8006544:	6023      	strmi	r3, [r4, #0]
 8006546:	b11d      	cbz	r5, 8006550 <_printf_i+0x1a0>
 8006548:	2310      	movs	r3, #16
 800654a:	e7ab      	b.n	80064a4 <_printf_i+0xf4>
 800654c:	4826      	ldr	r0, [pc, #152]	@ (80065e8 <_printf_i+0x238>)
 800654e:	e7e9      	b.n	8006524 <_printf_i+0x174>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	f023 0320 	bic.w	r3, r3, #32
 8006556:	6023      	str	r3, [r4, #0]
 8006558:	e7f6      	b.n	8006548 <_printf_i+0x198>
 800655a:	4616      	mov	r6, r2
 800655c:	e7bd      	b.n	80064da <_printf_i+0x12a>
 800655e:	6833      	ldr	r3, [r6, #0]
 8006560:	6825      	ldr	r5, [r4, #0]
 8006562:	1d18      	adds	r0, r3, #4
 8006564:	6961      	ldr	r1, [r4, #20]
 8006566:	6030      	str	r0, [r6, #0]
 8006568:	062e      	lsls	r6, r5, #24
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	d501      	bpl.n	8006572 <_printf_i+0x1c2>
 800656e:	6019      	str	r1, [r3, #0]
 8006570:	e002      	b.n	8006578 <_printf_i+0x1c8>
 8006572:	0668      	lsls	r0, r5, #25
 8006574:	d5fb      	bpl.n	800656e <_printf_i+0x1be>
 8006576:	8019      	strh	r1, [r3, #0]
 8006578:	2300      	movs	r3, #0
 800657a:	4616      	mov	r6, r2
 800657c:	6123      	str	r3, [r4, #16]
 800657e:	e7bc      	b.n	80064fa <_printf_i+0x14a>
 8006580:	6833      	ldr	r3, [r6, #0]
 8006582:	2100      	movs	r1, #0
 8006584:	1d1a      	adds	r2, r3, #4
 8006586:	6032      	str	r2, [r6, #0]
 8006588:	681e      	ldr	r6, [r3, #0]
 800658a:	6862      	ldr	r2, [r4, #4]
 800658c:	4630      	mov	r0, r6
 800658e:	f000 f859 	bl	8006644 <memchr>
 8006592:	b108      	cbz	r0, 8006598 <_printf_i+0x1e8>
 8006594:	1b80      	subs	r0, r0, r6
 8006596:	6060      	str	r0, [r4, #4]
 8006598:	6863      	ldr	r3, [r4, #4]
 800659a:	6123      	str	r3, [r4, #16]
 800659c:	2300      	movs	r3, #0
 800659e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065a2:	e7aa      	b.n	80064fa <_printf_i+0x14a>
 80065a4:	4632      	mov	r2, r6
 80065a6:	4649      	mov	r1, r9
 80065a8:	4640      	mov	r0, r8
 80065aa:	6923      	ldr	r3, [r4, #16]
 80065ac:	47d0      	blx	sl
 80065ae:	3001      	adds	r0, #1
 80065b0:	d0ad      	beq.n	800650e <_printf_i+0x15e>
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	079b      	lsls	r3, r3, #30
 80065b6:	d413      	bmi.n	80065e0 <_printf_i+0x230>
 80065b8:	68e0      	ldr	r0, [r4, #12]
 80065ba:	9b03      	ldr	r3, [sp, #12]
 80065bc:	4298      	cmp	r0, r3
 80065be:	bfb8      	it	lt
 80065c0:	4618      	movlt	r0, r3
 80065c2:	e7a6      	b.n	8006512 <_printf_i+0x162>
 80065c4:	2301      	movs	r3, #1
 80065c6:	4632      	mov	r2, r6
 80065c8:	4649      	mov	r1, r9
 80065ca:	4640      	mov	r0, r8
 80065cc:	47d0      	blx	sl
 80065ce:	3001      	adds	r0, #1
 80065d0:	d09d      	beq.n	800650e <_printf_i+0x15e>
 80065d2:	3501      	adds	r5, #1
 80065d4:	68e3      	ldr	r3, [r4, #12]
 80065d6:	9903      	ldr	r1, [sp, #12]
 80065d8:	1a5b      	subs	r3, r3, r1
 80065da:	42ab      	cmp	r3, r5
 80065dc:	dcf2      	bgt.n	80065c4 <_printf_i+0x214>
 80065de:	e7eb      	b.n	80065b8 <_printf_i+0x208>
 80065e0:	2500      	movs	r5, #0
 80065e2:	f104 0619 	add.w	r6, r4, #25
 80065e6:	e7f5      	b.n	80065d4 <_printf_i+0x224>
 80065e8:	08007653 	.word	0x08007653
 80065ec:	08007664 	.word	0x08007664

080065f0 <memmove>:
 80065f0:	4288      	cmp	r0, r1
 80065f2:	b510      	push	{r4, lr}
 80065f4:	eb01 0402 	add.w	r4, r1, r2
 80065f8:	d902      	bls.n	8006600 <memmove+0x10>
 80065fa:	4284      	cmp	r4, r0
 80065fc:	4623      	mov	r3, r4
 80065fe:	d807      	bhi.n	8006610 <memmove+0x20>
 8006600:	1e43      	subs	r3, r0, #1
 8006602:	42a1      	cmp	r1, r4
 8006604:	d008      	beq.n	8006618 <memmove+0x28>
 8006606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800660a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800660e:	e7f8      	b.n	8006602 <memmove+0x12>
 8006610:	4601      	mov	r1, r0
 8006612:	4402      	add	r2, r0
 8006614:	428a      	cmp	r2, r1
 8006616:	d100      	bne.n	800661a <memmove+0x2a>
 8006618:	bd10      	pop	{r4, pc}
 800661a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800661e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006622:	e7f7      	b.n	8006614 <memmove+0x24>

08006624 <_sbrk_r>:
 8006624:	b538      	push	{r3, r4, r5, lr}
 8006626:	2300      	movs	r3, #0
 8006628:	4d05      	ldr	r5, [pc, #20]	@ (8006640 <_sbrk_r+0x1c>)
 800662a:	4604      	mov	r4, r0
 800662c:	4608      	mov	r0, r1
 800662e:	602b      	str	r3, [r5, #0]
 8006630:	f7fb fae2 	bl	8001bf8 <_sbrk>
 8006634:	1c43      	adds	r3, r0, #1
 8006636:	d102      	bne.n	800663e <_sbrk_r+0x1a>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	b103      	cbz	r3, 800663e <_sbrk_r+0x1a>
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	bd38      	pop	{r3, r4, r5, pc}
 8006640:	20000384 	.word	0x20000384

08006644 <memchr>:
 8006644:	4603      	mov	r3, r0
 8006646:	b510      	push	{r4, lr}
 8006648:	b2c9      	uxtb	r1, r1
 800664a:	4402      	add	r2, r0
 800664c:	4293      	cmp	r3, r2
 800664e:	4618      	mov	r0, r3
 8006650:	d101      	bne.n	8006656 <memchr+0x12>
 8006652:	2000      	movs	r0, #0
 8006654:	e003      	b.n	800665e <memchr+0x1a>
 8006656:	7804      	ldrb	r4, [r0, #0]
 8006658:	3301      	adds	r3, #1
 800665a:	428c      	cmp	r4, r1
 800665c:	d1f6      	bne.n	800664c <memchr+0x8>
 800665e:	bd10      	pop	{r4, pc}

08006660 <memcpy>:
 8006660:	440a      	add	r2, r1
 8006662:	4291      	cmp	r1, r2
 8006664:	f100 33ff 	add.w	r3, r0, #4294967295
 8006668:	d100      	bne.n	800666c <memcpy+0xc>
 800666a:	4770      	bx	lr
 800666c:	b510      	push	{r4, lr}
 800666e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006672:	4291      	cmp	r1, r2
 8006674:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006678:	d1f9      	bne.n	800666e <memcpy+0xe>
 800667a:	bd10      	pop	{r4, pc}

0800667c <_realloc_r>:
 800667c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006680:	4680      	mov	r8, r0
 8006682:	4615      	mov	r5, r2
 8006684:	460c      	mov	r4, r1
 8006686:	b921      	cbnz	r1, 8006692 <_realloc_r+0x16>
 8006688:	4611      	mov	r1, r2
 800668a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800668e:	f7ff bc39 	b.w	8005f04 <_malloc_r>
 8006692:	b92a      	cbnz	r2, 80066a0 <_realloc_r+0x24>
 8006694:	f7ff fbcc 	bl	8005e30 <_free_r>
 8006698:	2400      	movs	r4, #0
 800669a:	4620      	mov	r0, r4
 800669c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a0:	f000 f81a 	bl	80066d8 <_malloc_usable_size_r>
 80066a4:	4285      	cmp	r5, r0
 80066a6:	4606      	mov	r6, r0
 80066a8:	d802      	bhi.n	80066b0 <_realloc_r+0x34>
 80066aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80066ae:	d8f4      	bhi.n	800669a <_realloc_r+0x1e>
 80066b0:	4629      	mov	r1, r5
 80066b2:	4640      	mov	r0, r8
 80066b4:	f7ff fc26 	bl	8005f04 <_malloc_r>
 80066b8:	4607      	mov	r7, r0
 80066ba:	2800      	cmp	r0, #0
 80066bc:	d0ec      	beq.n	8006698 <_realloc_r+0x1c>
 80066be:	42b5      	cmp	r5, r6
 80066c0:	462a      	mov	r2, r5
 80066c2:	4621      	mov	r1, r4
 80066c4:	bf28      	it	cs
 80066c6:	4632      	movcs	r2, r6
 80066c8:	f7ff ffca 	bl	8006660 <memcpy>
 80066cc:	4621      	mov	r1, r4
 80066ce:	4640      	mov	r0, r8
 80066d0:	f7ff fbae 	bl	8005e30 <_free_r>
 80066d4:	463c      	mov	r4, r7
 80066d6:	e7e0      	b.n	800669a <_realloc_r+0x1e>

080066d8 <_malloc_usable_size_r>:
 80066d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066dc:	1f18      	subs	r0, r3, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	bfbc      	itt	lt
 80066e2:	580b      	ldrlt	r3, [r1, r0]
 80066e4:	18c0      	addlt	r0, r0, r3
 80066e6:	4770      	bx	lr

080066e8 <pow>:
 80066e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066ec:	4614      	mov	r4, r2
 80066ee:	461d      	mov	r5, r3
 80066f0:	4680      	mov	r8, r0
 80066f2:	4689      	mov	r9, r1
 80066f4:	f000 f8ac 	bl	8006850 <__ieee754_pow>
 80066f8:	4622      	mov	r2, r4
 80066fa:	4606      	mov	r6, r0
 80066fc:	460f      	mov	r7, r1
 80066fe:	462b      	mov	r3, r5
 8006700:	4620      	mov	r0, r4
 8006702:	4629      	mov	r1, r5
 8006704:	f7fa f982 	bl	8000a0c <__aeabi_dcmpun>
 8006708:	bbc8      	cbnz	r0, 800677e <pow+0x96>
 800670a:	2200      	movs	r2, #0
 800670c:	2300      	movs	r3, #0
 800670e:	4640      	mov	r0, r8
 8006710:	4649      	mov	r1, r9
 8006712:	f7fa f949 	bl	80009a8 <__aeabi_dcmpeq>
 8006716:	b1b8      	cbz	r0, 8006748 <pow+0x60>
 8006718:	2200      	movs	r2, #0
 800671a:	2300      	movs	r3, #0
 800671c:	4620      	mov	r0, r4
 800671e:	4629      	mov	r1, r5
 8006720:	f7fa f942 	bl	80009a8 <__aeabi_dcmpeq>
 8006724:	2800      	cmp	r0, #0
 8006726:	d141      	bne.n	80067ac <pow+0xc4>
 8006728:	4620      	mov	r0, r4
 800672a:	4629      	mov	r1, r5
 800672c:	f000 f844 	bl	80067b8 <finite>
 8006730:	b328      	cbz	r0, 800677e <pow+0x96>
 8006732:	2200      	movs	r2, #0
 8006734:	2300      	movs	r3, #0
 8006736:	4620      	mov	r0, r4
 8006738:	4629      	mov	r1, r5
 800673a:	f7fa f93f 	bl	80009bc <__aeabi_dcmplt>
 800673e:	b1f0      	cbz	r0, 800677e <pow+0x96>
 8006740:	f7ff fb4a 	bl	8005dd8 <__errno>
 8006744:	2322      	movs	r3, #34	@ 0x22
 8006746:	e019      	b.n	800677c <pow+0x94>
 8006748:	4630      	mov	r0, r6
 800674a:	4639      	mov	r1, r7
 800674c:	f000 f834 	bl	80067b8 <finite>
 8006750:	b9c8      	cbnz	r0, 8006786 <pow+0x9e>
 8006752:	4640      	mov	r0, r8
 8006754:	4649      	mov	r1, r9
 8006756:	f000 f82f 	bl	80067b8 <finite>
 800675a:	b1a0      	cbz	r0, 8006786 <pow+0x9e>
 800675c:	4620      	mov	r0, r4
 800675e:	4629      	mov	r1, r5
 8006760:	f000 f82a 	bl	80067b8 <finite>
 8006764:	b178      	cbz	r0, 8006786 <pow+0x9e>
 8006766:	4632      	mov	r2, r6
 8006768:	463b      	mov	r3, r7
 800676a:	4630      	mov	r0, r6
 800676c:	4639      	mov	r1, r7
 800676e:	f7fa f94d 	bl	8000a0c <__aeabi_dcmpun>
 8006772:	2800      	cmp	r0, #0
 8006774:	d0e4      	beq.n	8006740 <pow+0x58>
 8006776:	f7ff fb2f 	bl	8005dd8 <__errno>
 800677a:	2321      	movs	r3, #33	@ 0x21
 800677c:	6003      	str	r3, [r0, #0]
 800677e:	4630      	mov	r0, r6
 8006780:	4639      	mov	r1, r7
 8006782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006786:	2200      	movs	r2, #0
 8006788:	2300      	movs	r3, #0
 800678a:	4630      	mov	r0, r6
 800678c:	4639      	mov	r1, r7
 800678e:	f7fa f90b 	bl	80009a8 <__aeabi_dcmpeq>
 8006792:	2800      	cmp	r0, #0
 8006794:	d0f3      	beq.n	800677e <pow+0x96>
 8006796:	4640      	mov	r0, r8
 8006798:	4649      	mov	r1, r9
 800679a:	f000 f80d 	bl	80067b8 <finite>
 800679e:	2800      	cmp	r0, #0
 80067a0:	d0ed      	beq.n	800677e <pow+0x96>
 80067a2:	4620      	mov	r0, r4
 80067a4:	4629      	mov	r1, r5
 80067a6:	f000 f807 	bl	80067b8 <finite>
 80067aa:	e7c8      	b.n	800673e <pow+0x56>
 80067ac:	2600      	movs	r6, #0
 80067ae:	4f01      	ldr	r7, [pc, #4]	@ (80067b4 <pow+0xcc>)
 80067b0:	e7e5      	b.n	800677e <pow+0x96>
 80067b2:	bf00      	nop
 80067b4:	3ff00000 	.word	0x3ff00000

080067b8 <finite>:
 80067b8:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80067bc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80067c0:	0fc0      	lsrs	r0, r0, #31
 80067c2:	4770      	bx	lr

080067c4 <round>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80067ca:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 80067ce:	2a13      	cmp	r2, #19
 80067d0:	4604      	mov	r4, r0
 80067d2:	460d      	mov	r5, r1
 80067d4:	460b      	mov	r3, r1
 80067d6:	dc1a      	bgt.n	800680e <round+0x4a>
 80067d8:	2a00      	cmp	r2, #0
 80067da:	da0b      	bge.n	80067f4 <round+0x30>
 80067dc:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80067e0:	3201      	adds	r2, #1
 80067e2:	bf04      	itt	eq
 80067e4:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80067e8:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80067ec:	2200      	movs	r2, #0
 80067ee:	461d      	mov	r5, r3
 80067f0:	4614      	mov	r4, r2
 80067f2:	e016      	b.n	8006822 <round+0x5e>
 80067f4:	4815      	ldr	r0, [pc, #84]	@ (800684c <round+0x88>)
 80067f6:	4110      	asrs	r0, r2
 80067f8:	4001      	ands	r1, r0
 80067fa:	4321      	orrs	r1, r4
 80067fc:	d011      	beq.n	8006822 <round+0x5e>
 80067fe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8006802:	fa41 f202 	asr.w	r2, r1, r2
 8006806:	4413      	add	r3, r2
 8006808:	ea23 0300 	bic.w	r3, r3, r0
 800680c:	e7ee      	b.n	80067ec <round+0x28>
 800680e:	2a33      	cmp	r2, #51	@ 0x33
 8006810:	dd0a      	ble.n	8006828 <round+0x64>
 8006812:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006816:	d104      	bne.n	8006822 <round+0x5e>
 8006818:	4602      	mov	r2, r0
 800681a:	f7f9 fca7 	bl	800016c <__adddf3>
 800681e:	4604      	mov	r4, r0
 8006820:	460d      	mov	r5, r1
 8006822:	4620      	mov	r0, r4
 8006824:	4629      	mov	r1, r5
 8006826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006828:	f04f 30ff 	mov.w	r0, #4294967295
 800682c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8006830:	40f8      	lsrs	r0, r7
 8006832:	4220      	tst	r0, r4
 8006834:	d0f5      	beq.n	8006822 <round+0x5e>
 8006836:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800683a:	2201      	movs	r2, #1
 800683c:	408a      	lsls	r2, r1
 800683e:	1912      	adds	r2, r2, r4
 8006840:	bf28      	it	cs
 8006842:	3301      	addcs	r3, #1
 8006844:	ea22 0200 	bic.w	r2, r2, r0
 8006848:	e7d1      	b.n	80067ee <round+0x2a>
 800684a:	bf00      	nop
 800684c:	000fffff 	.word	0x000fffff

08006850 <__ieee754_pow>:
 8006850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006854:	b091      	sub	sp, #68	@ 0x44
 8006856:	e9cd 2300 	strd	r2, r3, [sp]
 800685a:	468b      	mov	fp, r1
 800685c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8006860:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8006864:	4682      	mov	sl, r0
 8006866:	ea57 0001 	orrs.w	r0, r7, r1
 800686a:	d112      	bne.n	8006892 <__ieee754_pow+0x42>
 800686c:	4653      	mov	r3, sl
 800686e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8006872:	18db      	adds	r3, r3, r3
 8006874:	4152      	adcs	r2, r2
 8006876:	4298      	cmp	r0, r3
 8006878:	4b91      	ldr	r3, [pc, #580]	@ (8006ac0 <__ieee754_pow+0x270>)
 800687a:	4193      	sbcs	r3, r2
 800687c:	f080 84ce 	bcs.w	800721c <__ieee754_pow+0x9cc>
 8006880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006884:	4650      	mov	r0, sl
 8006886:	4659      	mov	r1, fp
 8006888:	f7f9 fc70 	bl	800016c <__adddf3>
 800688c:	b011      	add	sp, #68	@ 0x44
 800688e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006892:	4b8c      	ldr	r3, [pc, #560]	@ (8006ac4 <__ieee754_pow+0x274>)
 8006894:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8006898:	429e      	cmp	r6, r3
 800689a:	465d      	mov	r5, fp
 800689c:	46d1      	mov	r9, sl
 800689e:	d807      	bhi.n	80068b0 <__ieee754_pow+0x60>
 80068a0:	d102      	bne.n	80068a8 <__ieee754_pow+0x58>
 80068a2:	f1ba 0f00 	cmp.w	sl, #0
 80068a6:	d1eb      	bne.n	8006880 <__ieee754_pow+0x30>
 80068a8:	429f      	cmp	r7, r3
 80068aa:	d801      	bhi.n	80068b0 <__ieee754_pow+0x60>
 80068ac:	d10f      	bne.n	80068ce <__ieee754_pow+0x7e>
 80068ae:	b171      	cbz	r1, 80068ce <__ieee754_pow+0x7e>
 80068b0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80068b4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80068b8:	ea55 0509 	orrs.w	r5, r5, r9
 80068bc:	d1e0      	bne.n	8006880 <__ieee754_pow+0x30>
 80068be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80068c2:	18db      	adds	r3, r3, r3
 80068c4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80068c8:	4152      	adcs	r2, r2
 80068ca:	429d      	cmp	r5, r3
 80068cc:	e7d4      	b.n	8006878 <__ieee754_pow+0x28>
 80068ce:	2d00      	cmp	r5, #0
 80068d0:	4633      	mov	r3, r6
 80068d2:	da39      	bge.n	8006948 <__ieee754_pow+0xf8>
 80068d4:	4a7c      	ldr	r2, [pc, #496]	@ (8006ac8 <__ieee754_pow+0x278>)
 80068d6:	4297      	cmp	r7, r2
 80068d8:	d84e      	bhi.n	8006978 <__ieee754_pow+0x128>
 80068da:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80068de:	4297      	cmp	r7, r2
 80068e0:	f240 84ab 	bls.w	800723a <__ieee754_pow+0x9ea>
 80068e4:	153a      	asrs	r2, r7, #20
 80068e6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80068ea:	2a14      	cmp	r2, #20
 80068ec:	dd0f      	ble.n	800690e <__ieee754_pow+0xbe>
 80068ee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80068f2:	fa21 f402 	lsr.w	r4, r1, r2
 80068f6:	fa04 f202 	lsl.w	r2, r4, r2
 80068fa:	428a      	cmp	r2, r1
 80068fc:	f040 849d 	bne.w	800723a <__ieee754_pow+0x9ea>
 8006900:	f004 0401 	and.w	r4, r4, #1
 8006904:	f1c4 0402 	rsb	r4, r4, #2
 8006908:	2900      	cmp	r1, #0
 800690a:	d15a      	bne.n	80069c2 <__ieee754_pow+0x172>
 800690c:	e00e      	b.n	800692c <__ieee754_pow+0xdc>
 800690e:	2900      	cmp	r1, #0
 8006910:	d156      	bne.n	80069c0 <__ieee754_pow+0x170>
 8006912:	f1c2 0214 	rsb	r2, r2, #20
 8006916:	fa47 f402 	asr.w	r4, r7, r2
 800691a:	fa04 f202 	lsl.w	r2, r4, r2
 800691e:	42ba      	cmp	r2, r7
 8006920:	f040 8488 	bne.w	8007234 <__ieee754_pow+0x9e4>
 8006924:	f004 0401 	and.w	r4, r4, #1
 8006928:	f1c4 0402 	rsb	r4, r4, #2
 800692c:	4a67      	ldr	r2, [pc, #412]	@ (8006acc <__ieee754_pow+0x27c>)
 800692e:	4297      	cmp	r7, r2
 8006930:	d130      	bne.n	8006994 <__ieee754_pow+0x144>
 8006932:	f1b8 0f00 	cmp.w	r8, #0
 8006936:	f280 8479 	bge.w	800722c <__ieee754_pow+0x9dc>
 800693a:	4652      	mov	r2, sl
 800693c:	465b      	mov	r3, fp
 800693e:	2000      	movs	r0, #0
 8006940:	4962      	ldr	r1, [pc, #392]	@ (8006acc <__ieee754_pow+0x27c>)
 8006942:	f7f9 fef3 	bl	800072c <__aeabi_ddiv>
 8006946:	e7a1      	b.n	800688c <__ieee754_pow+0x3c>
 8006948:	2400      	movs	r4, #0
 800694a:	2900      	cmp	r1, #0
 800694c:	d139      	bne.n	80069c2 <__ieee754_pow+0x172>
 800694e:	4a5d      	ldr	r2, [pc, #372]	@ (8006ac4 <__ieee754_pow+0x274>)
 8006950:	4297      	cmp	r7, r2
 8006952:	d1eb      	bne.n	800692c <__ieee754_pow+0xdc>
 8006954:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8006958:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800695c:	ea53 0309 	orrs.w	r3, r3, r9
 8006960:	f000 845c 	beq.w	800721c <__ieee754_pow+0x9cc>
 8006964:	4b5a      	ldr	r3, [pc, #360]	@ (8006ad0 <__ieee754_pow+0x280>)
 8006966:	429e      	cmp	r6, r3
 8006968:	d908      	bls.n	800697c <__ieee754_pow+0x12c>
 800696a:	f1b8 0f00 	cmp.w	r8, #0
 800696e:	f2c0 8459 	blt.w	8007224 <__ieee754_pow+0x9d4>
 8006972:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006976:	e789      	b.n	800688c <__ieee754_pow+0x3c>
 8006978:	2402      	movs	r4, #2
 800697a:	e7e6      	b.n	800694a <__ieee754_pow+0xfa>
 800697c:	f1b8 0f00 	cmp.w	r8, #0
 8006980:	f04f 0000 	mov.w	r0, #0
 8006984:	f04f 0100 	mov.w	r1, #0
 8006988:	da80      	bge.n	800688c <__ieee754_pow+0x3c>
 800698a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800698e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006992:	e77b      	b.n	800688c <__ieee754_pow+0x3c>
 8006994:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8006998:	d106      	bne.n	80069a8 <__ieee754_pow+0x158>
 800699a:	4652      	mov	r2, sl
 800699c:	465b      	mov	r3, fp
 800699e:	4650      	mov	r0, sl
 80069a0:	4659      	mov	r1, fp
 80069a2:	f7f9 fd99 	bl	80004d8 <__aeabi_dmul>
 80069a6:	e771      	b.n	800688c <__ieee754_pow+0x3c>
 80069a8:	4a4a      	ldr	r2, [pc, #296]	@ (8006ad4 <__ieee754_pow+0x284>)
 80069aa:	4590      	cmp	r8, r2
 80069ac:	d109      	bne.n	80069c2 <__ieee754_pow+0x172>
 80069ae:	2d00      	cmp	r5, #0
 80069b0:	db07      	blt.n	80069c2 <__ieee754_pow+0x172>
 80069b2:	4650      	mov	r0, sl
 80069b4:	4659      	mov	r1, fp
 80069b6:	b011      	add	sp, #68	@ 0x44
 80069b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069bc:	f000 bd12 	b.w	80073e4 <__ieee754_sqrt>
 80069c0:	2400      	movs	r4, #0
 80069c2:	4650      	mov	r0, sl
 80069c4:	4659      	mov	r1, fp
 80069c6:	9302      	str	r3, [sp, #8]
 80069c8:	f000 fc6a 	bl	80072a0 <fabs>
 80069cc:	9b02      	ldr	r3, [sp, #8]
 80069ce:	f1b9 0f00 	cmp.w	r9, #0
 80069d2:	d127      	bne.n	8006a24 <__ieee754_pow+0x1d4>
 80069d4:	4a3d      	ldr	r2, [pc, #244]	@ (8006acc <__ieee754_pow+0x27c>)
 80069d6:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80069da:	4594      	cmp	ip, r2
 80069dc:	d000      	beq.n	80069e0 <__ieee754_pow+0x190>
 80069de:	bb0e      	cbnz	r6, 8006a24 <__ieee754_pow+0x1d4>
 80069e0:	f1b8 0f00 	cmp.w	r8, #0
 80069e4:	da05      	bge.n	80069f2 <__ieee754_pow+0x1a2>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	2000      	movs	r0, #0
 80069ec:	4937      	ldr	r1, [pc, #220]	@ (8006acc <__ieee754_pow+0x27c>)
 80069ee:	f7f9 fe9d 	bl	800072c <__aeabi_ddiv>
 80069f2:	2d00      	cmp	r5, #0
 80069f4:	f6bf af4a 	bge.w	800688c <__ieee754_pow+0x3c>
 80069f8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80069fc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8006a00:	4326      	orrs	r6, r4
 8006a02:	d108      	bne.n	8006a16 <__ieee754_pow+0x1c6>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4610      	mov	r0, r2
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	f7f9 fbac 	bl	8000168 <__aeabi_dsub>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	e795      	b.n	8006942 <__ieee754_pow+0xf2>
 8006a16:	2c01      	cmp	r4, #1
 8006a18:	f47f af38 	bne.w	800688c <__ieee754_pow+0x3c>
 8006a1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a20:	4619      	mov	r1, r3
 8006a22:	e733      	b.n	800688c <__ieee754_pow+0x3c>
 8006a24:	0fea      	lsrs	r2, r5, #31
 8006a26:	3a01      	subs	r2, #1
 8006a28:	ea52 0c04 	orrs.w	ip, r2, r4
 8006a2c:	d102      	bne.n	8006a34 <__ieee754_pow+0x1e4>
 8006a2e:	4652      	mov	r2, sl
 8006a30:	465b      	mov	r3, fp
 8006a32:	e7e9      	b.n	8006a08 <__ieee754_pow+0x1b8>
 8006a34:	f04f 0900 	mov.w	r9, #0
 8006a38:	3c01      	subs	r4, #1
 8006a3a:	4314      	orrs	r4, r2
 8006a3c:	bf14      	ite	ne
 8006a3e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8006acc <__ieee754_pow+0x27c>
 8006a42:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8006ad8 <__ieee754_pow+0x288>
 8006a46:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8006a4a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8006a4e:	f240 8107 	bls.w	8006c60 <__ieee754_pow+0x410>
 8006a52:	4b22      	ldr	r3, [pc, #136]	@ (8006adc <__ieee754_pow+0x28c>)
 8006a54:	429f      	cmp	r7, r3
 8006a56:	4b1e      	ldr	r3, [pc, #120]	@ (8006ad0 <__ieee754_pow+0x280>)
 8006a58:	d913      	bls.n	8006a82 <__ieee754_pow+0x232>
 8006a5a:	429e      	cmp	r6, r3
 8006a5c:	d808      	bhi.n	8006a70 <__ieee754_pow+0x220>
 8006a5e:	f1b8 0f00 	cmp.w	r8, #0
 8006a62:	da08      	bge.n	8006a76 <__ieee754_pow+0x226>
 8006a64:	2000      	movs	r0, #0
 8006a66:	b011      	add	sp, #68	@ 0x44
 8006a68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	f000 bcb4 	b.w	80073d8 <__math_oflow>
 8006a70:	f1b8 0f00 	cmp.w	r8, #0
 8006a74:	dcf6      	bgt.n	8006a64 <__ieee754_pow+0x214>
 8006a76:	2000      	movs	r0, #0
 8006a78:	b011      	add	sp, #68	@ 0x44
 8006a7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7e:	f000 bca6 	b.w	80073ce <__math_uflow>
 8006a82:	429e      	cmp	r6, r3
 8006a84:	d20c      	bcs.n	8006aa0 <__ieee754_pow+0x250>
 8006a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f7f9 ff95 	bl	80009bc <__aeabi_dcmplt>
 8006a92:	3800      	subs	r0, #0
 8006a94:	bf18      	it	ne
 8006a96:	2001      	movne	r0, #1
 8006a98:	f1b8 0f00 	cmp.w	r8, #0
 8006a9c:	daec      	bge.n	8006a78 <__ieee754_pow+0x228>
 8006a9e:	e7e2      	b.n	8006a66 <__ieee754_pow+0x216>
 8006aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8006acc <__ieee754_pow+0x27c>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	429e      	cmp	r6, r3
 8006aa6:	d91b      	bls.n	8006ae0 <__ieee754_pow+0x290>
 8006aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aac:	2300      	movs	r3, #0
 8006aae:	f7f9 ff85 	bl	80009bc <__aeabi_dcmplt>
 8006ab2:	3800      	subs	r0, #0
 8006ab4:	bf18      	it	ne
 8006ab6:	2001      	movne	r0, #1
 8006ab8:	f1b8 0f00 	cmp.w	r8, #0
 8006abc:	dcd3      	bgt.n	8006a66 <__ieee754_pow+0x216>
 8006abe:	e7db      	b.n	8006a78 <__ieee754_pow+0x228>
 8006ac0:	fff00000 	.word	0xfff00000
 8006ac4:	7ff00000 	.word	0x7ff00000
 8006ac8:	433fffff 	.word	0x433fffff
 8006acc:	3ff00000 	.word	0x3ff00000
 8006ad0:	3fefffff 	.word	0x3fefffff
 8006ad4:	3fe00000 	.word	0x3fe00000
 8006ad8:	bff00000 	.word	0xbff00000
 8006adc:	43f00000 	.word	0x43f00000
 8006ae0:	4b5b      	ldr	r3, [pc, #364]	@ (8006c50 <__ieee754_pow+0x400>)
 8006ae2:	f7f9 fb41 	bl	8000168 <__aeabi_dsub>
 8006ae6:	a352      	add	r3, pc, #328	@ (adr r3, 8006c30 <__ieee754_pow+0x3e0>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	4604      	mov	r4, r0
 8006aee:	460d      	mov	r5, r1
 8006af0:	f7f9 fcf2 	bl	80004d8 <__aeabi_dmul>
 8006af4:	a350      	add	r3, pc, #320	@ (adr r3, 8006c38 <__ieee754_pow+0x3e8>)
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	4606      	mov	r6, r0
 8006afc:	460f      	mov	r7, r1
 8006afe:	4620      	mov	r0, r4
 8006b00:	4629      	mov	r1, r5
 8006b02:	f7f9 fce9 	bl	80004d8 <__aeabi_dmul>
 8006b06:	2200      	movs	r2, #0
 8006b08:	4682      	mov	sl, r0
 8006b0a:	468b      	mov	fp, r1
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	4629      	mov	r1, r5
 8006b10:	4b50      	ldr	r3, [pc, #320]	@ (8006c54 <__ieee754_pow+0x404>)
 8006b12:	f7f9 fce1 	bl	80004d8 <__aeabi_dmul>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	a149      	add	r1, pc, #292	@ (adr r1, 8006c40 <__ieee754_pow+0x3f0>)
 8006b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b20:	f7f9 fb22 	bl	8000168 <__aeabi_dsub>
 8006b24:	4622      	mov	r2, r4
 8006b26:	462b      	mov	r3, r5
 8006b28:	f7f9 fcd6 	bl	80004d8 <__aeabi_dmul>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	2000      	movs	r0, #0
 8006b32:	4949      	ldr	r1, [pc, #292]	@ (8006c58 <__ieee754_pow+0x408>)
 8006b34:	f7f9 fb18 	bl	8000168 <__aeabi_dsub>
 8006b38:	4622      	mov	r2, r4
 8006b3a:	4680      	mov	r8, r0
 8006b3c:	4689      	mov	r9, r1
 8006b3e:	462b      	mov	r3, r5
 8006b40:	4620      	mov	r0, r4
 8006b42:	4629      	mov	r1, r5
 8006b44:	f7f9 fcc8 	bl	80004d8 <__aeabi_dmul>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4640      	mov	r0, r8
 8006b4e:	4649      	mov	r1, r9
 8006b50:	f7f9 fcc2 	bl	80004d8 <__aeabi_dmul>
 8006b54:	a33c      	add	r3, pc, #240	@ (adr r3, 8006c48 <__ieee754_pow+0x3f8>)
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	f7f9 fcbd 	bl	80004d8 <__aeabi_dmul>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4650      	mov	r0, sl
 8006b64:	4659      	mov	r1, fp
 8006b66:	f7f9 faff 	bl	8000168 <__aeabi_dsub>
 8006b6a:	2400      	movs	r4, #0
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4680      	mov	r8, r0
 8006b72:	4689      	mov	r9, r1
 8006b74:	4630      	mov	r0, r6
 8006b76:	4639      	mov	r1, r7
 8006b78:	f7f9 faf8 	bl	800016c <__adddf3>
 8006b7c:	4632      	mov	r2, r6
 8006b7e:	463b      	mov	r3, r7
 8006b80:	4620      	mov	r0, r4
 8006b82:	460d      	mov	r5, r1
 8006b84:	f7f9 faf0 	bl	8000168 <__aeabi_dsub>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4640      	mov	r0, r8
 8006b8e:	4649      	mov	r1, r9
 8006b90:	f7f9 faea 	bl	8000168 <__aeabi_dsub>
 8006b94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	9304      	str	r3, [sp, #16]
 8006ba0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	460f      	mov	r7, r1
 8006ba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bac:	4652      	mov	r2, sl
 8006bae:	465b      	mov	r3, fp
 8006bb0:	f7f9 fada 	bl	8000168 <__aeabi_dsub>
 8006bb4:	4622      	mov	r2, r4
 8006bb6:	462b      	mov	r3, r5
 8006bb8:	f7f9 fc8e 	bl	80004d8 <__aeabi_dmul>
 8006bbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bc0:	4680      	mov	r8, r0
 8006bc2:	4689      	mov	r9, r1
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	4639      	mov	r1, r7
 8006bc8:	f7f9 fc86 	bl	80004d8 <__aeabi_dmul>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4640      	mov	r0, r8
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	f7f9 faca 	bl	800016c <__adddf3>
 8006bd8:	4652      	mov	r2, sl
 8006bda:	465b      	mov	r3, fp
 8006bdc:	4606      	mov	r6, r0
 8006bde:	460f      	mov	r7, r1
 8006be0:	4620      	mov	r0, r4
 8006be2:	4629      	mov	r1, r5
 8006be4:	f7f9 fc78 	bl	80004d8 <__aeabi_dmul>
 8006be8:	460b      	mov	r3, r1
 8006bea:	4602      	mov	r2, r0
 8006bec:	4680      	mov	r8, r0
 8006bee:	4689      	mov	r9, r1
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	4639      	mov	r1, r7
 8006bf4:	f7f9 faba 	bl	800016c <__adddf3>
 8006bf8:	4b18      	ldr	r3, [pc, #96]	@ (8006c5c <__ieee754_pow+0x40c>)
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4299      	cmp	r1, r3
 8006bfe:	460d      	mov	r5, r1
 8006c00:	468a      	mov	sl, r1
 8006c02:	468b      	mov	fp, r1
 8006c04:	f340 82e0 	ble.w	80071c8 <__ieee754_pow+0x978>
 8006c08:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006c0c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006c10:	4303      	orrs	r3, r0
 8006c12:	f000 81df 	beq.w	8006fd4 <__ieee754_pow+0x784>
 8006c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	f7f9 fecd 	bl	80009bc <__aeabi_dcmplt>
 8006c22:	3800      	subs	r0, #0
 8006c24:	bf18      	it	ne
 8006c26:	2001      	movne	r0, #1
 8006c28:	e71d      	b.n	8006a66 <__ieee754_pow+0x216>
 8006c2a:	bf00      	nop
 8006c2c:	f3af 8000 	nop.w
 8006c30:	60000000 	.word	0x60000000
 8006c34:	3ff71547 	.word	0x3ff71547
 8006c38:	f85ddf44 	.word	0xf85ddf44
 8006c3c:	3e54ae0b 	.word	0x3e54ae0b
 8006c40:	55555555 	.word	0x55555555
 8006c44:	3fd55555 	.word	0x3fd55555
 8006c48:	652b82fe 	.word	0x652b82fe
 8006c4c:	3ff71547 	.word	0x3ff71547
 8006c50:	3ff00000 	.word	0x3ff00000
 8006c54:	3fd00000 	.word	0x3fd00000
 8006c58:	3fe00000 	.word	0x3fe00000
 8006c5c:	408fffff 	.word	0x408fffff
 8006c60:	4ad3      	ldr	r2, [pc, #844]	@ (8006fb0 <__ieee754_pow+0x760>)
 8006c62:	402a      	ands	r2, r5
 8006c64:	2a00      	cmp	r2, #0
 8006c66:	f040 817a 	bne.w	8006f5e <__ieee754_pow+0x70e>
 8006c6a:	4bd2      	ldr	r3, [pc, #840]	@ (8006fb4 <__ieee754_pow+0x764>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f7f9 fc33 	bl	80004d8 <__aeabi_dmul>
 8006c72:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8006c76:	460b      	mov	r3, r1
 8006c78:	151a      	asrs	r2, r3, #20
 8006c7a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006c7e:	4422      	add	r2, r4
 8006c80:	920a      	str	r2, [sp, #40]	@ 0x28
 8006c82:	4acd      	ldr	r2, [pc, #820]	@ (8006fb8 <__ieee754_pow+0x768>)
 8006c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c88:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006c92:	dd08      	ble.n	8006ca6 <__ieee754_pow+0x456>
 8006c94:	4ac9      	ldr	r2, [pc, #804]	@ (8006fbc <__ieee754_pow+0x76c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	f340 8163 	ble.w	8006f62 <__ieee754_pow+0x712>
 8006c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c9e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ca6:	2600      	movs	r6, #0
 8006ca8:	00f3      	lsls	r3, r6, #3
 8006caa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cac:	4bc4      	ldr	r3, [pc, #784]	@ (8006fc0 <__ieee754_pow+0x770>)
 8006cae:	4629      	mov	r1, r5
 8006cb0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006cb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006cbe:	4623      	mov	r3, r4
 8006cc0:	4682      	mov	sl, r0
 8006cc2:	f7f9 fa51 	bl	8000168 <__aeabi_dsub>
 8006cc6:	4652      	mov	r2, sl
 8006cc8:	462b      	mov	r3, r5
 8006cca:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006cce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006cd2:	f7f9 fa4b 	bl	800016c <__adddf3>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	2000      	movs	r0, #0
 8006cdc:	49b9      	ldr	r1, [pc, #740]	@ (8006fc4 <__ieee754_pow+0x774>)
 8006cde:	f7f9 fd25 	bl	800072c <__aeabi_ddiv>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006cea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cee:	f7f9 fbf3 	bl	80004d8 <__aeabi_dmul>
 8006cf2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006cf6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006cfa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	2200      	movs	r2, #0
 8006d02:	46ab      	mov	fp, r5
 8006d04:	106d      	asrs	r5, r5, #1
 8006d06:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8006d0a:	9304      	str	r3, [sp, #16]
 8006d0c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006d10:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006d14:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006d18:	4640      	mov	r0, r8
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	4614      	mov	r4, r2
 8006d1e:	461d      	mov	r5, r3
 8006d20:	f7f9 fbda 	bl	80004d8 <__aeabi_dmul>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d2c:	f7f9 fa1c 	bl	8000168 <__aeabi_dsub>
 8006d30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d34:	4606      	mov	r6, r0
 8006d36:	460f      	mov	r7, r1
 8006d38:	4620      	mov	r0, r4
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	f7f9 fa14 	bl	8000168 <__aeabi_dsub>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4650      	mov	r0, sl
 8006d46:	4659      	mov	r1, fp
 8006d48:	f7f9 fa0e 	bl	8000168 <__aeabi_dsub>
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	464b      	mov	r3, r9
 8006d50:	f7f9 fbc2 	bl	80004d8 <__aeabi_dmul>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4630      	mov	r0, r6
 8006d5a:	4639      	mov	r1, r7
 8006d5c:	f7f9 fa04 	bl	8000168 <__aeabi_dsub>
 8006d60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d64:	f7f9 fbb8 	bl	80004d8 <__aeabi_dmul>
 8006d68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d70:	4610      	mov	r0, r2
 8006d72:	4619      	mov	r1, r3
 8006d74:	f7f9 fbb0 	bl	80004d8 <__aeabi_dmul>
 8006d78:	a37b      	add	r3, pc, #492	@ (adr r3, 8006f68 <__ieee754_pow+0x718>)
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	4604      	mov	r4, r0
 8006d80:	460d      	mov	r5, r1
 8006d82:	f7f9 fba9 	bl	80004d8 <__aeabi_dmul>
 8006d86:	a37a      	add	r3, pc, #488	@ (adr r3, 8006f70 <__ieee754_pow+0x720>)
 8006d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8c:	f7f9 f9ee 	bl	800016c <__adddf3>
 8006d90:	4622      	mov	r2, r4
 8006d92:	462b      	mov	r3, r5
 8006d94:	f7f9 fba0 	bl	80004d8 <__aeabi_dmul>
 8006d98:	a377      	add	r3, pc, #476	@ (adr r3, 8006f78 <__ieee754_pow+0x728>)
 8006d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9e:	f7f9 f9e5 	bl	800016c <__adddf3>
 8006da2:	4622      	mov	r2, r4
 8006da4:	462b      	mov	r3, r5
 8006da6:	f7f9 fb97 	bl	80004d8 <__aeabi_dmul>
 8006daa:	a375      	add	r3, pc, #468	@ (adr r3, 8006f80 <__ieee754_pow+0x730>)
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	f7f9 f9dc 	bl	800016c <__adddf3>
 8006db4:	4622      	mov	r2, r4
 8006db6:	462b      	mov	r3, r5
 8006db8:	f7f9 fb8e 	bl	80004d8 <__aeabi_dmul>
 8006dbc:	a372      	add	r3, pc, #456	@ (adr r3, 8006f88 <__ieee754_pow+0x738>)
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	f7f9 f9d3 	bl	800016c <__adddf3>
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	462b      	mov	r3, r5
 8006dca:	f7f9 fb85 	bl	80004d8 <__aeabi_dmul>
 8006dce:	a370      	add	r3, pc, #448	@ (adr r3, 8006f90 <__ieee754_pow+0x740>)
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	f7f9 f9ca 	bl	800016c <__adddf3>
 8006dd8:	4622      	mov	r2, r4
 8006dda:	4606      	mov	r6, r0
 8006ddc:	460f      	mov	r7, r1
 8006dde:	462b      	mov	r3, r5
 8006de0:	4620      	mov	r0, r4
 8006de2:	4629      	mov	r1, r5
 8006de4:	f7f9 fb78 	bl	80004d8 <__aeabi_dmul>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4630      	mov	r0, r6
 8006dee:	4639      	mov	r1, r7
 8006df0:	f7f9 fb72 	bl	80004d8 <__aeabi_dmul>
 8006df4:	4604      	mov	r4, r0
 8006df6:	460d      	mov	r5, r1
 8006df8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dfc:	4642      	mov	r2, r8
 8006dfe:	464b      	mov	r3, r9
 8006e00:	f7f9 f9b4 	bl	800016c <__adddf3>
 8006e04:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e08:	f7f9 fb66 	bl	80004d8 <__aeabi_dmul>
 8006e0c:	4622      	mov	r2, r4
 8006e0e:	462b      	mov	r3, r5
 8006e10:	f7f9 f9ac 	bl	800016c <__adddf3>
 8006e14:	4642      	mov	r2, r8
 8006e16:	4682      	mov	sl, r0
 8006e18:	468b      	mov	fp, r1
 8006e1a:	464b      	mov	r3, r9
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	4649      	mov	r1, r9
 8006e20:	f7f9 fb5a 	bl	80004d8 <__aeabi_dmul>
 8006e24:	2200      	movs	r2, #0
 8006e26:	4b68      	ldr	r3, [pc, #416]	@ (8006fc8 <__ieee754_pow+0x778>)
 8006e28:	4606      	mov	r6, r0
 8006e2a:	460f      	mov	r7, r1
 8006e2c:	f7f9 f99e 	bl	800016c <__adddf3>
 8006e30:	4652      	mov	r2, sl
 8006e32:	465b      	mov	r3, fp
 8006e34:	f7f9 f99a 	bl	800016c <__adddf3>
 8006e38:	2400      	movs	r4, #0
 8006e3a:	460d      	mov	r5, r1
 8006e3c:	4622      	mov	r2, r4
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4640      	mov	r0, r8
 8006e42:	4649      	mov	r1, r9
 8006e44:	f7f9 fb48 	bl	80004d8 <__aeabi_dmul>
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4680      	mov	r8, r0
 8006e4c:	4689      	mov	r9, r1
 8006e4e:	4620      	mov	r0, r4
 8006e50:	4629      	mov	r1, r5
 8006e52:	4b5d      	ldr	r3, [pc, #372]	@ (8006fc8 <__ieee754_pow+0x778>)
 8006e54:	f7f9 f988 	bl	8000168 <__aeabi_dsub>
 8006e58:	4632      	mov	r2, r6
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	f7f9 f984 	bl	8000168 <__aeabi_dsub>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4650      	mov	r0, sl
 8006e66:	4659      	mov	r1, fp
 8006e68:	f7f9 f97e 	bl	8000168 <__aeabi_dsub>
 8006e6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e70:	f7f9 fb32 	bl	80004d8 <__aeabi_dmul>
 8006e74:	4622      	mov	r2, r4
 8006e76:	4606      	mov	r6, r0
 8006e78:	460f      	mov	r7, r1
 8006e7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e7e:	462b      	mov	r3, r5
 8006e80:	f7f9 fb2a 	bl	80004d8 <__aeabi_dmul>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4630      	mov	r0, r6
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	f7f9 f96e 	bl	800016c <__adddf3>
 8006e90:	2400      	movs	r4, #0
 8006e92:	4606      	mov	r6, r0
 8006e94:	460f      	mov	r7, r1
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	4649      	mov	r1, r9
 8006e9e:	f7f9 f965 	bl	800016c <__adddf3>
 8006ea2:	a33d      	add	r3, pc, #244	@ (adr r3, 8006f98 <__ieee754_pow+0x748>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	460d      	mov	r5, r1
 8006eac:	f7f9 fb14 	bl	80004d8 <__aeabi_dmul>
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	464b      	mov	r3, r9
 8006eb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006eb8:	4620      	mov	r0, r4
 8006eba:	4629      	mov	r1, r5
 8006ebc:	f7f9 f954 	bl	8000168 <__aeabi_dsub>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	f7f9 f94e 	bl	8000168 <__aeabi_dsub>
 8006ecc:	a334      	add	r3, pc, #208	@ (adr r3, 8006fa0 <__ieee754_pow+0x750>)
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	f7f9 fb01 	bl	80004d8 <__aeabi_dmul>
 8006ed6:	a334      	add	r3, pc, #208	@ (adr r3, 8006fa8 <__ieee754_pow+0x758>)
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	4606      	mov	r6, r0
 8006ede:	460f      	mov	r7, r1
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	f7f9 faf8 	bl	80004d8 <__aeabi_dmul>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4630      	mov	r0, r6
 8006eee:	4639      	mov	r1, r7
 8006ef0:	f7f9 f93c 	bl	800016c <__adddf3>
 8006ef4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ef6:	4b35      	ldr	r3, [pc, #212]	@ (8006fcc <__ieee754_pow+0x77c>)
 8006ef8:	2400      	movs	r4, #0
 8006efa:	4413      	add	r3, r2
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	f7f9 f934 	bl	800016c <__adddf3>
 8006f04:	4682      	mov	sl, r0
 8006f06:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f08:	468b      	mov	fp, r1
 8006f0a:	f7f9 fa7b 	bl	8000404 <__aeabi_i2d>
 8006f0e:	4606      	mov	r6, r0
 8006f10:	460f      	mov	r7, r1
 8006f12:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006f14:	4b2e      	ldr	r3, [pc, #184]	@ (8006fd0 <__ieee754_pow+0x780>)
 8006f16:	4413      	add	r3, r2
 8006f18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f1c:	4652      	mov	r2, sl
 8006f1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f22:	465b      	mov	r3, fp
 8006f24:	f7f9 f922 	bl	800016c <__adddf3>
 8006f28:	4642      	mov	r2, r8
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	f7f9 f91e 	bl	800016c <__adddf3>
 8006f30:	4632      	mov	r2, r6
 8006f32:	463b      	mov	r3, r7
 8006f34:	f7f9 f91a 	bl	800016c <__adddf3>
 8006f38:	4632      	mov	r2, r6
 8006f3a:	463b      	mov	r3, r7
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	460d      	mov	r5, r1
 8006f40:	f7f9 f912 	bl	8000168 <__aeabi_dsub>
 8006f44:	4642      	mov	r2, r8
 8006f46:	464b      	mov	r3, r9
 8006f48:	f7f9 f90e 	bl	8000168 <__aeabi_dsub>
 8006f4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f50:	f7f9 f90a 	bl	8000168 <__aeabi_dsub>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4650      	mov	r0, sl
 8006f5a:	4659      	mov	r1, fp
 8006f5c:	e618      	b.n	8006b90 <__ieee754_pow+0x340>
 8006f5e:	2400      	movs	r4, #0
 8006f60:	e68a      	b.n	8006c78 <__ieee754_pow+0x428>
 8006f62:	2601      	movs	r6, #1
 8006f64:	e6a0      	b.n	8006ca8 <__ieee754_pow+0x458>
 8006f66:	bf00      	nop
 8006f68:	4a454eef 	.word	0x4a454eef
 8006f6c:	3fca7e28 	.word	0x3fca7e28
 8006f70:	93c9db65 	.word	0x93c9db65
 8006f74:	3fcd864a 	.word	0x3fcd864a
 8006f78:	a91d4101 	.word	0xa91d4101
 8006f7c:	3fd17460 	.word	0x3fd17460
 8006f80:	518f264d 	.word	0x518f264d
 8006f84:	3fd55555 	.word	0x3fd55555
 8006f88:	db6fabff 	.word	0xdb6fabff
 8006f8c:	3fdb6db6 	.word	0x3fdb6db6
 8006f90:	33333303 	.word	0x33333303
 8006f94:	3fe33333 	.word	0x3fe33333
 8006f98:	e0000000 	.word	0xe0000000
 8006f9c:	3feec709 	.word	0x3feec709
 8006fa0:	dc3a03fd 	.word	0xdc3a03fd
 8006fa4:	3feec709 	.word	0x3feec709
 8006fa8:	145b01f5 	.word	0x145b01f5
 8006fac:	be3e2fe0 	.word	0xbe3e2fe0
 8006fb0:	7ff00000 	.word	0x7ff00000
 8006fb4:	43400000 	.word	0x43400000
 8006fb8:	0003988e 	.word	0x0003988e
 8006fbc:	000bb679 	.word	0x000bb679
 8006fc0:	08007698 	.word	0x08007698
 8006fc4:	3ff00000 	.word	0x3ff00000
 8006fc8:	40080000 	.word	0x40080000
 8006fcc:	08007678 	.word	0x08007678
 8006fd0:	08007688 	.word	0x08007688
 8006fd4:	a39a      	add	r3, pc, #616	@ (adr r3, 8007240 <__ieee754_pow+0x9f0>)
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	4630      	mov	r0, r6
 8006fdc:	4639      	mov	r1, r7
 8006fde:	f7f9 f8c5 	bl	800016c <__adddf3>
 8006fe2:	4642      	mov	r2, r8
 8006fe4:	e9cd 0100 	strd	r0, r1, [sp]
 8006fe8:	464b      	mov	r3, r9
 8006fea:	4620      	mov	r0, r4
 8006fec:	4629      	mov	r1, r5
 8006fee:	f7f9 f8bb 	bl	8000168 <__aeabi_dsub>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ffa:	f7f9 fcfd 	bl	80009f8 <__aeabi_dcmpgt>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	f47f ae09 	bne.w	8006c16 <__ieee754_pow+0x3c6>
 8007004:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007008:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800700c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007010:	fa43 fa0a 	asr.w	sl, r3, sl
 8007014:	44da      	add	sl, fp
 8007016:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800701a:	489b      	ldr	r0, [pc, #620]	@ (8007288 <__ieee754_pow+0xa38>)
 800701c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007020:	4108      	asrs	r0, r1
 8007022:	ea00 030a 	and.w	r3, r0, sl
 8007026:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800702a:	f1c1 0114 	rsb	r1, r1, #20
 800702e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007032:	4640      	mov	r0, r8
 8007034:	fa4a fa01 	asr.w	sl, sl, r1
 8007038:	f1bb 0f00 	cmp.w	fp, #0
 800703c:	4649      	mov	r1, r9
 800703e:	f04f 0200 	mov.w	r2, #0
 8007042:	bfb8      	it	lt
 8007044:	f1ca 0a00 	rsblt	sl, sl, #0
 8007048:	f7f9 f88e 	bl	8000168 <__aeabi_dsub>
 800704c:	4680      	mov	r8, r0
 800704e:	4689      	mov	r9, r1
 8007050:	2400      	movs	r4, #0
 8007052:	4632      	mov	r2, r6
 8007054:	463b      	mov	r3, r7
 8007056:	4640      	mov	r0, r8
 8007058:	4649      	mov	r1, r9
 800705a:	f7f9 f887 	bl	800016c <__adddf3>
 800705e:	a37a      	add	r3, pc, #488	@ (adr r3, 8007248 <__ieee754_pow+0x9f8>)
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	4620      	mov	r0, r4
 8007066:	460d      	mov	r5, r1
 8007068:	f7f9 fa36 	bl	80004d8 <__aeabi_dmul>
 800706c:	4642      	mov	r2, r8
 800706e:	464b      	mov	r3, r9
 8007070:	e9cd 0100 	strd	r0, r1, [sp]
 8007074:	4620      	mov	r0, r4
 8007076:	4629      	mov	r1, r5
 8007078:	f7f9 f876 	bl	8000168 <__aeabi_dsub>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4630      	mov	r0, r6
 8007082:	4639      	mov	r1, r7
 8007084:	f7f9 f870 	bl	8000168 <__aeabi_dsub>
 8007088:	a371      	add	r3, pc, #452	@ (adr r3, 8007250 <__ieee754_pow+0xa00>)
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	f7f9 fa23 	bl	80004d8 <__aeabi_dmul>
 8007092:	a371      	add	r3, pc, #452	@ (adr r3, 8007258 <__ieee754_pow+0xa08>)
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	4680      	mov	r8, r0
 800709a:	4689      	mov	r9, r1
 800709c:	4620      	mov	r0, r4
 800709e:	4629      	mov	r1, r5
 80070a0:	f7f9 fa1a 	bl	80004d8 <__aeabi_dmul>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	4640      	mov	r0, r8
 80070aa:	4649      	mov	r1, r9
 80070ac:	f7f9 f85e 	bl	800016c <__adddf3>
 80070b0:	4604      	mov	r4, r0
 80070b2:	460d      	mov	r5, r1
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070bc:	f7f9 f856 	bl	800016c <__adddf3>
 80070c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070c4:	4680      	mov	r8, r0
 80070c6:	4689      	mov	r9, r1
 80070c8:	f7f9 f84e 	bl	8000168 <__aeabi_dsub>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4620      	mov	r0, r4
 80070d2:	4629      	mov	r1, r5
 80070d4:	f7f9 f848 	bl	8000168 <__aeabi_dsub>
 80070d8:	4642      	mov	r2, r8
 80070da:	4606      	mov	r6, r0
 80070dc:	460f      	mov	r7, r1
 80070de:	464b      	mov	r3, r9
 80070e0:	4640      	mov	r0, r8
 80070e2:	4649      	mov	r1, r9
 80070e4:	f7f9 f9f8 	bl	80004d8 <__aeabi_dmul>
 80070e8:	a35d      	add	r3, pc, #372	@ (adr r3, 8007260 <__ieee754_pow+0xa10>)
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	4604      	mov	r4, r0
 80070f0:	460d      	mov	r5, r1
 80070f2:	f7f9 f9f1 	bl	80004d8 <__aeabi_dmul>
 80070f6:	a35c      	add	r3, pc, #368	@ (adr r3, 8007268 <__ieee754_pow+0xa18>)
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	f7f9 f834 	bl	8000168 <__aeabi_dsub>
 8007100:	4622      	mov	r2, r4
 8007102:	462b      	mov	r3, r5
 8007104:	f7f9 f9e8 	bl	80004d8 <__aeabi_dmul>
 8007108:	a359      	add	r3, pc, #356	@ (adr r3, 8007270 <__ieee754_pow+0xa20>)
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	f7f9 f82d 	bl	800016c <__adddf3>
 8007112:	4622      	mov	r2, r4
 8007114:	462b      	mov	r3, r5
 8007116:	f7f9 f9df 	bl	80004d8 <__aeabi_dmul>
 800711a:	a357      	add	r3, pc, #348	@ (adr r3, 8007278 <__ieee754_pow+0xa28>)
 800711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007120:	f7f9 f822 	bl	8000168 <__aeabi_dsub>
 8007124:	4622      	mov	r2, r4
 8007126:	462b      	mov	r3, r5
 8007128:	f7f9 f9d6 	bl	80004d8 <__aeabi_dmul>
 800712c:	a354      	add	r3, pc, #336	@ (adr r3, 8007280 <__ieee754_pow+0xa30>)
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	f7f9 f81b 	bl	800016c <__adddf3>
 8007136:	4622      	mov	r2, r4
 8007138:	462b      	mov	r3, r5
 800713a:	f7f9 f9cd 	bl	80004d8 <__aeabi_dmul>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	4640      	mov	r0, r8
 8007144:	4649      	mov	r1, r9
 8007146:	f7f9 f80f 	bl	8000168 <__aeabi_dsub>
 800714a:	4604      	mov	r4, r0
 800714c:	460d      	mov	r5, r1
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4640      	mov	r0, r8
 8007154:	4649      	mov	r1, r9
 8007156:	f7f9 f9bf 	bl	80004d8 <__aeabi_dmul>
 800715a:	2200      	movs	r2, #0
 800715c:	e9cd 0100 	strd	r0, r1, [sp]
 8007160:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007164:	4620      	mov	r0, r4
 8007166:	4629      	mov	r1, r5
 8007168:	f7f8 fffe 	bl	8000168 <__aeabi_dsub>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007174:	f7f9 fada 	bl	800072c <__aeabi_ddiv>
 8007178:	4632      	mov	r2, r6
 800717a:	4604      	mov	r4, r0
 800717c:	460d      	mov	r5, r1
 800717e:	463b      	mov	r3, r7
 8007180:	4640      	mov	r0, r8
 8007182:	4649      	mov	r1, r9
 8007184:	f7f9 f9a8 	bl	80004d8 <__aeabi_dmul>
 8007188:	4632      	mov	r2, r6
 800718a:	463b      	mov	r3, r7
 800718c:	f7f8 ffee 	bl	800016c <__adddf3>
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	4620      	mov	r0, r4
 8007196:	4629      	mov	r1, r5
 8007198:	f7f8 ffe6 	bl	8000168 <__aeabi_dsub>
 800719c:	4642      	mov	r2, r8
 800719e:	464b      	mov	r3, r9
 80071a0:	f7f8 ffe2 	bl	8000168 <__aeabi_dsub>
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	2000      	movs	r0, #0
 80071aa:	4938      	ldr	r1, [pc, #224]	@ (800728c <__ieee754_pow+0xa3c>)
 80071ac:	f7f8 ffdc 	bl	8000168 <__aeabi_dsub>
 80071b0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80071b4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80071b8:	da2e      	bge.n	8007218 <__ieee754_pow+0x9c8>
 80071ba:	4652      	mov	r2, sl
 80071bc:	f000 f874 	bl	80072a8 <scalbn>
 80071c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071c4:	f7ff bbed 	b.w	80069a2 <__ieee754_pow+0x152>
 80071c8:	4c31      	ldr	r4, [pc, #196]	@ (8007290 <__ieee754_pow+0xa40>)
 80071ca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80071ce:	42a3      	cmp	r3, r4
 80071d0:	d91a      	bls.n	8007208 <__ieee754_pow+0x9b8>
 80071d2:	4b30      	ldr	r3, [pc, #192]	@ (8007294 <__ieee754_pow+0xa44>)
 80071d4:	440b      	add	r3, r1
 80071d6:	4303      	orrs	r3, r0
 80071d8:	d009      	beq.n	80071ee <__ieee754_pow+0x99e>
 80071da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071de:	2200      	movs	r2, #0
 80071e0:	2300      	movs	r3, #0
 80071e2:	f7f9 fbeb 	bl	80009bc <__aeabi_dcmplt>
 80071e6:	3800      	subs	r0, #0
 80071e8:	bf18      	it	ne
 80071ea:	2001      	movne	r0, #1
 80071ec:	e444      	b.n	8006a78 <__ieee754_pow+0x228>
 80071ee:	4642      	mov	r2, r8
 80071f0:	464b      	mov	r3, r9
 80071f2:	f7f8 ffb9 	bl	8000168 <__aeabi_dsub>
 80071f6:	4632      	mov	r2, r6
 80071f8:	463b      	mov	r3, r7
 80071fa:	f7f9 fbf3 	bl	80009e4 <__aeabi_dcmpge>
 80071fe:	2800      	cmp	r0, #0
 8007200:	d1eb      	bne.n	80071da <__ieee754_pow+0x98a>
 8007202:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8007298 <__ieee754_pow+0xa48>
 8007206:	e6fd      	b.n	8007004 <__ieee754_pow+0x7b4>
 8007208:	469a      	mov	sl, r3
 800720a:	4b24      	ldr	r3, [pc, #144]	@ (800729c <__ieee754_pow+0xa4c>)
 800720c:	459a      	cmp	sl, r3
 800720e:	f63f aef9 	bhi.w	8007004 <__ieee754_pow+0x7b4>
 8007212:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007216:	e71b      	b.n	8007050 <__ieee754_pow+0x800>
 8007218:	4621      	mov	r1, r4
 800721a:	e7d1      	b.n	80071c0 <__ieee754_pow+0x970>
 800721c:	2000      	movs	r0, #0
 800721e:	491b      	ldr	r1, [pc, #108]	@ (800728c <__ieee754_pow+0xa3c>)
 8007220:	f7ff bb34 	b.w	800688c <__ieee754_pow+0x3c>
 8007224:	2000      	movs	r0, #0
 8007226:	2100      	movs	r1, #0
 8007228:	f7ff bb30 	b.w	800688c <__ieee754_pow+0x3c>
 800722c:	4650      	mov	r0, sl
 800722e:	4659      	mov	r1, fp
 8007230:	f7ff bb2c 	b.w	800688c <__ieee754_pow+0x3c>
 8007234:	460c      	mov	r4, r1
 8007236:	f7ff bb79 	b.w	800692c <__ieee754_pow+0xdc>
 800723a:	2400      	movs	r4, #0
 800723c:	f7ff bb64 	b.w	8006908 <__ieee754_pow+0xb8>
 8007240:	652b82fe 	.word	0x652b82fe
 8007244:	3c971547 	.word	0x3c971547
 8007248:	00000000 	.word	0x00000000
 800724c:	3fe62e43 	.word	0x3fe62e43
 8007250:	fefa39ef 	.word	0xfefa39ef
 8007254:	3fe62e42 	.word	0x3fe62e42
 8007258:	0ca86c39 	.word	0x0ca86c39
 800725c:	be205c61 	.word	0xbe205c61
 8007260:	72bea4d0 	.word	0x72bea4d0
 8007264:	3e663769 	.word	0x3e663769
 8007268:	c5d26bf1 	.word	0xc5d26bf1
 800726c:	3ebbbd41 	.word	0x3ebbbd41
 8007270:	af25de2c 	.word	0xaf25de2c
 8007274:	3f11566a 	.word	0x3f11566a
 8007278:	16bebd93 	.word	0x16bebd93
 800727c:	3f66c16c 	.word	0x3f66c16c
 8007280:	5555553e 	.word	0x5555553e
 8007284:	3fc55555 	.word	0x3fc55555
 8007288:	fff00000 	.word	0xfff00000
 800728c:	3ff00000 	.word	0x3ff00000
 8007290:	4090cbff 	.word	0x4090cbff
 8007294:	3f6f3400 	.word	0x3f6f3400
 8007298:	4090cc00 	.word	0x4090cc00
 800729c:	3fe00000 	.word	0x3fe00000

080072a0 <fabs>:
 80072a0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80072a4:	4619      	mov	r1, r3
 80072a6:	4770      	bx	lr

080072a8 <scalbn>:
 80072a8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80072ac:	4616      	mov	r6, r2
 80072ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80072b2:	4683      	mov	fp, r0
 80072b4:	468c      	mov	ip, r1
 80072b6:	460b      	mov	r3, r1
 80072b8:	b982      	cbnz	r2, 80072dc <scalbn+0x34>
 80072ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80072be:	4303      	orrs	r3, r0
 80072c0:	d039      	beq.n	8007336 <scalbn+0x8e>
 80072c2:	4b2f      	ldr	r3, [pc, #188]	@ (8007380 <scalbn+0xd8>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	f7f9 f907 	bl	80004d8 <__aeabi_dmul>
 80072ca:	4b2e      	ldr	r3, [pc, #184]	@ (8007384 <scalbn+0xdc>)
 80072cc:	4683      	mov	fp, r0
 80072ce:	429e      	cmp	r6, r3
 80072d0:	468c      	mov	ip, r1
 80072d2:	da0d      	bge.n	80072f0 <scalbn+0x48>
 80072d4:	a326      	add	r3, pc, #152	@ (adr r3, 8007370 <scalbn+0xc8>)
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	e01b      	b.n	8007314 <scalbn+0x6c>
 80072dc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80072e0:	42ba      	cmp	r2, r7
 80072e2:	d109      	bne.n	80072f8 <scalbn+0x50>
 80072e4:	4602      	mov	r2, r0
 80072e6:	f7f8 ff41 	bl	800016c <__adddf3>
 80072ea:	4683      	mov	fp, r0
 80072ec:	468c      	mov	ip, r1
 80072ee:	e022      	b.n	8007336 <scalbn+0x8e>
 80072f0:	460b      	mov	r3, r1
 80072f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80072f6:	3a36      	subs	r2, #54	@ 0x36
 80072f8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80072fc:	428e      	cmp	r6, r1
 80072fe:	dd0c      	ble.n	800731a <scalbn+0x72>
 8007300:	a31d      	add	r3, pc, #116	@ (adr r3, 8007378 <scalbn+0xd0>)
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	461c      	mov	r4, r3
 8007308:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800730c:	f361 74df 	bfi	r4, r1, #31, #1
 8007310:	4621      	mov	r1, r4
 8007312:	481d      	ldr	r0, [pc, #116]	@ (8007388 <scalbn+0xe0>)
 8007314:	f7f9 f8e0 	bl	80004d8 <__aeabi_dmul>
 8007318:	e7e7      	b.n	80072ea <scalbn+0x42>
 800731a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800731e:	4432      	add	r2, r6
 8007320:	428a      	cmp	r2, r1
 8007322:	dced      	bgt.n	8007300 <scalbn+0x58>
 8007324:	2a00      	cmp	r2, #0
 8007326:	dd0a      	ble.n	800733e <scalbn+0x96>
 8007328:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800732c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007330:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007334:	46ac      	mov	ip, r5
 8007336:	4658      	mov	r0, fp
 8007338:	4661      	mov	r1, ip
 800733a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800733e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007342:	da09      	bge.n	8007358 <scalbn+0xb0>
 8007344:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8007348:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800734c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8007350:	480e      	ldr	r0, [pc, #56]	@ (800738c <scalbn+0xe4>)
 8007352:	f041 011f 	orr.w	r1, r1, #31
 8007356:	e7bd      	b.n	80072d4 <scalbn+0x2c>
 8007358:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800735c:	3236      	adds	r2, #54	@ 0x36
 800735e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007362:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007366:	4658      	mov	r0, fp
 8007368:	4629      	mov	r1, r5
 800736a:	2200      	movs	r2, #0
 800736c:	4b08      	ldr	r3, [pc, #32]	@ (8007390 <scalbn+0xe8>)
 800736e:	e7d1      	b.n	8007314 <scalbn+0x6c>
 8007370:	c2f8f359 	.word	0xc2f8f359
 8007374:	01a56e1f 	.word	0x01a56e1f
 8007378:	8800759c 	.word	0x8800759c
 800737c:	7e37e43c 	.word	0x7e37e43c
 8007380:	43500000 	.word	0x43500000
 8007384:	ffff3cb0 	.word	0xffff3cb0
 8007388:	8800759c 	.word	0x8800759c
 800738c:	c2f8f359 	.word	0xc2f8f359
 8007390:	3c900000 	.word	0x3c900000

08007394 <with_errno>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	4604      	mov	r4, r0
 8007398:	460d      	mov	r5, r1
 800739a:	4616      	mov	r6, r2
 800739c:	f7fe fd1c 	bl	8005dd8 <__errno>
 80073a0:	4629      	mov	r1, r5
 80073a2:	6006      	str	r6, [r0, #0]
 80073a4:	4620      	mov	r0, r4
 80073a6:	bd70      	pop	{r4, r5, r6, pc}

080073a8 <xflow>:
 80073a8:	b513      	push	{r0, r1, r4, lr}
 80073aa:	4604      	mov	r4, r0
 80073ac:	4619      	mov	r1, r3
 80073ae:	4610      	mov	r0, r2
 80073b0:	b10c      	cbz	r4, 80073b6 <xflow+0xe>
 80073b2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80073b6:	e9cd 2300 	strd	r2, r3, [sp]
 80073ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073be:	f7f9 f88b 	bl	80004d8 <__aeabi_dmul>
 80073c2:	2222      	movs	r2, #34	@ 0x22
 80073c4:	b002      	add	sp, #8
 80073c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073ca:	f7ff bfe3 	b.w	8007394 <with_errno>

080073ce <__math_uflow>:
 80073ce:	2200      	movs	r2, #0
 80073d0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80073d4:	f7ff bfe8 	b.w	80073a8 <xflow>

080073d8 <__math_oflow>:
 80073d8:	2200      	movs	r2, #0
 80073da:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80073de:	f7ff bfe3 	b.w	80073a8 <xflow>
	...

080073e4 <__ieee754_sqrt>:
 80073e4:	4a67      	ldr	r2, [pc, #412]	@ (8007584 <__ieee754_sqrt+0x1a0>)
 80073e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ea:	438a      	bics	r2, r1
 80073ec:	4606      	mov	r6, r0
 80073ee:	460f      	mov	r7, r1
 80073f0:	460b      	mov	r3, r1
 80073f2:	4604      	mov	r4, r0
 80073f4:	d10e      	bne.n	8007414 <__ieee754_sqrt+0x30>
 80073f6:	4602      	mov	r2, r0
 80073f8:	f7f9 f86e 	bl	80004d8 <__aeabi_dmul>
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	4630      	mov	r0, r6
 8007402:	4639      	mov	r1, r7
 8007404:	f7f8 feb2 	bl	800016c <__adddf3>
 8007408:	4606      	mov	r6, r0
 800740a:	460f      	mov	r7, r1
 800740c:	4630      	mov	r0, r6
 800740e:	4639      	mov	r1, r7
 8007410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007414:	2900      	cmp	r1, #0
 8007416:	dc0c      	bgt.n	8007432 <__ieee754_sqrt+0x4e>
 8007418:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800741c:	4302      	orrs	r2, r0
 800741e:	d0f5      	beq.n	800740c <__ieee754_sqrt+0x28>
 8007420:	b189      	cbz	r1, 8007446 <__ieee754_sqrt+0x62>
 8007422:	4602      	mov	r2, r0
 8007424:	f7f8 fea0 	bl	8000168 <__aeabi_dsub>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	f7f9 f97e 	bl	800072c <__aeabi_ddiv>
 8007430:	e7ea      	b.n	8007408 <__ieee754_sqrt+0x24>
 8007432:	150a      	asrs	r2, r1, #20
 8007434:	d115      	bne.n	8007462 <__ieee754_sqrt+0x7e>
 8007436:	2100      	movs	r1, #0
 8007438:	e009      	b.n	800744e <__ieee754_sqrt+0x6a>
 800743a:	0ae3      	lsrs	r3, r4, #11
 800743c:	3a15      	subs	r2, #21
 800743e:	0564      	lsls	r4, r4, #21
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0fa      	beq.n	800743a <__ieee754_sqrt+0x56>
 8007444:	e7f7      	b.n	8007436 <__ieee754_sqrt+0x52>
 8007446:	460a      	mov	r2, r1
 8007448:	e7fa      	b.n	8007440 <__ieee754_sqrt+0x5c>
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	3101      	adds	r1, #1
 800744e:	02d8      	lsls	r0, r3, #11
 8007450:	d5fb      	bpl.n	800744a <__ieee754_sqrt+0x66>
 8007452:	1e48      	subs	r0, r1, #1
 8007454:	1a12      	subs	r2, r2, r0
 8007456:	f1c1 0020 	rsb	r0, r1, #32
 800745a:	fa24 f000 	lsr.w	r0, r4, r0
 800745e:	4303      	orrs	r3, r0
 8007460:	408c      	lsls	r4, r1
 8007462:	2600      	movs	r6, #0
 8007464:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8007468:	2116      	movs	r1, #22
 800746a:	07d2      	lsls	r2, r2, #31
 800746c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007470:	4632      	mov	r2, r6
 8007472:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800747a:	bf5c      	itt	pl
 800747c:	005b      	lslpl	r3, r3, #1
 800747e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007482:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007486:	bf58      	it	pl
 8007488:	0064      	lslpl	r4, r4, #1
 800748a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800748e:	107f      	asrs	r7, r7, #1
 8007490:	0064      	lsls	r4, r4, #1
 8007492:	1815      	adds	r5, r2, r0
 8007494:	429d      	cmp	r5, r3
 8007496:	bfde      	ittt	le
 8007498:	182a      	addle	r2, r5, r0
 800749a:	1b5b      	suble	r3, r3, r5
 800749c:	1836      	addle	r6, r6, r0
 800749e:	0fe5      	lsrs	r5, r4, #31
 80074a0:	3901      	subs	r1, #1
 80074a2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80074a6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80074aa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80074ae:	d1f0      	bne.n	8007492 <__ieee754_sqrt+0xae>
 80074b0:	460d      	mov	r5, r1
 80074b2:	f04f 0a20 	mov.w	sl, #32
 80074b6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80074ba:	429a      	cmp	r2, r3
 80074bc:	eb01 0c00 	add.w	ip, r1, r0
 80074c0:	db02      	blt.n	80074c8 <__ieee754_sqrt+0xe4>
 80074c2:	d113      	bne.n	80074ec <__ieee754_sqrt+0x108>
 80074c4:	45a4      	cmp	ip, r4
 80074c6:	d811      	bhi.n	80074ec <__ieee754_sqrt+0x108>
 80074c8:	f1bc 0f00 	cmp.w	ip, #0
 80074cc:	eb0c 0100 	add.w	r1, ip, r0
 80074d0:	da42      	bge.n	8007558 <__ieee754_sqrt+0x174>
 80074d2:	2900      	cmp	r1, #0
 80074d4:	db40      	blt.n	8007558 <__ieee754_sqrt+0x174>
 80074d6:	f102 0e01 	add.w	lr, r2, #1
 80074da:	1a9b      	subs	r3, r3, r2
 80074dc:	4672      	mov	r2, lr
 80074de:	45a4      	cmp	ip, r4
 80074e0:	bf88      	it	hi
 80074e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80074e6:	eba4 040c 	sub.w	r4, r4, ip
 80074ea:	4405      	add	r5, r0
 80074ec:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80074f0:	f1ba 0a01 	subs.w	sl, sl, #1
 80074f4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80074f8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80074fc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007500:	d1db      	bne.n	80074ba <__ieee754_sqrt+0xd6>
 8007502:	431c      	orrs	r4, r3
 8007504:	d01a      	beq.n	800753c <__ieee754_sqrt+0x158>
 8007506:	4c20      	ldr	r4, [pc, #128]	@ (8007588 <__ieee754_sqrt+0x1a4>)
 8007508:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800758c <__ieee754_sqrt+0x1a8>
 800750c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007510:	e9db 2300 	ldrd	r2, r3, [fp]
 8007514:	f7f8 fe28 	bl	8000168 <__aeabi_dsub>
 8007518:	e9d4 8900 	ldrd	r8, r9, [r4]
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4640      	mov	r0, r8
 8007522:	4649      	mov	r1, r9
 8007524:	f7f9 fa54 	bl	80009d0 <__aeabi_dcmple>
 8007528:	b140      	cbz	r0, 800753c <__ieee754_sqrt+0x158>
 800752a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800752e:	e9db 2300 	ldrd	r2, r3, [fp]
 8007532:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007536:	d111      	bne.n	800755c <__ieee754_sqrt+0x178>
 8007538:	4655      	mov	r5, sl
 800753a:	3601      	adds	r6, #1
 800753c:	1072      	asrs	r2, r6, #1
 800753e:	086b      	lsrs	r3, r5, #1
 8007540:	07f1      	lsls	r1, r6, #31
 8007542:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007546:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800754a:	bf48      	it	mi
 800754c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007550:	4618      	mov	r0, r3
 8007552:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8007556:	e757      	b.n	8007408 <__ieee754_sqrt+0x24>
 8007558:	4696      	mov	lr, r2
 800755a:	e7be      	b.n	80074da <__ieee754_sqrt+0xf6>
 800755c:	f7f8 fe06 	bl	800016c <__adddf3>
 8007560:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4640      	mov	r0, r8
 800756a:	4649      	mov	r1, r9
 800756c:	f7f9 fa26 	bl	80009bc <__aeabi_dcmplt>
 8007570:	b120      	cbz	r0, 800757c <__ieee754_sqrt+0x198>
 8007572:	1ca8      	adds	r0, r5, #2
 8007574:	bf08      	it	eq
 8007576:	3601      	addeq	r6, #1
 8007578:	3502      	adds	r5, #2
 800757a:	e7df      	b.n	800753c <__ieee754_sqrt+0x158>
 800757c:	1c6b      	adds	r3, r5, #1
 800757e:	f023 0501 	bic.w	r5, r3, #1
 8007582:	e7db      	b.n	800753c <__ieee754_sqrt+0x158>
 8007584:	7ff00000 	.word	0x7ff00000
 8007588:	20000068 	.word	0x20000068
 800758c:	20000060 	.word	0x20000060

08007590 <_init>:
 8007590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007592:	bf00      	nop
 8007594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007596:	bc08      	pop	{r3}
 8007598:	469e      	mov	lr, r3
 800759a:	4770      	bx	lr

0800759c <_fini>:
 800759c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759e:	bf00      	nop
 80075a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075a2:	bc08      	pop	{r3}
 80075a4:	469e      	mov	lr, r3
 80075a6:	4770      	bx	lr
